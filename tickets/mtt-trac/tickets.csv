id,type,owner,reporter,milestone,status,resolution,summary,description,PosixTime,ModifiedTime,priority
1,defect,emallove,jsquyres,v2.0,closed,fixed,Save HTTP username with results,"Now that we're using proper HTTP/Basic authentication to protect submitting MTT results, the HTTP username (and IP address?) should be stored with an incoming set of data in the database.",1156357882,1164833483,major
2,defect,jsquyres,jsquyres,v3.1,assigned,,Implement the Trim phase,"The ""trim"" phase needs to be completed so that scratch directories do not grow out of control after running for a while.",1156357996,1189537080,major
3,defect,jsquyres,jsquyres,Limited OMPI core availability,closed,fixed,Finish implementing hostfile / hostlist functionality,"The hostfile / hostlist functionality is currently half-implemented.  It is read in the .ini file and put in the MTT meta-data, but it is not used anywhere.",1156358129,1156460680,major
4,defect,jsquyres,jsquyres,v1.0,closed,fixed,Need to properly handle tests that are supposed to fail,"Although MTT allows the arbitrary definition of ""pass"" criteria, we have some large test suites where a small number of the tests are supposed to fail (e.g., IBM and Intel).  I.e., most of them ""pass"" by having an exit status of 0, but some of them pass by having a non-zero exit status (e.g., testing MPI_ABORT).

Particularly when we find the test executables via &find_executables() (which finds ''all'' test executables -- both the ones that are supposed to pass and the ones that are supposed to fail), it's hard to have a global set of pass criteria for all of them.  So a better scheme needs to be implemented to allow this kind of flexibility.  Some ideas:

 * Add a functlet that takes the output of &find_executables() and remove a list of names from it.  Perhaps something like the following, which finds all the IBM test executables and then excludes those with a base filename of ""abort"" or ""already_finalized"" (this allows multiple INI sections with different pass criteria):
{{{
simple_tests = &exclude_filename(&find_executables(""collective"", ""communicator"", ""datatype"", \
                          ""dynamic"", ""environment"", ""group"", ""info"", \
                          ""io"", ""onesided"", ""pt2pt"", ""topology""), ""abort"", ""already_finalized"")
}}}
 * Add more fields to the Simple module that allow excluding executables, similar to the &exclude_filename() functlet, above.  This allows multiple INI sections with different pass criteria.
 * Allow Simple to allow the specification of multiple (np, pass, executables, ...) tuples.  This may require more extensive changes to the TestRun infrastructure to be more in-line with what was discussed at the IU/LANL MTT meeting long long ago (i.e., allowing each test to specify its own np, pass criteria, etc.).",1156358993,1158204859,major
5,defect,jsquyres,jsquyres,Future,new,,"SVN ""get"" back-end functionality does not correctly detect ""no new sources""","The back-end SVN ""get"" functionality currently always thinks that it has found new sources, even when it has not, in fact, obtained anything new.

This is repeatable by specifying a Test Get with an SVN checkout -- it will get a new version every time even if the SVN repository with the test has not changed at all.",1156359097,1157638999,major
6,defect,,jsquyres,Future,new,,Test Get phase needs versioning,"The Test Get phase needs some kind of versioning, just like the MPI Get phase.

Without versioning, there is no way to know if there are new versions of tests that need to be downloaded/run (even if the MPI version has not changed).",1156359202,1156363038,major
7,enhancement,,jsquyres,v3.1,new,,Users should be able to delete results from database,"It would be good for HTTP users to be able to delete some or all of their results from the database (not from the MTT client, but probably from a web page).  For example, if a user screws up and submits a bad batch of results (e.g., a compiler license expired, so it falsely reported compile failures), it would be good if the user had a relatively simple method of being able to delete those results from the database rather than skew the results and reports in the database.",1156359410,1208198067,major
8,defect,emallove,jsquyres,v1.0,closed,fixed,Send e-mail every morning of previous 24 hours' compile/test failures,"Send a mail around providing executive summary of the previous day/night/24 hours/whatever failures (failed compiles, failed test runs, etc.).  This mail should have some simple requirements:

 * Subject line indicates the failures (compiles, tests).  Mail should either not be sent or indicate in the subject line if everything passed (!).
 * Mail should not be sent if there is no new information to share (e.g., no tests have been run in the past day/night/24 hours/whatever).
 * Contain HTTP links for more information.  The links should be fixed such that if I bring up a report mail from 3 days ago and click on its links, I'll see the web reports from 3 days ago (not the most current reports).
 * Be ""one page"" or less of information (everyone's screen size is different, hence ""one page"" is in quotes -- the idea is to have just enough information in the mail to get a developer interested to click through to the real data)

This is a first cut at the requirements.  Feel free to add/delete/edit.",1156359715,1158355221,critical
9,defect,,jsquyres,v2.1,closed,fixed,Provide a way for developers to run MTT against workspaces,"Make a trivially easy way for developers to run MTT against their workspaces / local installations.  The biggest usage of this will likely be having developers be able to run a small set of ""sanity"" tests before doing a putback.",1156359810,1178729658,critical
10,enhancement,,jsquyres,Future,new,,Have sever-side INI files with opt-out controls,"Make the ability to have a centralized INI file with a global set of configurations to test that apply to a set of users (E.g., the OMPI core testers).  This allows standardization of the set of tests that are run, etc.

Need to provide ""opt-out"" capabilities from the centralized INI file -- for example, the centralized INI file may list the trunk and all the release branches for OMPI (e.g., trunk, 1.0, 1.1, 1.2).  But Sun only cares about the trunk and 1.2, so they should be able to opt-out of the 1.1 and 1.0 tests.

Additionally, each MTT site will need to be able to customize some fields, such as which compilers to use, etc.",1156359988,1162648796,major
11,defect,,jsquyres,Future,closed,fixed,"Implement ""Test Specify"" phase","From the MTT developer's conference notes:

Implement 'test specify' phase - replaces current test run INI stuff

 * Should generate a list of tuples, which is:
   * exec - binary to execute
   * argv
   * np
   * pass - success return code
   * timeout
   * before_any
   * before_each
   * after_each
   * after_all
 * Test run phase should then accept this list
 * INI file looks like this:
{{{
[test_build: intel]
test_get = intel
module = intel
intel_buildfile = coll

[test specify: intel]
test_build = intel
module = intel
}}}
  The Test Run phase then becomes an engine that simply takes the output of the Test Specify phase (which is kinda how the code is currently organized anyway, but the name ""Test Run"" implies that the modules for this phase have more control than they really do).  ",1156360265,1158204859,major
12,defect,,jsquyres,Future,new,,"Add support for ""disconnected"" scenarios","Add support for MTT users who are behind firewalls or otherwise not directly connected to the internet.  Specifically, allow scenarios like:

 * MPI/Test get phases need to be run on a machine connected to the internet
 * The results of these gets need to be proxied to back-end machines
 * Builds and installs occur on one set of back-end machines (e.g., compile nodes)
 * Test runs occur on a different set of back-end machines (e.g., cluster/compute nodes)
 * Result data need to be proxied back to the internet-connected machine
 * Results are then submitted via the internet",1156360595,1172091222,major
13,defect,,jsquyres,v2.0,closed,fixed,Add support for performance testing and historical data,"Allow MTT to run performance tests and save the results in a historical database.  For example, run NetPIPE and save the data over time.  Be able to report the NetPIPE data in graphical form where relevant (e.g., look at the NetPIPE data for a given BTL from a given cluster over arbitrary time periods).

Should have support for at least the following test suites:

 * Intel benchmarks (used to be Pallas benchmarks)
 * NetPIPE

Probably want to add support for more over time, such as:

 * Presta
 * ...?",1156360766,1166197896,major
14,defect,,jsquyres,Future,new,,Add funclets that give access to stdout/stderr from test run,"Sun may have some tests that require checking stdout / stderr to see if a test passed.  So we need to provide funclets that give access to the stdout / stderr of a test run, and probably some simple string checking funclets (e.g., &grep(), &regexp(), ...).

This ticket is conditional; talk to Sun to see if it's worthwhile before implementing.",1156360863,1156360863,major
15,defect,,jsquyres,Future,new,,Cut down on MTT perl module requirements,"Rainer mentioned that we're requiring a bunch of Perl modules that aren't necessarily installed by default on some older machines (e.g., his).  He installed them to make it work, but it might be nice if we can cut down on the number of requirements -- particularly when running on MTT on parallel compute nodes, where perl installs are likely to be minimal (i.e,. all we need to do is run thests and dump output to files there; no need for fancy downloading perl modules, etc.).  From a mail from Rainer:

It seems that quite a few packets are required to build the ParallelUserAgent-2.56:

 * libwww-perl-5.803   /* which is considered to be too new */
   * depends on Compress-Zlib-2.000_05
 * URI-1.35
 * HTML-Parser
   * depends on HTML-Tagset-3.10",1156361312,1156361312,major
16,defect,jsquyres,jsquyres,Limited OMPI core availability,closed,worksforme,Need a way to report MTT's version number,"If we're going to have users outside of developers using MTT, we need a way for them to report the version that they're running.",1156426423,1156460829,major
17,defect,,jsquyres,Future,new,,More fine-grained MPI Details control,"The current MPI details scheme might not be flexible enough for all scenarios.  Here's one scenario that it does not do well.  It's not an urgent problem, but it might be good to make MPI details be fleible enough to handle this kind of scenario:

 * cluster of 32 4-way SMPs
 * want to test several BTLs, including ""sm""
 * but ""sm"" cannot be tested by itself except when we are running one one node

For example, the following MPI details definition, when spanning multiple nodes, will not work because multi-node jobs will be launched with ""--mca btl self,sm"":

{{{
[MPI Details: Open MPI]
exec = mpirun -np &test_np() --prefix &test_prefix() --mca btl self,@btl@ &test_executable() &test_argv()
btl = &enumerate(""tcp"", ""sm"")
}}}

Instead, it seems like we want to make the value of @btl@ be a bit more conditional -- in this case, we want it to be dependent upon how many nodes (''not'' the value of np!) the job will run across.",1156429301,1165421133,major
18,defect,jsquyres,hpcstork,Limited OMPI core availability,closed,fixed,The cleanup command doesn't can't be executed,"By looking the mtt output I saw that the cleanup script cannot be executed (see below). I assume that a ""real"" command is required and not a shell script.

{{{
Timeout: 1 - 1156432342 (vs. now: 1156432332)
OUT:Can't execute command:
OUT:# This scriptlet ensures that all remnants of the prior mpirun are
OUT:# gone.  It kills all orteds running under this user and whacks any
OUT:# session directories that it finds.  Hence, do not expect to be able
OUT:# to run on the same machine/user as a user who is running MTT tests.
OUT:
OUT:# This scriptlet is not fully tested yet.  Needs testing on: Linux,
OUT:# OSX, Solaris.
OUT:
OUT:who=`whoami`
OUT:which killall > /dev/null 2> /dev/null
OUT:if test ""$?"" = ""0""; then
OUT:    # If we have killall, it's easy.
OUT:    killall -9 orted
OUT:else
OUT:    # We're on an OS without killall.  Which variant of ps do we have?
OUT:    ps auxw > /dev/null 2> /dev/null
OUT:    if test ""$?"" = ""0""; then
OUT:        ps_args=""auxww""
OUT:    else
OUT:        ps_args=""-eadf""
OUT:    fi
OUT:    pids=`ps $ps_args | grep $who | grep -v grep | grep orted awk '{
   print $2 }'`
OUT:    if test ""$pids"" != """"; then
OUT:        kill -9 $pids
OUT:    fi
OUT:fi
OUT:
OUT:# Whack any remaining session directories.  This is a workaround for
OUT:# current bugs in OMPI.
OUT:rm -rf /tmp/openmpi-sessions-${who}*
OUT:
Command complete, exit status: 512
}}}
",1156432852,1156435995,major
19,defect,jsquyres,jsquyres,Limited OMPI core availability,closed,fixed,Rename Perfbase Reporter component to MTTDatabase,Title says all.,1156460252,1156464545,major
20,defect,jsquyres,jsquyres,Limited OMPI core availability,closed,fixed,Add support for Torque,Title says all.  HLRS needs this for their clusters.,1156461467,1156464340,major
21,defect,,hpcstork,v1.0,closed,duplicate,Add  torque/pbs scheduler support to MTT,MTT needs support for torque/pbs scheduler.,1156461731,1156461799,major
22,defect,jsquyres,hpcstork,Limited OMPI core availability,closed,fixed,"fix LD_LIBRARY_PATH for ""make check""","In the file lib/MTT/MPI/Install/OMPI.pm MTT before running the check deletes the LD_BIRARY_PATH to avoid any problems with other librarires. I run into the problem that is mentioned in the comment with the compiler that needs libs of the LD_LIBRARY_PATH. 

I think it should be possible to  avoid the deletion of the LD_LIBRARY_PATH and and the problems with other libraries. If we simple prepend the MTT paths to the LD_LIBRARY_PATH then it is supposed to work, because in this case the MTT libs are always infront of all the others libs in the LD_LIBRARY_PATH.",1156491604,1156508286,major
23,defect,emallove,jsquyres,v1.0,closed,fixed,Many PHP warnings,"I am seeing many PHP warnings in the web server logs, indicating problems with summary.php.  Here's a snipit from the web logs (I am trying to get the IU admins to make these available to us in real-time; right now, you have to ask for them because the files are not readable by our logins) -- I'll attach the entire log that I have that shows all the problems:

{{{
[client 64.102.254.33] PHP Notice:  Undefined index:  debug in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 90, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined index:  db in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 338, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined variable:  argv in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 339, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined index:  level in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 351, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined index:  verbose in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 368, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined index:  go in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 375, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined index:  go in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 381, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined offset:  0 in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 522, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined offset:  0 in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 541, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined offset:  0 in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 562, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined offset:  0 in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 583, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined offset:  0 in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 583, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined offset:  0 in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 583, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined offset:  0 in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 658, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined offset:  1 in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 541, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined offset:  1 in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 583, referer: http://www.open-mpi.org/mtt/
[client 64.102.254.33] PHP Notice:  Undefined index:  verbose in /nfs/magrathea/home/user2/osl/www/www.open-mpi.org/mtt/summary.php on line 585, referer: http://www.open-mpi.org/mtt/
}}}",1156505153,1157470397,major
24,defect,jsquyres,jsquyres,v1.0,closed,fixed,HLRS machines not recognized by whatami,"The output reported by ""whatami"" on the cacau cluster is ""linux-unknown_please_send_us_a_patch-x86_64"".

We need to fix this (and send a patch to the whatami guys).",1156508155,1156514343,major
25,enhancement,emallove,tdd,v1.0,closed,fixed,Need N1GE RM support,Need to make the appropriate extension to mtt to be able to use the N1GE RM to run tests.,1156509645,1158256896,critical
26,enhancement,jsquyres,jsquyres,v3.0,closed,duplicate,Track which resource manager is used for runs,"It would be good for MTT to track which resource manager is used for test runs.

This is a little complicated, however, because it is possible for the MPI Details section to override which RM is used (e.g., to explicitly test, say, the native RM and rsh).  For example:

{{{
[MPI Details: foo]
exec = mpirun --mca pls fork,&enumerate(""rsh"", ""slurm"") ....
}}}

So we'd somehow need to track which RM is used ''for each test run result.'''",1156510916,1187266086,major
27,enhancement,jsquyres,jsquyres,v3.0,closed,duplicate,Track which interconnect(s) is(are) used for test runs,"Similar to #26, track which interconnect(s) is(are) used for each test run.

Has similar difficulties as #26, in that the MPI Details section can override which network(s) are used.",1156510995,1187266101,major
28,defect,jsquyres,jsquyres,v1.0,closed,fixed,HTTP auth is not working properly,"When using .htaccess to protect the submit directory, the MTT client fails to submit properly, even though it seems to have the correct HTTP username/password in the ini file.  The MTTDatabase reporter outputs messages similar to the following:

{{{
>> Failed to report to MTTDatabase: 401 Authorization Required
   <!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">
   <html><head>
   <title>401 Authorization Required</title>
   </head><body>
   <h1>Authorization Required</h1>
   <p>This server could not verify that you
   are authorized to access the document
   requested.  Either you supplied the wrong
   credentials (e.g., bad password), or your
   browser doesn't understand how to supply
   the credentials required.</p>
   <hr>
   <address>Apache/2.0.52 (Red Hat) Server at www.open-mpi.org Port
   443</address>
   </body></html>
}}}",1156511309,1156521375,major
29,defect,jsquyres,jsquyres,Limited OMPI core availability,closed,fixed,"Extra "","" in mpirun","HLRS is getting an extra "","" in their mpirun command lines, preventing tests from being run.  From a mail from Sven:

-----

I configure ompi with TM. I'm using r229 and the tests are not executed. The 
output of MTT is show below. Do you have an idea where the additional comma 
after the ""-np 4"" comes from ?

{{{
String now: mpirun  -np &test_np() --prefix &test_prefix()
   &test_executable() &test_argv()
Got name: test_np
Got args:
_do: $ret = MTT::Values::Functions::test_np()
&test_np returning: 4,
String now: mpirun  -np 4, --prefix &test_prefix() &test_executable()
   &test_argv()
Got name: test_prefix
Got args:
_do: $ret = MTT::Values::Functions::test_prefix()
&test_prefix returning:
   /mscratch/ws/hpcstork-mtt-run-2006-08-25--10-44-20---hlrs-gcc-0/installs
   /ompi-nightly-v1.2/cacau_gcc_warnings/1.2a1r11420/install
String now: mpirun  -np 4, --prefix
   /mscratch/ws/hpcstork-mtt-run-2006-08-25--10-44-20---hlrs-gcc-0/installs
   /ompi-nightly-v1.2/cacau_gcc_warnings/1.2a1r11420/install
   &test_executable() &test_argv()
Got name: test_executable
Got args:
_do: $ret = MTT::Values::Functions::test_executable()
&test_executable returning: src/MPI_Allreduce_loc_f
String now: mpirun  -np 4, --prefix
   /mscratch/ws/hpcstork-mtt-run-2006-08-25--10-44-20---hlrs-gcc-0/installs
   /ompi-nightly-v1.2/cacau_gcc_warnings/1.2a1r11420/install
   src/MPI_Allreduce_loc_f &test_argv()
Got name: test_argv
Got args:
_do: $ret = MTT::Values::Functions::test_argv()
&test_params returning
String now: mpirun  -np 4, --prefix
   /mscratch/ws/hpcstork-mtt-run-2006-08-25--10-44-20---hlrs-gcc-0/installs
   /ompi-nightly-v1.2/cacau_gcc_warnings/1.2a1r11420/install
   src/MPI_Allreduce_loc_f
Evaluating: &max(30, &multiply(10, &test_np()))
Got name: test_np
Got args:
_do: $ret = MTT::Values::Functions::test_np()
&test_np returning: 4,
String now: &max(30, &multiply(10, 4,))
Got name: multiply
Got args: 10, 4,
_do: $ret = MTT::Values::Functions::multiply(10, 4,)
&multiply got: 10 4
&multiply returning: 40
String now: &max(30, 40)
Got name: max
Got args: 30, 40
_do: $ret = MTT::Values::Functions::max(30, 40)
&max got: 30 40
&max returning: 40
String now: 40
Evaluating:
Running command: mpirun  -np 4, --prefix
   /mscratch/ws/hpcstork-mtt-run-2006-08-25--10-44-20---hlrs-gcc-0/installs
   /ompi-nightly-v1.2/cacau_gcc_warnings/1.2a1r11420/install
   src/MPI_Allreduce_loc_f
Timeout: 1 - 1156505332 (vs. now: 1156505292)
OUT:-----------------------------------------------------------------------
   ---
OUT:Could not execute the executable
   ""/mscratch/ws/hpcstork-mtt-run-2006-08-25--10-44-20---hlrs-gcc-0/install
   s/ompi-nightly-v1.2/cacau_gcc_warnings/1.2a1r11420/install/bin/"":
   Permission denied
OUT:
OUT:This could mean that your PATH or executable name is wrong, or that you
   do not
OUT:have the necessary permissions.  Please ensure that the executable is
   able to be
OUT:found and executed.
OUT:-----------------------------------------------------------------------
   ---
}}}",1156513084,1156517871,major
30,defect,jsquyres,jsquyres,Limited OMPI core availability,closed,fixed,Sometimes the MPI version number is blank,"This is something that Ethan reported last week and I thought I had fixed it.  Blah!

Sometimes the MPI version number comes up either blank or has a string in it.  For example, in sumary.php, I'm currently seeing some bad version number for the tests that I just ran on the 1.1.1rc2 tarball:

{{{
x86_64	linux-rhel4_AS-x86_64	Cisco MPI development cluster
svbu-mpi1.cisco.com	ompi-rc-v1.1	2006-08-25 15:59:45		gnu	1	0	0	0	0	0
x86_64	linux-rhel4_AS-x86_64	Cisco MPI development cluster
svbu-mpi1.cisco.com	ompi-rc-v1.1	2006-08-25 15:59:45		ibm	0	0	1	0	0	0
x86_64	linux-rhel4_AS-x86_64	Cisco MPI development cluster
svbu-mpi1.cisco.com	ompi-rc-v1.1	2006-08-25 15:59:45		imb	0	0	1	0	0	0
x86_64	linux-rhel4_AS-x86_64	Cisco MPI development cluster
svbu-mpi1.cisco.com	ompi-rc-v1.1	2006-08-25 15:59:45		intel	0	0	1	0	0	0
x86_64	linux-rhel4_AS-x86_64	Cisco MPI development cluster
svbu-mpi1.cisco.com	ompi-rc-v1.1	2006-08-25 15:59:45		trivial	0	0	1	0	0	0
x86_64	linux-rhel4_AS-x86_64	Cisco MPI development cluster
svbu-mpi1.cisco.com	ompi-rc-v1.1	2006-08-25 15:59:45	mtt_version_major: 0	intel	0	0	0	0	0	88
x86_64	linux-rhel4_AS-x86_64	Cisco MPI development cluster
svbu-mpi1.cisco.com	ompi-rc-v1.1	2006-08-25 15:59:45	mtt_version_major: 0	trivial	0	0	0	0	0	4
}}}

I also see the following in Test Build output:

{{{
>> Test build [test build: trivial]
   Already have a build for [ompi-rc-v1.1] / [] / [gnu] / [trivial]
}}}

So I think there's another place in the code that isn't doing the MPI version number properly.",1156523171,1156541002,major
31,defect,emallove,jsquyres,v1.0,closed,fixed,Need to separate hostname from platform ID in results,"The Cluster Summary table in summary.php currently combines the hostname where the results were submitted with the platform ID from the ini file.  This is misleading in cases where MTT users are running on clusters with schedulers, meaning that they don't always run (and therefore submit) from the same host.

Case in point is HLRS who runs on some flavor of a PBS cluster (cacau).  Right now, summary.php is showing a different entry in the Cluster Summary table for every run that they've done, when, in fact, they're all really from the same cluster (cacau@HLRS).

Hence, the Cluster Summary table should roll up all results from the same cluster, regardless of what node they were run on.",1156523886,1157396140,major
32,defect,jsquyres,jsquyres,v3.1,assigned,,"If interrupted, some results don't get reported","MTT was designed to be able to be interrupted; if you re-start MTT with the same command line arguments and ini file and nothing has changed on the server side (e.g., no new version of MPI or version of tests), MTT should resume where it left off.

However, in some cases, results for all the tests won't be reported.  For example, if you interrupt MTT in the middle of a long intel test run, although MTT has all the meta data for the tests that have already been run (and will properly resume where it left off if you restart MTT), it will only report the results of the tests that it executed during the current run.  That is, the results of the tests of the previous run are not reported back to the database.",1156529433,1166199808,major
33,enhancement,emallove,jsquyres,v1.0,closed,fixed,summary.php: test run failure rollup values don't match,"The rollup values for how many test runs failed don't seem to match in the output from summary.php.  I have attached an html snapshot of summary.php from right now.  There are 5 rows in the executive summary table; they show 11 / 1 / 1 / 1 / 1 test run failures, respectively.

Similarly, the Cluster Sumary table has 6 rows, showing 11 / 0 / 1 / 1 / 1 / 1 test run failures, respectively.

However, in the Test Suites summary, it shows numbers much larger than 11 and 1 (E.g., 14, 3, 468, etc.).

Am I reading these numbers wrong?  Are some of these ""normalized""?  If so, it would be good to notate that on the column head, and describe what ""normalized"" means.",1156530417,1158079761,critical
34,defect,emallove,jsquyres,v2.0,closed,fixed,"Add capability to count ""skipped"" tests","Some tests are deliberately skipped (e.g., not enough/not the right number of processes to run the test) and should not be counted as ""passed"" or ""failed"" -- instead, there should be a new category called ""skipped"".  

For the moment, the ompi-core-template.ini file -- at least in the IBM test run section -- checks for status 77 from a test and marks that as a ""pass"" (tests return status 77 when they want to be skipped; a prededent established by the GNU coding standards).",1156534758,1164831921,major
35,defect,jsquyres,jsquyres,v1.0,closed,fixed,Make MTTDatabase submit more efficient,"The MTTDatabase submit method can be made more efficient.

For example, a single run of the IBM test suite for 2 values of np (each with 1 variant), generates 362 results.  This currently requires '''362 separate HTTP connections''', each of which averages around 2k of data transfer (combined send and receive).  This is approximately 3/4 MB total transfer.  It also takes '''several minutes''' to complete (submitting from a test cluster at Cisco).

I'm not so concerned about the total number of bytes transferred, but it could be significantly reduced.  The MTT client currently sends a lot of repeated data for ''each result.''  The most obvious changes that I'm thinking of are:

 * Pack all the data into a single message that can be sent in a single connection
 * All the data that is currently repeated would therefore only need to be sent once (e.g., at the beginning of the message)
 * The server can marshal this data and generate 1 SQL INSERT for all the results

Both the client and the server would need to be modified to make this happen.  It would probably make the whole process significantly more efficient in the following ways:

 * Only 1 HTTP connection
 * Significantly reduce the amount of data sent from the client to the server
 * Potentially make the database insert more efficient (1 INSERT vs. 362)",1156540003,1157376713,critical
36,enhancement,jsquyres,jsquyres,v1.0,closed,fixed,Print timing information at end of an mtt client run,"It would be useful to print some basic timing information at the end of an mtt client run (e.g., start/stop/elapsed time of each phase) upon demand (e.g., --print-times, or somesuch).  This will be helpful in determining how long a particular ini file takes to run, and can help with planning purposes for how much to test, how frequently, etc.",1156561133,1156593639,major
37,defect,emallove,jsquyres,v2.0,closed,fixed,Add new result types to Test Run,"I added a new field in the Test Run report named ""timed_out"".  This field is now sent to the MTT database via the MTTDatabase reporter.  It's a logical value and will always be either 0 or 1.

This field indicates whether a test timed out or not (different than failing).  The timeout in some OS's is somewhat fuzzy, so it's possible for a test to actually go [slightly] over its timeout value and still pass.  Hence, this flag specifically indicates whether a test was killed because it had timed out.

More specifically:

 * (pass=1, timed_out=0): the test passed
 * (pass=1, timed_out=1): will never happen
 * (pass=0, timed_out=0): the test failed (i.e., it failed its ""pass"" criteria)
 * (pass=0, timed_out=1): the test timed out and was killed

The server side needs to now accept this flag and enter it into the data, and the reports need to be adjusted accordingly.",1156600766,1164833070,major
38,defect,emallove,jsquyres,v1.0,closed,fixed,"Make Intel tests run with the ""wrong"" number of processes return exit status 77","This was already done for the IBM test suite.

The idea is to have tests that require a specific number of processes to be tolerant of when they are not run with the right number.  Hence, if the test needs 6 processes and it is run with 4 (or 8 or 3 or ...), it should shut down in an orderly fashion (MPI_FINALIZE), and exit with a status of 77 indicating that the test was skipped.

The value of 77 was taken from the GNU coding standards.",1156615055,1156940692,major
39,defect,jsquyres,hpcstork,Limited OMPI core availability,closed,fixed,No submit to database,"after updating to r245 I have the problem that the MTT doesn't (even try) to 
submit the results to the database. In the older version (r231) MTT at least 
tried to send the results but failed with an error. 
{{{
*** Reporter initializing
Got hostname: noco084.nec
Found whatami: /home/HLRS/hlrs/hpcstork/mtt/client/whatami/whatami
Evaluating: MTTDatabase
>> Initializing reporter module: MTTDatabase
Evaluating: require MTT::Reporter::MTTDatabase
Evaluating: $ret = &MTT::Reporter::MTTDatabase::Init(@args)
Evaluating: hlrs
Evaluating: hlrsompi
Evaluating: https://localhost:4323/mtt/submit/
Evaluating: OMPI
Evaluating: Cacau at HLRS
Evaluating: TextFile
>> Initializing reporter module: TextFile
Evaluating: require MTT::Reporter::TextFile
Evaluating: $ret = &MTT::Reporter::TextFile::Init(@args)
Evaluating: cacau-$phase-$section-$mpi_name-$mpi_version.txt
Evaluating:
   >>>>----------------------------------------------------------<<<<
File reporter initialized
   (/mscratch/ws/hpcstork-mtt-run-2006-08-28--10-40-07---hlrs-gcc-0/cacau-$
   phase-$section-$mpi_name-$mpi_version.txt)
*** Reporter initialized

...

Command complete, exit status: 0
Evaluating: require MTT::Reporter::TextFile
Evaluating: $ret = &MTT::Reporter::TextFile::Submit(@args)
File reporter
Writing to text file:
   /mscratch/ws/hpcstork-mtt-run-2006-08-28--10-40-07---hlrs-gcc-0/cacau-Te
   st_Run-trivial-ompi-nightly-trunk-1.3a1r11451.txt
>> Reported to text file
   /mscratch/ws/hpcstork-mtt-run-2006-08-28--10-40-07---hlrs-gcc-0/cacau-Te
   st_Run-trivial-ompi-nightly-trunk-1.3a1r11451.txt
Writing to text file:
   /mscratch/ws/hpcstork-mtt-run-2006-08-28--10-40-07---hlrs-gcc-0/cacau-Te
   st_Run-trivial-ompi-nightly-trunk-1.3a1r11451.txt
Writing to text file:
   /mscratch/ws/hpcstork-mtt-run-2006-08-28--10-40-07---hlrs-gcc-0/cacau-Te
   st_Run-trivial-ompi-nightly-trunk-1.3a1r11451.txt
Writing to text file:
   /mscratch/ws/hpcstork-mtt-run-2006-08-28--10-40-07---hlrs-gcc-0/cacau-Te
   st_Run-trivial-ompi-nightly-trunk-1.3a1r11451.txt
>> Test run [test run: intel]
Evaluating: intel
Found a match! intel [intelEvaluating: Simple

}}}
",1156769986,1156879527,major
40,defect,emallove,ethan.mallove@sun.com,v1.0,closed,fixed,summary.php should use reporter.php as a backend,summary.php is basically a one-size-fits-all version of reporter.php. reporter.php should be used as a backend for summary.php such that patches applied to reporter.php will effectively be applied to both scripts.,1156778789,1157052315,minor
41,task,,jjhursey,v1.0,closed,fixed,"DB Cleanup ""iu-odin""","As a point of cleanup, can you remove all entries for ""iu-odin""? These were a bunch of getting the environment setup correctly for MTT runs, most of which failed.

Keep the entries for ""Odin at IU - Testing"" for the moment, as that is what the current version of the script will now report.

This is nothing major, just a bit of cleanup I wanted to note.",1156852681,1164833436,minor
42,defect,jsquyres,jsquyres,Limited OMPI core availability,closed,fixed,submit/index.php should INSERT data despite finding an unknown field(s),"Josh Hursey noticed that there are ''no'' test run results behind shown on summary.php.

We know that there are valid test run data in the db (e.g., he submitted some last night), but they aren't showing up on summary.php.

Could this be due to some mucking around that I did in summary.php?",1156852962,1157376713,major
43,defect,jsquyres,hpcstork,v2.0,closed,worksforme,configure cannot find compiler libraries,"When using the Intel compiler the condfigure breaks because it cannot executed the compiled executeable. Looks like that something bad happens to LD_LIBRARY_PATH because the lib directory is not in the default path. Configure called ""by hand"" works fine.


{{{
configure:4154: $? = 0
configure:4177: checking for C compiler default output file name
configure:4180: icc    conftest.c  >&5
configure:4183: $? = 0
configure:4229: result: a.out
configure:4234: checking whether the C compiler works
configure:4240: ./a.out
./a.out: error while loading shared libraries: libimf.so: cannot open shared object file: No such file or directory
configure:4243: $? = 127
configure:4252: error: cannot run C compiled programs.
If you meant to cross compile, use `--host'.
See `config.log' for more details.
}}}
",1156865980,1164833180,major
44,enhancement,jsquyres,jsquyres,Limited OMPI core availability,closed,fixed,Test submit connections during MTT client initialization,"Mutliple users have been burned by running through all the tests but then failing to submit properly because of some kind of issue (e.g., not having SSL perl support, typing the URL wrong, etc.).

We should have a test submit URL that the mtt client can test connecting during its init phase and try connecting to the submit URL.  If it fails to connect properly, we can abort right away in the beginning and not waste potentially hours of compute time before realizing that there's an error.

This is simple to implement in the MTTDatabase reporter; we just need to be sure that submit.php can safely handle HTTP GET connections with no data (which I think it already can, but want to be sure).

So this ticket represents two things:

 * ensure submit.php can safely handle GET connections
 * add functionality to MTTDatabase reporter to test a connection during its init phase and abort if it fails to connect",1156867883,1156939487,major
45,defect,,jsquyres,Future,new,,Provide more user-controlled flexibility for error conditions,"Sven suggests:

Maybe we can introduce a new section (e.g.error which acts as an error handler. The user should be able define an action (shell script, e.g. send mail) and a policy (e.g. stop, continue, ...).",1156939528,1156939528,major
46,defect,jsquyres,jsquyres,v1.0,closed,fixed,ompi-core-template.ini: MPI cleanup not run on all nodes,"The killall in the after_each_exec of the MPI Details section only runs on the node where mpirun was invoked (duh).  It does not spread to all the other nodes where MPI was running.

Need to figure out how to make that go across all nodes.",1156948141,1158152555,critical
47,defect,jsquyres,jsquyres,Limited OMPI core availability,closed,worksforme,"If LD_LIBRARY_PATH not set, MTT seems to fail","Per Josh's comments on the MTT users list, if LD_LIBRARY_PATH is not initially set to ''something'' (even if it's blank), MTT runs of MPI tests will hang.  Josh confirmed this by not having LD_LIBRARY_PATH set and seeing the hanging behavior.  Then he set it to """" and the hanging behavior went away.

The relevant code in MTT is in lib/MTT/Test/Run.pm:
{{{
    if ($mpi_install->{libdir}) {
        if (exists($ENV{LD_LIBRARY_PATH})) {
            $ENV{LD_LIBRARY_PATH} = ""$mpi_install->{libdir}:"" . 
                $ENV{LD_LIBRARY_PATH};
        } else {
            $ENV{LD_LIBRARY_PATH} = $mpi_install->{libdir};
        }
    }
}}}

So it ''looks'' like this should be handled correctly (but apparently is not).  Will try to replicate this myself and dig into what is going on...",1156965229,1157638788,critical
48,defect,,jjhursey,v1.0,closed,duplicate,summary.php: Test Results are not shown,"I have noticed that the ""Test Runs"" fields on:
{{{
http://www.open-mpi.org/mtt/summary.php
}}}
are always empty even if MTT (seems to) submits the results of the runs to the DB.

",1156967037,1156967114,major
49,enhancement,emallove,emallove,v2.0,closed,fixed,Optimize mtt database for performance,"Using {{{CREATE INDEX}}}, the database can be optimized for performance. Since indexes have some overhead of their own, care must be taken to create them for the appropriate columns. Analyzing HTTP logs for how reporter.php is being used should help our decision making here. (Or maybe a better way would be to somehow audit the queries done on the mtt database?)

(See: http://www.postgresql.org/docs/8.1/interactive/sql-createindex.html)",1157032633,1166199793,minor
50,enhancement,emallove,emallove,v2.0,closed,fixed,Optimize mtt database for disk usage,"The mtt database repeats many character strings thousands of times. For columns that contain such strings, a separate table should be created to index into from the main table. E.g., an entry that currently looks like: 

||'''hostname'''      ||'''test_name'''     ||'''result''' ||
||somehost.com  ||hello         ||1      ||

Will instead look like:

||'''hostname'''      ||'''test_name'''     ||'''result''' ||
||index1        ||index2        ||1      ||

Where {{{hostname}}} and {{{test_name}}} tables exist that contain the following entries:

||'''index'''   ||'''hostname'''      ||
||index1  ||somehost.com  ||
{{{}}}
||'''index'''   ||'''test_name'''  ||
||index2  ||hello      ||

Will this significantly degrade performance?",1157033833,1166199786,minor
51,defect,,jsquyres,v2.0,closed,fixed,"Convert run_index in schema to be of type ""serial""","This is a fairly minor change to the schema and does not involve any changes on the client, but it also does touch submit/index.php, and is therefore worthy of mentioning in the bug tracker so that it can be planned for appropriately.

The issue is that run_index in two tables in the current schema is of type int where it really needs to be a serial.  The difference is that ""serial"" will atomically give us new sequence numbers, where with ""int"", the current code has a race condition that could result in database value corruption (and/or lost data).  The window of vulnerability is small, but given Mr. Murphy, it'll happen sometime in the life of OMPI's test results -- so we should really convert over.",1157050367,1163516883,major
52,task,emallove,emallove,v1.0,closed,fixed,Place data/functionality needed by all the php scripts into reporter.inc,"Shared variables and functions (e.g., the input parameter names, tool-tip functions, etc.) should be placed in an include file.",1157054400,1157151232,major
53,defect,jsquyres,tdd,Limited OMPI core availability,closed,fixed,mtt client is dropping stdout when separate_stdout_stderr is set 0,When one set separate_stdout_stderr to 0 in the .ini file the *.txt files (generated by the TextFile module) still don't seem to contain stdout.,1157055855,1157079233,minor
54,defect,emallove,jjhursey,v1.0,closed,fixed,MTT Test Case Details Popup window truncation,"In the ""MTT Test Case Details"" section if you select the [i] for a test and the output is longer than some amount, the popup window truncates the output. The source of the HTML contains all of the output, but since there is no way to scroll in the popup window there is no way to see if there is anymore output than that which is displayed.

I was using Firefox on OS X when viewing the [i] from the
{{{
Odin at IU
odin008.cs.indiana.edu
}}}
IMB-MPI1 test
",1157118407,1158162475,critical
55,defect,,jsquyres,v2.0,closed,fixed,Revamp the postgres schema,"This is a rollup ticket that encompasses several items:

 * Ethan and I have fully redesigned the postgres schema to be fundamentally better (see source:trunk/server/sql/schemas-v2.sql).  It's ""better"" meaning that it's more scalable (we're anticipating a ''lot'' of results in this database), will provide better performance for searching, doesn't blatantly waste space (like the current schema does), is far more efficient with the space that it does use, and provides a few new features.
 * Ticket #49: optimize DB for speed
 * Ticket #50: optimize DB for space
 * Ticket #1: track HTTP username used with submit
 * Ticket #34: add ability to count ""skipped"" tests
 * Ticket #37: add ability to count ""timed out"" tests
 * Ticket #51: convert DB index fields to be of type ""serial""

This will be a combined effort in both the client and the server side of things; only the new server SQL exists right now (or something close to what we think the schema will be).

I'm currently marking this as ""Future"" because it's an ongoing discussion as to when exactly we want to implement all this functionality.",1157132776,1166197948,major
56,defect,jsquyres,jsquyres,Limited OMPI core availability,closed,fixed,"If an MPI install fails, MTT tries to install it again the next time it is run","Consider the scenario:

 * Run MTT
 * Try to install an MPI
 * MPI fails to install
 * ...MTT eventually finishes

If you re-run MTT, it'll try to install the MPI that failed to install before.  That should not be -- this should be considered a failure and left that way.

This is likely easy to fix, but the other phases should also be audited to ensure that they don't exhibit this behavior (i.e., if a test build for a given MPI install fails on one MTT run, it shouldn't try again the next MTT run).",1157144519,1157149261,major
57,defect,,jsquyres,v1.0,closed,fixed,Bad test output WAY too much data,"MTT needs to limit the amount of stdout / stderr it gathers.

The intel test suite, for example, can sometimes output '''A LOT''' out data out stdout for a test that fails ('''280 MB''' --- from '''one''' test --- in one run that I did).  This causes MTT to cache all that output in memory and then read and write it out to files on a regular basis, effectively bringing MTT's performance to its knees.",1157167176,1157197242,major
58,defect,jsquyres,jsquyres,Limited OMPI core availability,closed,fixed,merge_stdout_stderr vs. separate_stdout_stderr,"Some places in MPI Install, Test Build, and Test (and Defaults) run use ""merge_stdout_stderr"", others use ""separate_stdout_stderr"".

DoCommand uses ""merge"", so we should probably go with that.",1157167744,1157197242,major
59,defect,,emallove,v1.0,closed,wontfix,"""stdout"" column name could potentially conflict with SQL key word","I have been wondering why {{{pg_dump}}} has been quoting the column name {{{stdout}}}:

{{{
    [snip] ...
    result_message character varying(256),
    stderr text DEFAULT 'N/A'::text,
    ""stdout"" text DEFAULT 'N/A'::text,
    start_run_timestamp timestamp without time zone,
    start_test_timestamp timestamp without time zone,
    [snip] ...
}}}

I suspect that it is due to {{{STDOUT}}} being an SQL [http://www.postgresql.org/docs/7.4/interactive/sql-keywords-appendix.html key word]. While this does not appear to be an issue currently, it seems prudent to nip this ''potential'' issue in the bud during the next schema change. How about the following candidates for the {{{RENAME COLUMN}}}?
{{{
    stdout_
    test_stdout
    stdout_text
}}}",1157319405,1163185162,minor
60,enhancement,jsquyres,jjhursey,v1.0,closed,fixed,Output cleanup suggestion,"I noticed that it is impossible to tell for a test run which build it is using. The below is the output from --verbose
{{{
*** Run test phase starting
>> Test run [test run: trivial]
   Test: c_hello, np=64, variant=1: Passed
   Test: cxx_hello, np=64, variant=1: Passed
   Test: f77_hello, np=64, variant=1: Passed
   Test: f90_hello, np=64, variant=1: Passed
>> Reported 4 output(s) to mttdatabase
>> Reported to text file
   /san/homedirs/mpiteam/mtt-runs/09-04-2006-12-49/odin-Test_Run-trivial-om
   pi-nightly-v1.2-1.2a1r11516.txt
   Test: c_hello, np=64, variant=1: Passed
   Test: cxx_hello, np=64, variant=1: Passed
   Test: f77_hello, np=64, variant=1: Passed
   Test: f90_hello, np=64, variant=1: Passed
>> Reported 4 output(s) to mttdatabase
>> Reported to text file
   /san/homedirs/mpiteam/mtt-runs/09-04-2006-12-49/odin-Test_Run-trivial-om
   pi-nightly-trunk-1.3a1r11521.txt
}}}

I can infer that the first was using '''ompi-nightly-v1.2''' and the second '''ompi-nightly-trunk''' by the '''Reported to text file''' line. But it would be useful to have this identified just under {{{Test run [test run trivial]}}} or something.

",1157390861,1158204859,major
61,enhancement,emallove,emallove,v3.1,new,,Create customized email alerts,"{{{reporter.php}}} should produce a link at the bottom of each report that takes users to a page where they request that they be alerted via email when their previous search matches a certain criteria (e.g., one failure, x number of failures, etc.). The idea is similar to [http://www.google.com/alerts Google News Alerts]. The above describes the registration piece of the alerts feature.

A {{{cron}}} job will be set up to run every day or hour to traverse the list of registered alerts and send out email to those who registered for it.

(See also #8.)",1157402572,1166199843,major
62,defect,emallove,emallove,v3.1,reopened,,Throttle oversized reports from reporter.php,"I encountered a problem with generating a colossal-sized report. For example, the following inputs to {{{reporter.php}}} (which attempt to show every test case submitted to the database over the past two weeks) will generate a blank screen to the user:

{{{
Timestamp: Past Two Weeks
Phase:     Test Run
}}}

Also, the following message turns up in the httpd {{{error_log}}}.

{{{
PHP Fatal error:  Allowed memory size of 16777216 bytes exhausted 
(tried to allocate 32 bytes) in database.inc on line 340, referer: reporter.php
}}}

{{{reporter.php}}} should be adjusted to throttle the boatload of incoming rows, e.g., ''""this report is too huge for the server, I will show it to you in chunks""''.",1157403636,1216737838,major
63,defect,jsquyres,jsquyres,v1.0,closed,fixed,Roll bulk submit into release branch,Move the bulk submit functionality into the release branch.,1157639421,1158260232,critical
64,defect,jsquyres,jjhursey,v1.0,closed,fixed,Add Load Lever Support,"IU's BigRed supercomputer uses loadlever as the scheduler. The admins for that cluster have given us 1/4 of the machine to test on nightly. That's 128 dual processor machines with Myrinet.
{{{
http://rac.uits.iu.edu/rats/research/bigred/hardware.shtml
}}}

We would like to run MTT on this machine, and I think the only stumbling block is that MTT doesn't support LoadLeveler. To support this scheduler you just need to look for the following environment variable.

{{{
# Of the form ""hostA hostA hostB hostB hostC""
LOADL_PROCESSOR_LIST=hostA hostB hostB hostC
}}}

Open MPI can run on this cluster with the POE RAS (pending a configuration commit this evening) and RSH PLS.
",1157733579,1158079711,critical
65,defect,,jsquyres,v3.1,new,,Add support for LoadLeveler CPAN module,"If UITS installs the LL CPAN module (http://search.cpan.org/~hawkinsm/IBM-LoadLeveler-1.05/LoadLeveler.pod), we should detect this during the MTT run and use it for &rm_max_procs() because it can give an accurate number of processes (since LOADL_PROCESSOR_LIST may not be properly defined for large allocations).",1158079818,1166199950,minor
66,defect,emallove,jsquyres,v1.0,closed,fixed,"Make alert mail ""Link to this query"" match web link","The data shown in the alert mail does not necessarily match what is shown on the web site when you click on ""Link to this query"" because the web link will be a live query -- it won't be the same time frame as what was shown in the mail.

The link needs to be updated to show exactly what was shown in the mail.",1158082682,1158355228,critical
67,defect,emallove,jsquyres,v2.0,closed,fixed,"Add ""deny mirror"" OMPI stuff into MTT pages","It would be good if some config.inc file could be provided that would allow customization of the MTT web pages.

For example, on the OMPI web site, we need to include a common header and footer that will do the following:

 * Make the MTT pages look like OMPI web pages (same header, left hand navigation, and footer)
 * Disallow mirrors from trying to show MTT results.  Specifically, the database is only on the IU/Bloomington OMPI web server; it does not exist on any of the mirrors, so if any of them try to run the PHP code to access the database on their server, they'll get weird failures.  The ompi-www SVN repository has standard PHP stuff to say ""Sorry, this page is not mirrored"" and ignore the rest of the PHP on the page (the deny_mirror() function).",1158119182,1167866740,major
68,enhancement,,jsquyres,Future,new,,Make mtt_ompi_cleanup.pl only run once per node,"As of r323, the default action is to run mtt_ompi_cleanup.pl with &test_np(), meaning that we could be running multiple copies on each node.  This is not ''harmful'' -- it creates some harmless race conditions (i.e., which copy exactly will kill the rogue orteds), but it is at least somewhat wasteful.  It would be better to somehow figure out how to run only 1 copy of the script per node (a la LAM's ""N"" scheduling).

Perhaps if OMPI supports LAM's C/N scheduling someday, this would be much easier... :-)",1158152819,1158152819,minor
69,defect,emallove,jsquyres,v2.0,closed,fixed,Make reports show time in local timezone,"All the web reports, etc. should have the option of selecting what timezone to show information in.  Default should be the viewer's local timezone, but should be settable to some other timezone as well.",1158183582,1167967485,major
70,defect,emallove,jsquyres,v3.1,new,,"Show ""new"" failures","Add the ability to make the reporter be able to show ""new"" failures.  For example, the nightly email should show both the total number of failures discovered as well as the number of new failures who failed for the first time the previous evening.

Consider a long-standing bug in the code that takes days/weeks to fix.  That will show up as a failure every night.  So how will a developer know that the e-mail report contains ''new'' information (vs. the same old failure that has shown up every night)?  The answer is that the e-mail should say something like:

 * Number of failures: 6
 * Number of new failures: 0

meaning that the 6 failures that are contained in the report were previously reported (yesterday, at a minimum).  Then consider what happens the next night:

 * Number of failures: 7
 * Number of new failures: 1

this means that we have the same old 6 failures as was shown the previous day, but a ''new'' failure has also surfaced.  There should be a quick-n-easy way to see such new failures.

In IM discussion, Ethan generalizes this to the fact that given N days of input, one should be able to show ""new"" failures (i.e., it's not just specific to a single day date range).

Additionally, in the e-mail report (and probably in the general reporter), it would be good to also show how many tests stopped failing and started passing.  So perhaps something like:

 * Number of failures: 6
 * Number of new failures: 1
 * Number of new passes: 1

This means that there were 6 failures last night, including 1 new failure, but some test that previously failed is now passing.  Just like there should be a simple way to see what tests are newly failing, there should be an easy way to see what tests are newly passing.

(note that this ticket is not trying to talk about the format of how this information is presented; the examples here are solely meant to convey the ''type'' of information that I'm looking for, not ''how'' it is presented)",1158229872,1270654847,major
71,enhancement,emallove,emallove,Future,new,,Show configuration specific failures,"In a similar vein as #70 - {{{reporter.php}}} should flag failures that only occurred on one specific {{{os}}}, {{{platform}}}, {{{compiler}}}, etc.",1158326027,1158326027,major
72,enhancement,emallove,emallove,v2.0,closed,fixed,"Add a ""preferences"" window","This is an extension of #69.

User preferences (such as their local timezone, default settings, sorting sequence, left-to-right column layout, etc.) could be done on the client (using cookies) or the server (using the {{{users}}} table in [source:/trunk/server/sql/schemas-v2.sql#275 schema-v2]). I think it would be customary to do this sort of thing using cookies. So, e.g., a ""Preferences"" tab/window is opened with a number of settings to apply to all reports generated by the user's browser. The user chooses their preferences, clicks a ""Save"" button, which writes the preferences to a cookie for later use by {{{reporter.php}}}. PHP has nice support for [http://us2.php.net/manual/en/features.cookies.php cookies].  
",1158328328,1168634103,major
73,defect,emallove,jsquyres,v1.1,closed,fixed,MTT nightly mail is not HTML,"The copy of the nightly reports mail that I get when it is sent through the mtt-results mailing list is not displayed correctly in my mail viewer -- perhaps some markup or an SMTP header got lost somewhere?  When the mails were being sent to me directly this past week, they displayed just fine.

I'll attach a screenshot of what it looks like as well as the raw text of the mail for analysis.",1158412456,1159362535,major
74,defect,emallove,emallove,v2.0,closed,fixed,Command-line override for sections,"In addition to being able to skip entire phases, it would be helpful to be able to skip sections at the command line (versus having to edit the ini file). E.g., the following command would run all sections whose names match the pattern ""trivial"" (so {{{[Test get: trival]}}}, {{{[Test build: trival]}}}, and {{{[Test run: trival]}}}).

{{{
$ client/mtt ... --trivial ... 
}}}

The following would run all sections, that do not match the pattern ""trivial"".

{{{
$ client/mtt ... --no-trivial ... 
}}}",1158593181,1160160830,major
75,defect,,jjhursey,v1.1,closed,fixed,mpi_installed_vars.csh broken,"In the script you have a:
{{{
set path = (/san/..../install $path)
}}}

Without the setenv following it, it doesn't affect the $PATH var, so the mpirun is not found.

I suggest the following shorted script which uses the {{{MPI_ROOT}}} environment var that you have already exported:
{{{
setenv MPI_ROOT /san/homedirs/mpiteam/mtt-runs/Nightly-09-19-2006-02-00-02/installs/ompi-nightly-trunk/odin_gcc_warnings/1.3a1r11701/install
setenv PATH = $MPI_ROOT/bin:{$PATH}

if ($?LD_LIBRARY_PATH == 0) then
    setenv LD_LIBRARY_PATH $MPI_ROOT/lib
else
    setenv LD_LIBRARY_PATH $MPI_ROOT/lib:$LD_LIBRARY_PATH
endif
}}}

May want to audit the other scripts to check that they don't have the same problem.
",1158716863,1159370046,major
76,defect,,emallove,v2.0,closed,fixed,^@ character in XML attribute aborts client,"The following XML error is occurring when a {{{^@}}} character is used in an XML attribute string.

{{{
AttValue: ' expected
attributes construct error
Couldn't find end of Start Tag test_cmd line 60
Premature end of data in tag test_np line 59
Premature end of data in tag test_name line 58
Premature end of data in tag test_run line 6
Premature end of data in tag test_build line 5
Premature end of data in tag mpi_install line 4
Premature end of data in tag mpi_version line 3
Premature end of data in tag mpi_get line 2
Premature end of data in tag test_runs line 1
 at
/pkg/gnu/lib/perl5/site_perl/5.8.5/sun4-solaris-64int/XML/LibXML/SAX.pm
line 64
 at
/workspace/em162155/hpc/mtt/cron/ompi-core-testers/lib/XML/Simple.pm
line 287
}}}

The ""{{{MPI_ERR_INTERN: internal error ^@}}} part of the {{{stdout}}}"" attribute stops the show:

{{{
#!xml
<test_cmd argv=""xyz ...""
          mpi_install_section_name=""xyz ...""
          mpi_name=""xyz ...""
          mpi_version=""xyz ...""
          perfbase_xml=""""
          phase=""xyz ...""
          result_message=""xyz ...""
          start_test_timestamp=""xyz ...""
          stderr="""" 
          stdout=""MPITEST_INFO ( 0): Starting test MPI_Allgather() MPITEST_INFO ( 0): MPITEST_BYTE_TO_ELEMENT(): Byte length 1016 does not divide evenly by type 9 Using 63 elements MPITEST_INFO ( 0): MPITEST_BYTE_TO_ELEMENT(): Byte length 1032 does not divide evenly by type 9 Using 64 elements MPITEST_INFO ( 0): MPITEST_BYTE_TO_ELEMENT(): Byte length 1016 does not divide evenly by type 9 Using 63 elements MPITEST_INFO ( 0): MPITEST_BYTE_TO_ELEMENT(): Byte length 1032 does not divide evenly by type 9 Using 64 elements MPITEST_ERROR( 0): MPI_INTERCOMM_CREATE() returned 17 in MPITEST_GET_INTERCOMM() MPITEST_FATAL( 0): MPI_ERR_INTERN: internal error ^@ 1 process killed (possibly by Open MPI)""
}}}

I guess the workaround for this issue is the usual {{{rm -rf sources installs}}}.",1159206427,1159379014,major
77,defect,,jsquyres,v1.1,closed,worksforme,"If not removing scratch dir, tests seem to re-run","Terry is seeing tests get re-run sporatically if he doesn't remove his scratch dir.

Hasn't been able to track this down more, but perhaps we're not tracking this properly in the meta data.  Perhaps we also need to implement trim, but that's not the real solution.",1159276061,1168642357,critical
78,defect,,jsquyres,v1.1,closed,fixed,Reporting different number of intel tests,"Terry noticed that some of his test results are reporting different total number of intel tests run.  For example, from summary.php:

{{{
2006-09-25 06:00	Sun_BUR03_v20z_0	Open MPI v1.2	1.2a1r11658	SunOS	i86pc	intel	329	2
2006-09-25 06:00	Sun_BUR03_v20z_0	Open MPI v1.2	1.2a1r11740	SunOS	i86pc	intel	316	5
}}}

Taking the sum of the passed and failed tests, one line shows (329+2=331), the other shows (316+5=221).  Other tests show similar (or much worse) disparities.

These should all be running from the same config file (at least, in the two examples show above, they are).  So how can different numbers of tests be run and/or reported?",1159276300,1159372038,critical
79,enhancement,emallove,emallove,v2.0,closed,fixed,Generate reports in chunks,"(Related to #62)

{{{reporter.php}}} should use a {{{LIMIT}}} clause to show the report in slices of 1000 rows. This can work similarly to the ""Bookmarks"" at the bottom of the page. For example, each ""Next 1000 rows"" link will be the same as a bookmark, with a slice parameter appended, e.g., {{{&slice=3000-4000}}} (display rows 3000-4000). So the link brings up only that chunk of the report. (Note: because the reports are sorted, they may still exceed the 30 second execution time maximum before reaching the {{{LIMIT}}} clause.)",1159379992,1165093680,major
80,defect,,jjhursey,v2.0,closed,fixed,Typo in Sample ini file,"There is a typo for v1.1 and v1.0 builds. The patch below fixes it:
{{{
Index: ompi-core-template.ini
===================================================================
--- ompi-core-template.ini      (revision 352)
+++ ompi-core-template.ini      (working copy)
@@ -138,7 +138,7 @@
 [MPI install: odin gcc warnings]
 # Note: it is ok to list ""MPI get"" sections here that are commented
 # out above.
-mpi_get = ompi-nightly-trunk,ompi-nightly-v1.2,ompi-nightly-1.1,ompi-nightly-1.0
+mpi_get = ompi-nightly-trunk,ompi-nightly-v1.2,ompi-nightly-v1.1,ompi-nightly-v1.0
 save_stdout_on_success = 1
 merge_stdout_stderr = 0
 vpath_mode = none
}}}",1159441219,1159458131,trivial
81,defect,emallove,emallove,v2.0,closed,fixed,Adjust submit.php to use the MTT 2.0 schema,[source:/trunk/server/php/submit/index.php submit.php] requires changes to work with [source:/trunk/server/sql/schemas-v2.sql schemas-v2.sql].,1159478795,1164513221,major
82,defect,emallove,jsquyres,v2.0,closed,fixed,Need stub for client to download a client_serial,"Need a server-side thingy for the client to contact and get a new/unique client_serial value that it can use throughout its run.

The client then needs to be modified to connect to this URL, get the client_serial value, and include it in all submits through the MTTDatabase reporter.",1159479327,1159548678,major
83,defect,emallove,emallove,v3.1,new,,Create a cluster registration webpage,"To ensure consistency of the {{{platform_name}}} parameter (and any other ini params), create a [wiki:ClusterRegistration] page to allow users to register their cluster(s). (see also #7 and #10)",1159569237,1165422446,major
84,defect,emallove,jsquyres,v1.1,closed,fixed,Nightly results mail asks for password,"The nightly results mail currently asks for a password because the OMPI logo graphic is currently included in an HTTP basic auth area.

The logo should probably either be

 * in a non-protected area, or
 * a separate mime attachment, or
 * not included at all",1159702741,1159725445,major
85,defect,jsquyres,jsquyres,v3.1,closed,fixed,MTT cannot parse an INI parameter which has a '&' in the value,"Need to figure out why this is happening.

Have they just not upgraded to latest release version, or something wrong in their INI file, or ...?",1159817017,1188597940,major
86,enhancement,emallove,jsquyres,v1.1,closed,fixed,New nightly e-mail: stderr from MPI installs,"Ethan is already working on this, but it should be logged here.

The past week has revealed a need to get a nightly e-mail that shows the stderr from all successful MPI installs so that we can see compiler warnings.",1159817071,1159827791,major
87,defect,emallove,jsquyres,v1.1,closed,fixed,New nightly e-mail: show output from failures,"Ethan's already working on this, but it should be logged here.  We started with one big e-mail showing all the failures, but it seems better to break this up into three mails:

 * MPI install failures
 * Test build failures
 * Test run failures

Each one will only be generated if there are results to show.  If there are no failures of a particular type, then that e-mail is not generated.",1159817177,1159827791,major
88,defect,jsquyres,jsquyres,v1.1,closed,fixed,Test run timeout code does not appear to always work,"From a run on the Cisco cluster:


{{{
Running command: mpirun --mca btl_tcp_if_include ib0 --hostfile
   /users/jsquyres/svn/mtt/nightly-run-hostfile -np 16 --mca btl   self,openib --prefix   /users/jsquyres/svn/mtt-core/scratch/installs/ompi-nightly-v1.1/ompi_gnu
   /1.1.2rc1/install group/groupfreeTimeout: 160 - 1159835960 (vs. now: 1159835800)
Command complete, exit status: 0
Evaluating: &eq(&test_exit_status(), 0)
Got name: test_exit_status
Got args:_do: $ret = MTT::Values::Functions::test_exit_status()
&test_exit_status returning: 0String now: &eq(0, 0)
Got name: eq
Got args: 0, 0
_do: $ret = MTT::Values::Functions::eq(0, 0)
&eq got: 0 0&eq: returning 1String now: 1
   Test: groupfree, np=16, variant=2: PassedRunning step: after_each_exec
Running command: /tmp/sL8ciumjBb
Timeout: 10 - 1159835815 (vs. now: 1159835805)
Past timeout! 1159835815 < 1159835816
Past timeout! 1159835815 < 1159835819
Past timeout! 1159835815 < 1159835820
Past timeout! 1159835815 < 1159835821
Past timeout! 1159835815 < 1159835822
Past timeout! 1159835815 < 1159835823
Past timeout! 1159835815 < 1159835824
Past timeout! 1159835815 < 1159835825
Past timeout! 1159835815 < 1159835826
...ad nauseam
}}}

Looking at the process table when this happens, there's an orted and an orterun -- no processes.

Other times, timeouts seem to work.  Shrug.",1159850352,1160247229,critical
89,defect,jsquyres,jsquyres,v1.1,closed,fixed,Adjust Intel test max procs to 60,Brian suggests that we move the max np for the intel tests down from 64 to 60 because he thinks that 64 may not run reliably.  So 60 is a good round number below that that should be fine.,1159888639,1159892647,major
90,defect,jsquyres,jsquyres,v1.1,closed,fixed,"IBM tests sometimes appear to be built ok, but don't run","(should have filed a ticket about this a while ago)

The build output all looks normal -- no errors or warnings.  But then the IBM tests don't run.

Josh narrowed down the problem to the fact that somehow he's not getting a ""success=1"" field sent back in the report.  I think that this means that there's no ""success=1"" tag in the meta data XML, and therefore the runs don't occur because $test_build->{success} will be false.

The question is: how is he not getting {success} set to 0 or 1?  This is quite puzzling.  Still investigating...",1159912677,1160247229,critical
91,defect,,emallove,v1.1,closed,fixed,Problem setting max_np in parse_hostlist,"{{{mtt}}} is given two nodes to run on, and it is setting the {{{max_np}}} value to 1, which results in every test getting run with {{{-np 1}}}. {{{mtt}}} outputs the following line in debug mode:

{{{
>> Got default hostlist: burl-ct-v20z-0,burl-ct-v20z-1, max_np: 1
}}}

(see attached ini file)",1159992107,1160481247,major
92,defect,emallove,emallove,v2.0,closed,fixed,Display grand totals in reports for passes/failures,"In either the footer or header of the reports, it would be nice to see grand totals. This would be especially useful for large ""test run"" reports which tend to have numerous rows of 1 pass or 1 fail. (See also #70.)",1159993267,1164513490,major
93,defect,emallove,jsquyres,v1.1,closed,fixed,Remove plain text from MTT mails,"Try removing the plain text from nightly MTT mails -- some mail clients seem to be somewhat schitzophrenic about what to do when there's both HTML and text.  E.g., Entourage displays the whole mail properly, but when forwarding it, it only forwards the plain text mail.  ",1160053699,1160065975,major
94,enhancement,emallove,emallove,Future,new,,Create plain/text version of nightly email,"For users that prefer to keep their mail reader set to ""Plain Text"", put a plain-text version of the HTML report in the text/plain section of the email. (Capturing the output of {{{lynx -dump <url>}}} might do the trick.)",1160147591,1160307883,trivial
95,enhancement,emallove,emallove,Future,new,,"When using --scratch option, find the ini file with a relative path","If one uses the {{{--scratch}}} option, they are then required to provide an absolute path to the ini file because mtt {{{chdir}}}'s into scratch. {{{mtt}}} ought to be able to find the ini file, even if the user supplies a relative path.",1160173602,1160307871,minor
96,defect,emallove,jsquyres,v1.1,closed,fixed,Make nightly report mails show cluster where errors occurred,"In the 4 nightly mails that show errors and warnings from the previous 24 hours, it would be most helpful if the cluster name is shown in the detailed tables that show all the stdout/stderr.  This will make it much easier to figure who exactly is incurring what problem.",1160242012,1160407115,critical
97,defect,emallove,emallove,v1.1,closed,fixed,Report duplicate INI sections,"{{{mtt}}} should gracefully report duplicate INI sections. E.g., if the {{{[Reporter: IU Database]}}} section is accidentally duplicated, {{{mtt}}} dies with the following unhelpful error:

{{{
>> Initializing reporter module: MTTDatabase
   MTTDatabase
Evaluating: require MTT::Reporter::MTTDatabase
   MTTDatabase
*** ERROR: Module aborted during require: MTT::Reporter::MTTDatabase
    MTTDatabase: syntax error at (eval 15) line 4, near ""require
    MTT::Reporter::MTTDatabase
    MTTDatabase
    ""
}}}

In other cases, {{{mtt}}} (via {{{Config::IniFiles}}}) takes one section, and ignores sections similarly named.",1160418341,1162760409,minor
98,enhancement,emallove,emallove,v2.0,closed,fixed,Shorten bookmark URLs,"Query strings should be inserted into the database with unique ids such that the user can supply {{{reporter.php}}} with a short id to bring up past reports (e.g., {{{reporter.php?439}}}). Various URL redirection sites, such as [http://www.tinyurl.com tinyurl], provide a temporary solution to this problem of oversized query strings.",1160494437,1165439555,major
99,defect,jsquyres,emallove,v2.0,closed,fixed,Emit a warning when an mpi_get points to a non-existent section,"A warning should be emitted if an {{{MPI Install}}} contains a non-existent {{{mpi_get}}} parameter.  

''Clarification:''

The string, {{{foo}}}, after the '{{{:}}}' in the following section is what links to the {{{MPI Install}}} section's {{{mpi_get}}} parameter.

{{{
[MPI get: foo]
}}} 

Currently, the {{{--debug}}} output tersely skips over the {{{MPI Install}}} section when no match is found.

{{{
*** MPI install phase starting
>> MPI install [mpi install: foo]
Evaluating: ompi-nightly-trunk
*** MPI install phase complete
}}}

(See ""'''Phase-specific parameter notes'''"" in [wiki:MTTOverview])
",1160575411,1166657961,major
100,defect,emallove,emallove,v1.1,closed,fixed,configure_arguments needs to be a larger type,"{{{configure_arguments}}} was getting maxed out by a reasonably sized string. It should be a {{{text}}}, and not a {{{character varying(256)}}}.",1160685833,1160685998,major
101,enhancement,emallove,emallove,v2.0,closed,fixed,Add a --dry-run option to display what mtt ''would'' do,"Create a {{{--dry-run}}} option, which would allow users and developers to get a speedy run-down of what {{{mtt}}} ''would'' do with a given set of ini parameters and command-line options. {{{--dry-run}}} will instruct {{{mtt}}} to progress through it's would-be run commands as if each command is succeeding, in order to run from beginning to end.",1160752467,1161197298,major
102,defect,,jjhursey,v1.1,closed,fixed,Tarball.pm typo in branch,"The below patch fixes a typo that stops this module from being executed properly.

{{{
Index: lib/MTT/MPI/Get/Tarball.pm
===================================================================
--- lib/MTT/MPI/Get/Tarball.pm  (revision 383)
+++ lib/MTT/MPI/Get/Tarball.pm  (working copy)
@@ -41,7 +41,7 @@
         my $mpi_get = $MTT::MPI::sources->{$mpi_get_key};
         foreach my $version_key (keys(%{$mpi_get})) {
             my $source = $mpi_get->{$version_key};
-            Debug("">> have [$simple_section] version $version_key\n"");
+            Debug("">> have [$section] version $version_key\n"");
 
             if ($source->{module_name} eq ""MTT::MPI::Get::Tarball"" &&
                 basename($source->{module_data}->{tarball}) eq
}}}",1160936200,1161001492,minor
103,task,emallove,emallove,v2.0,closed,fixed,Client needs to fetch/store serial values returned from the server,"In order for the client and server to shake hands with the MTT 2.0 [source:/trunk/server/sql/schemas-v2.sql schema], the mtt client needs to fetch serial values from [source:/trunk/server/php/submit/index.php submit.php], and store them as meta-data in the xml files.  Effectively, the running of each section in the ini file will be assigned a serial (though the test_run serials are not used to link to other phases). Additionally, each invocation of the mtt client will be assigned a serial value for reporting on entire mtt runs.  ",1161113832,1161197298,major
104,defect,emallove,jsquyres,v1.1,closed,fixed,Make mtt_ompi_cleanup.pl work under Solaris properly,"Pak identified that the ""ps"" that we're using in mtt_ompi_cleanup.pl isn't working properly on Solaris.  A little digging around shows that ""pgrep"" is available on both Solaris and Linux (but not OSX).

So it might be good to refactor the mtt_ompi_cleanup.pl script that is written out by OMPI.pm:

 * Look for the pgrep executble.
    * If found, use it to generate a list of orted pid's for the current user.
    * If not found, use the same mechanism to get a list of orted pid's.
 * Run through the list of found orted pid's and compare to my parent orted's PID.  If it's not my parent, kill it.",1161186525,1161783244,major
105,defect,jsquyres,jsquyres,v3.1,closed,wontfix,Add BProc support to MTT client,Add BProc support to MTT client so that functions that &env_max_procs() work properly.,1161186603,1199807938,major
106,defect,emallove,emallove,v2.0,closed,fixed,Add display preference(s) to ini file,Add a {{{textwrap}}} preference (for text wrapping the mtt client's output) to the {{{[MTT]}}} section in the ini file.,1161197224,1161197298,major
107,defect,emallove,emallove,v2.0,closed,fixed,Using --no-execute causes duplicate HTTP submissions,"When using --no-execute (#101), HTTP POSTs get doubled. The below shows the server's access log for a single MPI install submission.

{{{
192.18.128.5 - sun [23/Oct/2006:16:13:14 -0400] ""POST /submit/index.php HTTP/1.1"" 200 355 ""-"" ""MPI Test MTTDatabase Reporter""
192.18.128.5 - sun [23/Oct/2006:16:13:14 -0400] ""POST /submit/index.php HTTP/1.1"" 200 355 ""-"" ""MPI Test MTTDatabase Reporter""
192.18.128.5 - sun [23/Oct/2006:16:13:15 -0400] ""POST /submit/index.php HTTP/1.1"" 200 8660 ""-"" ""MPI Test MTTDatabase Reporter""
192.18.128.5 - sun [23/Oct/2006:16:13:15 -0400] ""POST /submit/index.php HTTP/1.1"" 200 8390 ""-"" ""MPI Test MTTDatabase Reporter""
192.18.128.5 - - [23/Oct/2006:16:13:17 -0400] ""POST /submit/index.php HTTP/1.1"" 401 467 ""-"" ""libwww-perl/5.803""
192.18.128.5 - - [23/Oct/2006:16:13:17 -0400] ""POST /submit/index.php HTTP/1.1"" 401 467 ""-"" ""libwww-perl/5.803""
192.18.128.5 - sun [23/Oct/2006:16:13:17 -0400] ""POST /submit/index.php HTTP/1.1"" 200 6975 ""-"" ""libwww-perl/5.803""
192.18.128.5 - sun [23/Oct/2006:16:13:17 -0400] ""POST /submit/index.php HTTP/1.1"" 200 6975 ""-"" ""libwww-perl/5.803""
}}}",1161641064,1161877065,minor
108,defect,emallove,emallove,v2.0,closed,fixed,Reconcile new database field names with field names the MTT client is submitting.,Summary says it all.,1161717342,1162248800,major
109,defect,emallove,emallove,v2.0,closed,fixed,Trivial.pm needs cflags/fflags like Intel_OMPI_tests.pm,n/a,1161798766,1161877660,major
110,enhancement,emallove,jsquyres,v2.0,closed,fixed,"Add ""bitness"" field to MPI install section","Add new &get_bitness() functlet that is evaluated at the very end of Install.pm.  It will try several ways to get the bitness of the MPI build:

 * mpicc a simple program that prints out the sizeof(void*)
 * Look at ""configure flags"" (or whatever) to try to snarf the underlying C compiler name and try to compile a simple program that prints out the sizeof(void*)
 * Look at ""file libmpi.so"" and/or ""flie libmpi.a"" output.
 * Look at ""uname"" output (only somewhat reliable -- doesn't imply a compiler mode)
 * ...anything else we can come up with

&get_bitness() can change and be added to over time.",1161871834,1169653795,major
111,defect,,jsquyres,v3.1,closed,fixed,Most fields in MPI Install are OMPI-specific,"Most of the fields in the MPI install phase are really specific to the OMPI module, so they should be renamed with an ""ompi_"" prefix, and we should snip out the processing of those fields in MPI/Install.pm.",1161875606,1176906285,minor
112,defect,jsquyres,jsquyres,v2.0,closed,fixed,Split Test Run into Specify and RunEngine,"The current Test/Run.pm is really a combination of two things:

 1. Calling the back-end modules to specify what tests to run and some of their characteristics (E.g., what constitutes the test ""passing"", etc.)
 1. The engine to actually run all the tests and generate output reports

In order to handle performance testing, analysis, and reporting, we need [finally] to split Run.pm into two parts:

 1. Test/Specify.pm (and move all Test/Run/*.pm to Test/Specify/*.pm)
 1. Test/RunEngine.pm

And then adjust the ini file as appropriate.

More will come after this (splitting more out of RunEngine.pm to Test/Analyze.pm -- but that'll be a different ticket).",1161875760,1162125032,critical
113,defect,emallove,jsquyres,v2.0,closed,fixed,Create new test analyze framework and set of plugins,"Create a new ""test analyze"" framework that will be invoked from Test/RunEngine.pm (per #112) that will analyze the results of a given test execution.  An obvious place to put this will be Test/Analyze.pm, and have its plugins be under Test/Analyze/*.pm.  Two obvious plugins that come to mind are:

 1. Test/Analyze/Correctness.pm: for correctness tests, simple things that currently look at the ""pass"" criteria from the .ini file
 1. Test/Analyze/LatBwPerformance.pm: for latency/bandwidth performance tests, with custom plugins to parse the output from different latency/bandwidth tests to generate reports, such as:
    * Test/Analyze/LatBwPerformance/NetPipe.pm: knows how to parse NetPipe output to put the data in the format that the MTT Database report expects and can transmit to the back-end database
    * Test/Analyze/LatBwPerformance/IMB.pm: knows how to parse IMB output to put the data in the format that the MTT Database report expects and can transmit to the back-end database

There will probably be more LatBwPerformance modules added over time (as we add more performance tests to the MTT suite).",1161876175,1164513595,major
114,defect,emallove,emallove,v1.1,closed,fixed,Add support for onesided testsuite,"Add Sun's onesided testsuite to {{{ompi-tests}}}, and create onesided ""Test Build"" and ""Test Run"" ini sections.",1161877861,1162408479,major
115,enhancement,emallove,emallove,v2.1,closed,worksforme,Incorporate IU's print-results.pl into a new Reporter that can be sent to stdout or e-mail,"Josh's {{{print-results.pl}}} script should be modified to grab results from internal MTT data structures, and added to {{{lib/MTT/Reporter}}}. Keep the spiffy output formatting :) (This plugin will be especially useful when support is added for [ticket:9 developer mpi workspaces].)",1161878304,1178729409,critical
116,defect,emallove,emallove,v2.0,closed,fixed,Revamp reporter.php (aka mtt/index.php)," * Gut existing ""by-run"" reporting method. (It is now handled with {{{client_serial}}} in the new schema)
 * Adjust {{{SELECT}}} statements to join all tables correctly
 * {{{[i]}}} links can now display info for earlier phases (e.g., a Test Run result now links to an MPI Install)
 * Revamp user interface to better reflect new schema. E.g., provide selections from the following menus (that each map to a database table):
{{{
    cluster 
    submit 
    mpi_get 
    compiler 
    mpi_install 
    test_build 
    test_run 
    results
}}}

(See also #55)",1161878720,1166139314,major
117,enhancement,emallove,emallove,v2.0,closed,fixed,Display performance data using reporter.php,Display graphical and tabular performance data using [source:/trunk/server/php/index.php reporter.php],1161879093,1166138395,major
118,task,emallove,emallove,v3.1,new,,Slim down result submissions to the bare essentials,"Though the client and server are adequately communicating with the [source:/trunk/server/sql/schemas-v2.sql new schema], there is still excess data getting sent to the server. E.g., {{{cluster}}} fields such as {{{os_name}}} and {{{platform_hardware}}} need only be sent over for an {{{MPI Install}}}. For a {{{Test Build}}}, all information pertaining to the {{{Test Build}}}'s corresponding {{{MPI Install}}} is encapsulated in the {{{mpi_install_id}}} field (which is sent to the server for each {{{Test Build}}}).

(See #55 ''Revamp the postgres schema'')",1161977285,1170286417,major
119,task,emallove,emallove,Future,closed,fixed,Make long nested hash entries more readable,"This ticket might fall into the category of nitpicky. The following two perl statements are identical in meaning.

{{{
#!perl
$h->{a}->{b}->{c}->{d} = 1;

%$h = ('a' => 
      {'b' =>
      {'c' =>
      {'d' => 1}}});
}}}

In the case of something like the following (from [source:/trunk/lib/MTT/Test/Run.pm]), it seems the multi-line syntax is preferable for readability.

{{{
#!perl
my $test_build_id = $MTT::Test::builds->{$mpi_details->{mpi_get_simple_section_name}}->{$mpi_details->{version}}->{$mpi_details->{mpi_install_simple_section_name}}->{$run->{test_build_simple_section_name}}->{test_build_id};
}}}",1161984623,1185222140,trivial
120,enhancement,,emallove,Future,closed,duplicate,Add support for parallelism,Give MTT the ability to do more than one thing simultaneously.,1162325983,1167956854,major
121,enhancement,,emallove,v3.1,new,,Make MTT client meta data backing store multi-reader/writer safe,"Multiple MTT clients should be able to run out of the same scratch directory without overwriting each other's XML meta-data (mpi_installs.xml, test_builds.xml, and test_builds.xml).",1162326349,1189537408,major
122,defect,emallove,emallove,Future,new,,Create a script to send alerts on coverage lapses,A nightly ''mining'' script should send alerts when something has not been tested in a while.,1162326649,1162326649,major
123,enhancement,emallove,emallove,v3.0,closed,wontfix,Create more quick queries,"Create more links similar to [source:/trunk/server/php/summary.php] (e.g., per institution).",1162326806,1186682348,major
124,defect,emallove,jsquyres,v2.0,closed,fixed,"Make NetPIPE ""make_sun"" makefile","Analogous to what Ethan did for IMB, make a ""make_sun"" file for NetPIPE so that MTT can compile NetPIPE on Sun platforms.",1162393790,1162401645,major
125,defect,emallove,emallove,v1.1,closed,fixed,Unable to link MPI Details sections with MPI Install sections,"This was a typo. In [source:/trunk/lib/MTT/Test/Run.pm], {{{$mpi_install->{mpi_name}}}} should be {{{$mpi_install->{simple_section_name}}}}.",1162410443,1162760409,major
126,enhancement,,jsquyres,v3.1,new,,"Create some kind of ""push"" system to let MTT start as soon as the nightly tarballs are made","Talking with IU a bit, it seems desirable to be able to make some kind of ""push"" system that would allow starting MTT very shortly after the nightly tarballs are made (rather than checking for a new tarball at some arbitrary point in the middle of the night).

This may involve two parts:

 * The IU server publishing its current status -- more than just the latest snapshot available (which is what is currently available).  Perhaps the server can advertise the next time it plans to try to make a tarball, that it's currently trying to make a tarball, etc.  This is not really an MTT issue, but is worth noting here for the interaction described below (i.e., the MTT client will need to interact with this published status from the IU server).
 * The OMPI MPI Get module can check this status, and perhaps upon trigger from an INI file field, loop over checking for a new tarball, waiting for that tarball.  Specifically:
    * The MTT client could be put into an ""infinite"" mode -- after a successful ""MPI Get"" phase, it would do all the rest of the phases.
    * But then instead of quitting, the client would then loop around and block in MPI Get waiting for the next tarball
    * Based on information published by the IU server, it could know when to start pinging and asking for a new tarball, and it could sleep until then.  
    * At the designated time, the MTT client can wake up and ask the server if it's got a new tarball yet.  The server will have published ""I'm making a new tarball now... please wait..."" so the MTT client can check every 5 minutes or so.
    * Once a new tarball has been made, the server changes its status to reflect the new tarball.  The MTT client will see this, download the tarball, and go through its entire sequence (eventually ending up in MPI Get again, blocking waiting for the ''next'' tarball).
    * If a new tarball is not made (e.g., an error, or there were no changes to SVN that warranted making a new tarball), the IU server just changes its status to reflect when the next attempt at making a tarball would be.  The MTT client will see that no new tarball was issued, and will go back to sleep until the next time that the IU server has advertised that it will make a new tarball.
  * This can all happen on a per-series basis (e.g., the IU server can individually publish its status for the 1.0, 1.1, 1.2, and trunk tarballs).",1162420204,1189537416,major
127,enhancement,,emallove,Future,new,,Provide option to run MTT in suite by suite mode (versus phase by phase),"This harkens back to some discussions of being able to see the available
results of an incomplete MTT run. Currently, for any given INI file, MTT will
do:

 1. Every MPI Install
 1. Every Test Build
 1. Every Test Run

Sometimes it would be preferable for MTT to do, e.g.,

 1. Every MPI Install
 1. Test Build and Test Run for the Intel tests
 1. Test Build and Test Run for IMB tests
 1. etc.

How about this?

  {{{--order [phase|suite]}}} (Default to the usual {{{phase}}}.)

''Note: a work around is to have separate INI files for each of the above stages,
e.g.,''

  {{{mtt --file ""installs.ini intel.ini imb.ini ...""}}}

''So that mtt will run all the available phases listed in each INI file. The above command will have a different order of execution than the following, which executes the concatenation of all the INI files as if it were an individual INI file:''

  {{{cat installs.ini intel.ini imb.ini | mtt -}}}",1162569942,1162569942,minor
128,enhancement,emallove,jsquyres,v2.0,closed,fixed,"Make ""--im-just-testing"" kind of flag for MTT client","It would be useful to have a ""I'm just testing; these results may be bogus"" kind of option to the MTT client.  This option would submit results to the MTT database, but with a special flag such that they won't be included in normal nightly reports.  Additionally, these results could be deleted after a week or so.

The intent is to give MTT users a way to test new setups without affecting the ""real"" nightly reports.",1162574231,1167779371,major
129,enhancement,emallove,emallove,Future,new,,"Create a new test result ""in progress""","It could be useful to see in the reports that there are tests ''in progress''. While MTT is doing it's initial ping of the MTT database, it could at the same time tell the database what it is about to run. This would amount to all the data it would normally send for a completed test, minus the results. In place of the results would just be the ''in progress'' status.",1162574335,1162574455,minor
130,defect,,emallove,Future,new,,"In the reports, provide access to file contents",{{{after_each_exec}}} scripts are created by {{{File::Temp::tempfile()}}} so they are all similarly named and opaque when they are referenced in the reports. It would be nice to have a way of accessing their contents. Likewise for {{{config.log}}} files.,1162995191,1162995191,major
131,task,emallove,emallove,v3.1,new,,Create variables that map the client's field names to the MTTDatabase field names,"It shouldn't ''hurt'' to rename a column. There should be a single location to change client field names that map to database field names (e.g., {{{lib/MTT/Mappings.pm}}}?). Sample {{{Mappings.pm}}} excerpt:

{{{
#!perl
...
our $db_platform_name        = ""platform_name"";
our $db_platform_type        = ""platform_type"";
our $db_result_stderr        = ""result_stderr"";
our $db_result_stdout        = ""result_stdout"";
our $db_results_id           = ""results_id"";
our $db_start_timestamp      = ""start_timestamp"";
our $db_stop_timestamp       = ""stop_timestamp"";
...
}}}

This entails substituting a plethora of {{{{name}}}} items to be {{{{$db_name}}}}, but in the long run would make changing a column name in the database much more painless.",1163002843,1189537539,trivial
132,defect,emallove,jsquyres,v1.1,closed,fixed,Print BIG WARNING in client if MTTDatabase fails to submit properly,"Add some intelligence in submit.php so that it knows when an insert into the database has failed.

Somehow convey back to the client that one or more inserts has failed so that the client can print out a '''BIG HAIRY WARNING''' that the results did not get successfully insertted.  When this happens, automatically drop a database debug file containing all the data (so that it isn't lost) and include its filename in the '''BIG HAIRY WARNING.'''  This file can then be analyzed later for a post mortem, etc.  Be sure that this file is ''always'' dropped when there's a database insert error, regardless of what the INI file setting is for dropping database debug files.

Bonus points will be awarded if submit.php can communicate back to the client ''which'' results failed to submit, but that's not a huge deal (we'll be able to do this better in 2.0).

The '''BIG HAIRY WARNING''' should probably be output by the client both when it happens and at the very end of the run so that if all you see in the morning is the end of the MTT run on the screen, the warning is there and the user don't have to search through the output just to know if their data submitted properly or not.

The should be done on the trunk and the release branch; the code will likely be at least slightly different between the two, but quite similar.",1163199823,1163525726,blocker
133,defect,emallove,jsquyres,v3.1,new,,Make submits into database be atomic,"Building on ticket #132...

We should be able to do something more intelligent than #132 for ver 2.0.  For example, we might be able to make the insert into the database be atomic (Ethan suggests that the ""COPY"" SQL semantics for bulk submit may be useful).  That way, we know that everything that is in the database debug file dropped on the client is not in the database (as opposed to some made it, some didn't).",1163200008,1189537086,major
134,defect,emallove,jsquyres,v1.1,closed,fixed,Make v1.0 command line schema db fields longer,"We discovered today that Cisco's command lines are absurdly long and can cause failures upon insertion into the database.

Increase the fields such that the 3 attached MTTDatabase debug files are able to be submitted properly.",1163205020,1163256909,blocker
135,defect,emallove,jsquyres,v2.0,closed,fixed,Remove outdated references to perfbase_xml and friends,"There's a bunch of references in the client code to perfbase_xml, which is no longer necessary.

They should all be stripped out.",1163220016,1165422197,minor
136,defect,emallove,emallove,v1.1,closed,fixed,Fix the run_index race condition in mtt database,"command/mpi_version mismatches have been reported, which may be caused by the run_index race condition (currently only addressed in [milestone:v2.0 MTT 2.0]). Adding a run_index_seq {{{SEQUENCE}}} to the mtt database, and incrementing {{{once.run_index}}} using {{{nextval('run_index_seq')}}} will eliminate the existing race condition.",1163443399,1163516883,major
137,defect,jsquyres,emallove,v3.1,closed,fixed,"exit_status is not getting submitted for ""MPI Install"" and ""Test Build"" phases","exit_status is not getting submitted for ""MPI Install"" and ""Test Build"" phases.",1163448824,1164062895,minor
138,enhancement,emallove,emallove,v2.0,closed,fixed,Incorporate wifexited/wifsignaled into server-side,Incorporate wifexited/wifsignaled/wtermsig data into the [source:/trunk/server/sql/schemas-v2.sql schema] and [source:/trunk/lib/MTT/Reporter/MTTDatabase.pm MTTDatabase.pm] (see [changeset:446] and [changeset:447]).,1164064708,1165448884,major
139,defect,emallove,jsquyres,v2.0,closed,fixed,DB schema improvements,"Per discussion with IU, make a few changes to the v2 schema:

 * Add an endian field to the cluster table
 * Should the ""submit"" table have a field referring to the cluster table?  (because ""hostname"" is not sufficient for those running on scheduled clusters)
 * Should we normalize on the compiler names -- not to save space, but rather to ensure that we have meaningful, standardized names?
 * Mark most integer values that refer to other tables as ""foreign keys"" so that the db will a) have hints that we'll be using those values to JOIN to other tables, and b) be able to do a sanity check that the corresponding index in the other table actually does exist
 * ""bitness"" in the mpi_install table refers to the bitness of the MPI; it also needs a ""both"" value (e.g., for Sun and OSX binary packaged)
 * Need a ""bitness"" field in the test_build table referring to the bitness of the built tests.  We need to add a test down in the client to figure out what the bitness is (e.g., mpicc a trivial program that printf's sizeof(void*)).
 * In results table, drop ""stop_timestamp"" since it can be calculated by (start_timestamp + duration) -- there doesn't seem to be a reason to have the value pre-calculated in the database
 * In the results table, we currently have a field for ""exit_status"".  Need to change this to 3 different values, 2 of which may be combined if it makes the implementation easier:
   * boolean indicating if the process exited or terminated due to signal
   * if the process exited, the exit status
   * if the process terminated due to signal, the signal number
 * In the results table, remove phase / phase_id and move them into a secondary table per Josh's description so that the work of figuring out which table(s) to join to can be done by the database rather than doing a query on ""results"" and then a second JOIN'ed query to get the actual data from the other table(s).",1164112432,1166200193,major
140,defect,emallove,jsquyres,v3.1,new,,Remove arrays from latency_bandwidth table,"Remove the arrays from the latency_bandwidth table and instead have a key that creates a set of data for (for example) a single netpipe run.  Per similar logic to #139, this allows the database to do all the parsing for complex queries rather than our code.  This may be a future action item because it is not critical.  For example, it enables two kinds of searches:

 * Show the results for a single run of netpipe
 * Show the results of 4k messages from netpipe over the last week

The latter is only possible in the current schema by our code getting the data over the last week and then manually parsing out the information about 4k messages.  By removing the arrays, we can have the database do this work for us.

This is not a huge deal, but it would be nice.  Marking this as v3.0 simply because it's already coded up with arrays for v2.0 and it seems to be working.  If we later determine that this is a big feature that we need to have, we might move it down to v2.0.",1164112629,1164112629,major
141,defect,emallove,jsquyres,v1.1,closed,fixed,Nightly test run results mail has lots of extra space at the end,"The nightly test run results mail has lots of extra blank lines at the end, making it difficult to scroll to the bottom to click on the web link.

Time permitting, this little annoyance would be nice to fix -- but not a super high priority.",1164122826,1166658189,minor
142,defect,,emallove,v3.1,new,,Two selection popups not working in Internet Explorer,The {{{date_range}}} and {{{mpi_version}}} popup links do not spawn new browser windows in Internet Explorer (see [source:/trunk/server/php/screen.inc screen.inc]).,1164215618,1189537531,trivial
143,defect,jsquyres,emallove,v2.0,closed,worksforme,"Add a test_executable column, and create a Test/Specify/IMB.pm plugin","Since the IMB Performance tests (fka Pallas) are somewhat of a testing framework in and of themselves, a single {{{test_name}}} column does not suffice for breaking down the performance results of this test suite. ''Note the ''{{{argv}}}'' parameter in the ''{{{Test run: imb performance}}}'' section of
[source:/trunk/samples/ompi-core-template.ini the template]:''

{{{
[Test run: imb performance]
test_build = imb performance
pass = &eq(&test_exit_status(), 0)
timeout = 5
save_stdout_on_pass = 1
stdout_save_lines = 999999
merge_stdout_stderr = 1

argv = -npmin &test_np() &enumerate(""PingPong"", ""PingPing"", ""Sendrecv"", ""Exchange"", ""Allreduce"", ""Reduce"", ""Reduce_scatter"", ""Allgather"", ""Allgatherv"", ""Alltoall"", ""Bcast"", ""Barrier"") 

specify_module = Simple
analyze_module = IMB
simple_pass:tests = PMB-MPI1
}}}

A {{{test_executable}}} column in the [source:/trunk/server/sql/schemas-v2.sql the schema], coupled with an [source:/trunk/lib/MTT/Test/Specify/IMB.pm IMB.pm] plugin is needed. (For backcompatibility, a blank {{{test_executable}}} field means that the {{{test_name}}} and {{{test_executable}}} are identical.)",1164823849,1165265268,major
144,defect,jsquyres,jsquyres,v2.0,closed,fixed,Write test_run.xml data much more efficiently,"Both the ompi-core-tester branch and the trunk write the test_runs.xml file after ''every'' test invocation.  This can be a ''massive'' slow down on the overall performance.

For example, on the Cisco cluster last night, I had accidentally forgotten to ""rm -rf scratch"" before running.  I had a scratch tree that had two prior night's worth of data (each night runs 3927 tests) -- a test_runs.xml file of approximately 12.4MB.  By the end of the run, the test_runs.xml file was approximately 19MB.

Calling MTT::Test::Run::SaveRuns() on the 19MB file takes ''10 seconds.''  Yoinks!  It was also taking up a good chunk of memory whenever it was read/written (19MB of XML data, plus the whole huge memory transformation in SaveRuns(), which is pretty expensive).

This caused the Cisco tests to take approximately '''7 hours longer than they should have''' (i.e., running 3927 tests with a clean scratch tree took about 5.5 hours -- running the 3927 tests with the prior 3927*2 tests in test_runs.xml took about 12.5 hours).

This clearly needs to be better, potentially in one or more of the following ways:

 * Break up test_runs.xml into multiple files (then it doesn't matter how often we write new data).  This probably entails having some kind of a dirty scheme in the MTT::Test::runs data so that we only write out ""new"" data (although it would be good to have a way to very quickly identify the ""new"" runs rather than having to search through hundreds/thousands of records in MTT::Test::runs every time we want to go write out new results).
 * Write the test run data less frequently, such as after running all np and all variants for a single test (although this alone is probably not enough of a speedup).",1164832769,1164891314,critical
145,defect,jsquyres,jsquyres,v2.0,closed,fixed,"test run ""variant"" is not being submitted back to the database","Need to make variant be submitted back to the database.  Right now, it's showing up as a value of -38 -- the default value meaning that it's not being reported by the client.",1164833474,1164835455,major
146,defect,emallove,jsquyres,v2.0,closed,invalid,"Remove all ""DEFAULT"" statements from v2 schema","The DEFAULT statements in the schema that insert bogus values will shortly outlive their usefulness (i.e., debugging during initial implementation with the new schema).  Instead, they should have NOT NULL statements with no DEFAULT statement so that we never actually insert bad data (i.e., data that is missing some values) into a table.

This ticket is a reminder to remove these DEFAULT statements when we're done.",1164833575,1166197429,major
147,enhancement,emallove,jsquyres,v1.1,closed,fixed,Add IBM to MTT summary page,Please add IBM to the list of organizations on http://www.open-mpi.org/mtt/,1165327726,1166658153,critical
148,defect,jsquyres,jsquyres,v2.0,closed,invalid,2.0 trunk seems to be very slow compared to 1.x release branch,"I conducted a test last night: run the same OMPI tests on 2 hosts with essentially the same INI file (slightly different because they're slightly different formats) on the OMPI trunk with both the MTT trunk and the MTT release branch.

The MTT release branch finished in about 5.5 hours (which is normal), but the MTT trunk is still running strong after about 12 hours.  It seems to be showing about the same results as the MTT release branch -- which is good :-) -- but it seems to just be doing it a whole lot slower than the release branch.

I have the outputs and the data from both runs; need to examine them to see where exactly the slowness is incurred on the trunk.  The obvious place to look is time-per-test-run -- perhaps it's somehow much higher on the trunk?",1165422844,1165464588,critical
149,defect,emallove,jsquyres,v2.0,closed,fixed,Create some e-mails based on the new reporter,"For 2.0, we need more-or-less the same e-mail reports that we're getting now for the 1.0 series.

That is, we need some e-mail reports along the lines of:

 * Summary of all runs from last night
 * Detail of all MPI install failures
 * Detail of all MPI install successes that had stderr
 * Detail of all Test build failures
 * Detail of all Test run failures

I say ""something along the lines of"" because the new reporter does things a little differently, so the e-mails will likely be a little different, perhaps in scope, appearance, etc.",1165422959,1167839577,major
150,enhancement,emallove,jsquyres,v2.0,closed,fixed,Make reporter columns able to sort,"It would be quite useful to be able to have icons in the column headings that give the ability to sort on a given column.  For example, have up and down arrow/triangle/whatever icons in the headings such that if you click on the ""up"" arrow in the MPI version column, the table would be re-displayed, sorted by MPI version in ascending order.",1165578462,1166138326,major
151,enhancement,jsquyres,jsquyres,v2.0,closed,invalid,Add field to ini file: SVN arguments,"Add a field to the ini file that allows passing arbitrary arguments down to subversion.  This will allow, for example, testers to run OMPI versions from the arbitrary past to seed the database with an intial set of performance results to create a baseline for comparison.",1165578469,1166484333,major
152,defect,jsquyres,emallove,v2.0,closed,fixed,Excessive number of directories being created in a single MTT run,"I noticed that for the following mtt command, many direcories are getting created that are unrelated to netpipe:

{{{
$ client/mtt --section ""run;netpipe""
}}}

The following {{{grep}}} shows an upwards of 230,000 directories being created in an MTT run. Why would that be for only several test suites, and about 1,000 test runs per MTT run? (''Not sure when this behavior started, but it has been going on for at least the past 7 days''.)

{{{
$ grep -cE 'Making dir' `find . -name 'mtt.out*'`
./20061202.13/mtt.out.sparc.64.trunk:214873
./20061202.15/mtt.out.sparc.64.v1.2:214218
./20061203.06/mtt.out.sparc.32.v1.2:235674
./20061203.19/mtt.out.sparc.32.trunk:236361
./20061204.10/mtt.out.sparc.64.trunk:214873
./20061204.19/mtt.out.sparc.32.trunk:236361
./20061204.22/mtt.out.sparc.32.v1.2:236361
./20061205.19/mtt.out.i386.32.trunk:236361
./20061205.19/mtt.out.sparc.32.trunk:236361
./20061206.11/mtt.out.sparc.64.trunk:214873
./20061206.19/mtt.out.sparc.32.trunk:236359
./20061206.23/mtt.out.sparc.32.v1.2:236359
./20061207.13/mtt.out.sparc.64.trunk:214871
./20061207.17/mtt.out.sparc.64.v1.2:214871
./20061207.19/mtt.out.sparc.32.trunk:236359
./20061208.02/mtt.out.sparc.32.v1.2:236359
./20061208.15/mtt.out.sparc.64.trunk:214871
./20061208.18/mtt.out.sparc.64.v1.2:214871
./20061208.19/mtt.out.sparc.32.trunk:236359
./20061209.04/mtt.out.sparc.32.v1.2:230451
./20061209.15/mtt.out.sparc.64.trunk:214871
./20061209.19/mtt.out.sparc.32.trunk:236359
./20061210.08/mtt.out.sparc.32.v1.2:236359
./20061210.14/mtt.out.sparc.64.trunk:213911
./20061210.19/mtt.out.sparc.32.trunk:231831
./20061211.04/mtt.out.sparc.64.v1.2:111659
}}}",1165855851,1168380795,minor
153,defect,emallove,jsquyres,v3.1,new,,Allow customization of graphs,"From the performance graph screen, let the user modify the output format of the current graph(s):

 * Change the size of the graph
 * Change the type of the graph (bar, line, ...etc.)
 * Change the scale of the axes (log vs. linear for both x and y)
 * Whether or not to show the subtitles in the graph

This references #72 -- all of these options should have default values in the user's individual preferences.",1166198717,1190469167,major
154,defect,emallove,jsquyres,v2.0,closed,fixed,Show platform name instead of hostname in reporter,"Display results by platform name, not hostname.",1166199300,1167833216,major
155,defect,,jjhursey,v1.1,closed,fixed,SVN.pm Module broken,"Below is the patch (for branch):
{{{
Index: SVN.pm
===================================================================
--- SVN.pm      (revision 482)
+++ SVN.pm      (working copy)
@@ -34,21 +34,21 @@
     # If we're not forcing, do we have a svn with the same URL already?
     if (!$force) {
         foreach my $mpi_get_key (keys(%{$MTT::MPI::sources})) {
-            next
-                if ($section ne $mpi_get_key);
+            next if ($section ne $mpi_get_key);
             
-        my $mpi_get = $MTT::MPI::sources->{$mpi_get_key};
-        foreach my $version_key (keys(%{$mpi_get})) {
-            my $source = $mpi_get->{$version_key};
-            Debug("">> have [$simple_section] version $version_key\n"");
+            my $mpi_get = $MTT::MPI::sources->{$mpi_get_key};
+            foreach my $version_key (keys(%{$mpi_get})) {
+                my $source = $mpi_get->{$version_key};
+                Debug("">> have [$section] version $version_key\n"");
 
-            if ($source->{module_name} eq ""MTT::MPI::Get::SVN"" &&
-                $source->{module_data}->{url} eq $url) {
-                
-                # We found it
-                
-                $previous_r = $source->{module_data}->{r};
-                last;
+                if ($source->{module_name} eq ""MTT::MPI::Get::SVN"" &&
+                    $source->{module_data}->{url} eq $url) {
+                    
+                    # We found it
+                    
+                    $previous_r = $source->{module_data}->{r};
+                    last;
+                }
             }
         }
     }
}}}

Seems to have been an undefined symbol and a bracket.",1166454908,1166485120,major
156,defect,jjhursey,jjhursey,,closed,fixed,Add SVN rnum argument,"Related to ticket #151 I attached a patch to the MTT devel branch to add the ability to specify an R number to a svn checkout. For example:
{{{
[MPI get: jjhursey-ft-cr]
mpi_details = Open MPI
mpi_installer = Open MPI build

module = SVN
svn_url = https://svn.open-mpi.org/svn/ompi/tmp/jjhursey-tmp

svn_post_export = <<EOT
./autogen.sh
EOT

[MPI get: ompi-trunk]
mpi_details = Open MPI
mpi_installer = Open MPI build

module = SVN
svn_url = https://svn.open-mpi.org/svn/ompi/trunk

# Last synched ...
svn_rnum = 12745
svn_post_export = <<EOT
./autogen.sh
EOT
}}}

This will compare the current HEAD of a tmp branch (jjhursey-tmp) against the last synched rnumber of the trunk (r 12745).

Useful when finding regressions between the trunk and a tmp branch.",1166476295,1166484452,minor
157,defect,emallove,jsquyres,v2.0,closed,fixed,"Weird ""file"" warning in MPI install phase","Getting this warning during MPI install (seems to be right at the end?).  It's too late at night to try to figure it out... filing here so that we remember to fix it:

{{{
*** MPI install phase starting
>> MPI install [mpi install: ompi/gnu]
   Installing MPI: [ompi-nightly-v1.2] / [1.2b3r12956] / [ompi/gnu]...
Usage: file [-bcikLnNsvz] [-f namefile] [-F separator] [-m magicfiles] file...
       file -C -m magicfiles
Try `file --help' for more information.
>> 1 successful submit, 0 failed submits (total of 1 result)
}}}",1167800985,1169245645,major
158,defect,,emallove,v3.1,new,,"Cache all failed database submissions, and add a --resubmit option","If an MTTDatabase submission fails (e.g., due to a network outage - see below), a user should be able to resubmit their results via a {{{--resubmit}}} option.

{{{
>> Failed to report to MTTDatabase: 502 Cannot Connect
   <TITLE> Cannot Connect </TITLE>
   
   <H2>Cannot Connect</H2>
   Connection failed by DeleGate on `proxy-acme.com:8080'
   <P>
   Tried from the <I>client</I> joe-schmoe.com:42755
           to the <I>server</I> http://www.open-mpi.org:80.
   <UL>
   
   <P><LI>Connection to the server <B>timed out</B>.<BR>
   The server or the network route to the server may be in congestion,
   or they might be blocking your access...
}}}",1167851137,1189537061,critical
159,enhancement,emallove,jsquyres,Future,new,,Add more ompi-tests to MTT sample INI file,"Add more test suites from ompi-tests to the MTT sample INI file (i.e., make sure they work, submit results back to the database, etc.).  Here's two to add:

 * cxx-test-suite: should be a simple configure/make, but this should only occur if the C++ bindings for OMPI were built
 * simple: a bunch of individual tests in a variety of languages that currently have no overall build/run scheme (it could be added; I wrote 90% of the tests in there, so it's not like this is a 3rd party suite that will get replaced with a newer version someday).  Indeed, this is probably a misnomer -- ""homegrown"" is probably a better name for this directory.  We might want to add some simple build infrastructure in here, give it a better directory structure, and make it the de facto place for tests written by OMPI developers (i.e., an extensible set of small MPI unit tests).

I'm going to poll the OMPI devel-core list to see what other ones people feel we should add (I poked around a bit in ompi-tests and I don't know what all the tests are, so it's probably best to ask the developers).",1167852345,1189537426,major
160,defect,,jsquyres,v3.0,closed,fixed,Make MTT client able to test MPI singletons,"Currently, we cannot test MPI singletons (i.e., running ""./a.out"" as opposed to ""mpirun ... a.out"" as specified in the MPI details section).  We really should be able to test singletons alongside non-singletons in a single MTT run.  This means that the MTT client needs to somehow know that it should ignore the MPI details for some runs (maybe have a ""singleton"" section in the MPI details section...?  Dunno -- needs some more thought).",1167861656,1186682348,critical
161,defect,emallove,jsquyres,v2.0,closed,fixed,"Re-word ""Create permalink"" popup window","Re-word the text in the ""create permalink"" popup window such that it's obvious that you're supposed to copy the link that appears and that's your permalink.  Right now, ""Tiny link"" is not obvious at all.
",1167882704,1167928025,major
162,defect,emallove,jsquyres,v2.0,closed,fixed,"Default the ""test"" field to ""hide"" in test run...?","The field ""test"" should default to ""hide"" in test run queries; otherwise, you get literally thousands of results that are difficult to drill down through (e.g., every single intel test for every version of MPI install, etc.).  It's too much.

However, it does raise a quandry -- if you drill down through test runs and find the suite you want to see the individual test results from, you have to go and enable the test field to show in order to see what you want to see.  This is not exactly intuitive either.

(This may take a phone call to sort out :-) )",1167883141,1167937790,major
163,defect,jsquyres,jsquyres,v2.0,closed,fixed,Periodically get incorrect script not found errors,"This report: http://www.open-mpi.org/~emallove/mtt2/reporter.php?do_redir=27

Shows an error that should not be happening:

{{{
Result message:
Shell: command failed ""./configure CC=mpicc CXX=mpic++ F77=mpif77
make""

Result stdout:
/tmp/Axy8LtqhD2: line 2: ./configure: No such file or directory
make: *** No targets specified and no makefile found.  Stop.
}}}

This is a INI file scriptlet; there's no reason that this temp file can't find the ./configure script from the IBM test suite.  This seems to happen somewhat randomly -- other IBM builds from the same INI file worked just fine.  The scriptlet in question is from an IBM test build section:

{{{
[Test build: ibm]
test_get = ibm
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Shell
shell_build_command = <<EOT
./configure CC=mpicc CXX=mpic++ F77=mpif77
make
EOT
}}}",1167886455,1168033040,blocker
164,defect,emallove,jsquyres,v2.0,closed,invalid,Add examples of performance sections in ompi-core-template.ini,"I looked for examples of how to run the performance tests in ompi-core-template.ini and couldn't find them.

I know that you (Ethan) sent me this info at some point, but I now can't find it.  :-\  So the best place to put this stuff is in the trunk ompi-core-template.ini so that everyone can see it, anyway.",1167920479,1167921649,critical
165,defect,,jsquyres,v3.0,closed,fixed,Phase N checking phase (N-1)'s INI section not sufficient,"In each of the phases in the MTT client, we check the INI file to see if the prior section that we depend on is there (e.g., the MPI install phase checks to see if the corresponding MPI get section exists in the INI file).

However, with the use of the --section option to the MTT client, this can become muddled if using multiple invocations of the client to effect parallelism or fine-grained selection of sections within an INI file.  For example, the following will currently produce an error/not do what you expect:

{{{
shell$ mtt ... --mpi-get --section foo
shell$ mtt ... --mpi-install --section gnu-compiler
}}}

Because the MPI install section is not going to see the ""foo"" MPI get section in the INI file (because it has been pruned via the --section directive).  Instead, you have to do this:

{{{
shell$ mtt ... --mpi-get --section foo
shell$ mtt ... --mpi-install --section gnu-compiler --section ""mpi get""
}}}

Which (for the 2nd invocation) effectively prunes everything except the gnu-compiler install section ''and'' all ""mpi get"" sections (hence, the ""foo"" section will be found).

But this is a misnomer of a check, anyway.  We don't care if the corresponding section cannot be found in the INI file; we only care if the meta data exists for the ""foo"" MPI get that shows that we have the data necessary to proceed with the gnu-compiler MPI install phase.  So the check should be updated to look for the meta data, not the INI file.

The same concept holds true for all the other phases.

'''Sidenote:''' we only care about the checking the INI file in order to warn users about non-existent sections (e.g., having ""mpi_get = foo"", but there is no [mpi get: foo] section).  This kind of check is valid and useful, but should be implemented differently than it is right now; see #166 for this issue).",1167927011,1186682348,major
166,defect,jsquyres,jsquyres,v3.0,closed,fixed,Re-work warnings for non-existent INI file section names,"Currently, each phase in the MTT client looks for corresponding sections in the INI file that it depends on.  For example, the MPI install phase looks for the corresponding MPI get section in the INI file.  But this can be a problem when combined with the --section directive to the MTT client; the corresponding MPI get section may have been trimmed (see #165 for more details).

This kind of check is valuable and useful, but should be implemented differently.

Instead, this check should be performed ''before'' the INI file is trimmed.  This accomplishes two things:

 * Trimming via --section is irrelevant
 * Al warnings are issued right when the MTT client starts -- not [potentially] several hours into a run",1167927210,1186682348,major
167,enhancement,,jsquyres,Future,new,,Wrapper layer around MTT client for full parallelism,"After extensive experimentation and real-world use of the MTT client, and after more discussion with various people, we came to the following conclusions:

 * Having ""one big INI file"" with all the various configurations that you want to test can be useful.  
 * However, it can also be useful to have lots of little INI files that are used to create custom INI files for MTT runs on the fly can also be useful.
 * Some organizations don't care about parallelism with an MTT run (e.g., a bunch of compiling followed by a bunch of test runs), while others may want or need to utilize resources more efficiently (separate all the builds and test runs onto different resources).
 * With some creative shell scripting, the MTT client currently supports all scenarios that we know about (i.e., an upper-level script that invokes the MTT client in a variety of ways to effect desired usage scenarios).  The MTT client seems to have a rich enough command line feature set to do most of what users want and need.
 * In short: each organization uses MTT differently.

It seems like the MTT client has a good set of options that allow a wide variety of usage scenarios.  However, it seems that a few different MTT users have effectively reinvented the wheel with their upper-level shell scripting.  

After much discussion, Ethan and I discussed the possibility of having some kind of MTT analysis, launching, and monitoring agent that has the following characteristics:

 * Can take an INI file and create a dependency tree of sub-jobs (e.g., each MPI get is a sub job, each MPI install that depends on that MPI get is a sub job, each test build that depends on that MPI install is a sub job, ...etc.).  
 * Run all the jobs in the dependency tree, parallelizing as much as appropriate (e.g., launch a sub-jobs only when all of its dependencies have successfully been completed)
 * The launching mechanism for the sub-jobs should be based on plugins in order to utilize schedulers (SLURM, Torque, ...etc.).  
 * Sub-jobs for each phase have a defined list of resources that they can use (e.g., MPI get sub-jobs can only run on a cluster head node, MPI install sub-jobs can only be dispatched to dedicated compile nodes, but test run jobs can be submitted to the general resource manager for dispatching across the entire cluster, etc.).
   * As such, only use the required resources for each sub-job (e.g., compiles may only require one-processor allocations while test runs may require more than one processor)
 * As an open question: is it worth it to effect this behavior in rsh/ssh environments?  Or should scheduled environments be a prerequsite?

In this way, the agent can take a huge INI file (for example) and get maximum parallelism of testing the combinatorial of all the sections.  MPI gets will be dispatched (possibly test gets at the same time?), and upon completion of each, MPI installs will be launched.  As each MPI install has completed, test builds a dispatched (each of these steps only require one node -- and may even be restricted to specific nodes, such as the head node of a cluster).  When each test build completes, test runs can be dispatched on multiple nodes.

We need a few more things in the MTT client before this can occur:

 * Some way for the MTT client to report back to the agent that an individual ""job"" has completed (potentially something with a more rich interface than the MTT client writing new meta data in a scratch directory indicating that the job finished -- it would be good to have some kind of action that would asynchronously notify the agent)
 * It must be safe to have multiple readers and writers in a single scratch directory",1167931802,1189537434,major
168,defect,,jsquyres,v3.1,closed,fixed,Make MTT be able to test heterogeneous MPI scenarios,"LANL has a need to be able to test OMPI across heterogeneous environments (e.g., single MPI runs across multiple different architectures and/or operating systems).

This will be complicated and will require some design work first.  I anticipate changes mostly on the client, but perhaps some on the server as well (e.g., do we need to adjust the architecture field in the DB?).

LANL is going to come up to speed on MTT in homogeneous scenarios first, and then we'll start talking about what to do to make it work in heterogeneous situations.

A total SWAG that occurred to me today is that perhaps we could have two separate MPI installs and test builds (i.e., run the MPI/test gets once, the MPI install / test build once for each target architecture), and then somehow have some kind of ""join"" operation in MTT that would say ""these two MPI installs come from the same MPI get, and these two test builds come from the same MPI installs [that are derived from the MPI installs that come from the same MPI get], and we want to run with both of them across resources"".  Don't know if that's useful or not -- this will take some thought...",1167956509,1176923636,major
169,defect,emallove,jsquyres,v2.0,closed,fixed,Preferences cookie doesn't seem to work in Safari,"If I set preferences under Safari, no cookie seems to get set (even if I put Safari in promiscuous mode to accept all cookies).",1167957116,1168550364,critical
170,defect,emallove,jsquyres,v3.0,closed,worksforme,"Hard to tell ""identical"" plots apart in perf graphs","http://www.open-mpi.org/~emallove/mtt/reporter.php?do_redir=43

These netpipe plots show 9 lines each, reflecting:

 * 3 MPI installs (different compilers: GNU, Intel 9.0, Intel 9.1)
 * 3 run variants (tcp, openib, openib+mpi_leave_pinned)

Hence, 3*3=9 lines on each plot.  There are clearly 3 different performance groupings, reflecting the network/btl choices from the test run variants.  Each of those groupings has 3 lines from the 3 different compilers from the MPI installs.

The problem is that -- aside from the fact that the test run variants have wildy different performance (in this particular case, they definitely should, but that won't always be the case) -- it's pretty hard (impossible?) to tell the different rows apart.  How can we make it so that they can be differentiated?  There's no additional column that can be shown that would differential the rows (plot lines) because:

 * the test run variants are only differentiated by MPI Details command lines, which can't easily be shown on the test run performance summary table
 * the MPI installs are differentiated by compiler suite/version -- we ''could'' show these fields on the test run performance summary table, but is that a slipperly slow to go down? (i.e., start adding fields from the corresponding test get / MPI install / MPI get)

What to do?",1168010051,1186682348,critical
171,defect,,jsquyres,v3.1,new,,CLI to query MTT results,"It would be useful to have at least some kind of simplistic tool to query the results of prior MTT runs from the command line.  This would enable the following useful scenario:

 * Do an MPI get, MPI install, both of which succeed
 * Do a Test get, build, and a small number of runs of a ""small"" test suite (test very basic functionality -- ensure that the entire MPI install isn't wholly borked -- even though it built successfully).  Assumedly this would be a suite that could run within a few minutes (e.g., trivial).
 * Query to see if those test runs all completed successfully (perhaps via serial number?).
 * Only if all those results completed successfully, do another MTT run with much larger test suites (intel, ibm, the perf tests, etc.) and higher process counts.

Extra bonus points would be for querying the results from the MTT database to get definitive results (which I think we might want later for larger, distributed scenarios -- e.g., Cisco does some ""small"" tests on one platform first, and then only later does ""larger"" tests on a variety of platforms if the first ""small"" tests succeed first), but working up to that, it may be sufficient to simply be able to query the local meta data.

I throw in the possibility of directly querying the MTT database because it may be a simple thing to do with a little perl / LWP and perhaps downloading XML of the results (or somesuch)?  Or, more specifically, if it's equal effort to do the local meta data query vs. the MTT database query, it may not be worth it to do the local meta data query (this is an open question to Ethan :-) ).",1168017176,1168447103,major
172,enhancement,,jsquyres,v3.0,closed,worksforme,Add user-defined field to uniquely identify results,"Add a string value that can be set via the MTT command line that will be associated with all results in the database that are submitted.  The intent of this string is to allow MTT users to have some kind of unique value to identify their run.  Suggestions for such unique values include:

 * Host list
 * MTT run ID
 * Networks tested
 * ...?

For example, when I see a set of failed Cisco runs in the MTT database, one of my first troubleshooting step is to go check the nodes where they ran and ensure that everything is running properly (for example, some of my nodes had faulty IB installs over the last week).  And at least for the time being, while Trim is not fully implemented and we don't yet allow multiple MTT clients to be simultaneously running in the same scratch, many MTT users create a new scratch tree every night.  It can be helpful to go back to that specific scratch tree and examine specific problems.",1168025850,1186682348,major
173,defect,emallove,jsquyres,v2.0,closed,fixed,MTT client needs to not submit perf results from non-pass's,"http://www.open-mpi.org/~emallove/mtt/reporter.php?do_redir=44

This report shows that some perf results were submitted for some netpipe tests that clearly did not pass.

The MTT client needs to not submit performance results for tests that did not pass.  This probably means that the NetPIPE and IMB plugins need to be updated to check for pass=true.",1168028697,1168053819,critical
174,defect,emallove,jsquyres,v2.0,closed,fixed,"Install cron job to delete ""trial"" results after 1 week",Get a job running on milliways that will delete trial results after a week.,1168043769,1168542922,critical
175,defect,jsquyres,jsquyres,v3.0,closed,fixed,Make funclet to return environment name,"Make a new funclet that returns the name of the environment that we're running in, e.g., ""SLURM"", ""Torque"", ""rsh/ssh"", ...etc.",1168043931,1186682348,major
176,defect,jsquyres,jsquyres,v2.0,closed,fixed,Exit status and signal not always set right in DB,"I see some -38's in the signal values, and sometimes some nonsensical values for exit_status.  Here's an example:

http://www.open-mpi.org/~emallove/mtt/reporter.php?do_redir=50  

Could it be that the client is not passing these values back to the DB?",1168351176,1168442126,critical
177,defect,emallove,jsquyres,v2.0,closed,fixed,Make server SQL errors be a bit more verbose,"On a client error this moring (i.e., it was sending bad input to the server), all we got was:

{{{
MTT submission for test build
MTTDatabase server error: ERROR:  invalid input syntax for integer: """"; 
MTTDatabase server error: ERROR:  invalid input syntax for integer: """"; 
}}}

IT would be helpful to be a bit more verbose -- like print out the bad SQL or something.",1168357771,1168382342,major
178,defect,emallove,jsquyres,v2.0,closed,fixed,Permalinks should override local preferences,"The following URL has a trial run in it:

http://www.open-mpi.org/~emallove/mtt/reporter.php?do_redir=50

If you don't have ""show trials"" set in your prefs, you'll get ""no data available for query"".  This seems pretty odd -- when you make a permalink and send it to someone else, they should see exactly what you see.",1168358180,1168470865,critical
179,enhancement,emallove,jsquyres,v3.0,closed,fixed,Add endian field in MPI install,"Similar to #110, add an endian field indicating which endian the MPI was built with:

 * big endian
 * little endian
 * both (e.g., OSX universal binaries)

The field is already in the database, but it's not being set properly (similar to #110 / bitness of MPI).",1168390949,1186682348,major
180,defect,emallove,jsquyres,v3.0,closed,invalid,HTML mails don't work in mailman digest mode,"The daily MTT mails appear to get hosed when you subscribe to the mtt-results list in digest mode.  Terry got an e-mail with the following:

{{{
pre wrap="""">HTML attachment scrubbed and removed
}}}

I don't know if this is a function of Sun's e-mail system or if mailman doesn't handle them correctly.",1168439054,1189690870,major
181,defect,emallove,jsquyres,v2.0,closed,fixed,log performance plots don't show < 10^0 properly,"When using the log scale, values less than 10^0 (i.e., 1) don't plot properly.",1168443701,1168634499,critical
182,defect,,jsquyres,v3.1,new,,Prerequesite sections,"Add the ability to have test builds and test compiles depend on each other.

For example

 * don't build the intel tests if the trivial tests fail to build.
 * don't run the intel tests if the trivial tests fail to run.

More specifically, allow test builds to depend on other test builds, and allow test runs to depend on other test runs (do not yet allow test builds to depend on test runs -- need #167 for that).  This can be effected via funclets in the INI file, for example put the following in a test build section:

prereq_test_build = &passed(""trivial"")

Or something along those lines (still some details to think out here...).",1168447271,1189537298,major
183,defect,,emallove,v3.0,closed,fixed,Make [columns] link an [Advanced] link,The `[Columns]` link should add the ability to search on all the fields that now can only be shown or hidden.,1168454431,1186682348,major
184,defect,,jsquyres,v3.0,closed,fixed,Funclet evaluation order is wrong,"Right now, funclets are evaluated from inside out -- find the innermost ""&foo(...)"" (meaning that there are no other &bar()'s inside of it), evaulate it, replace its value in the string, and then repeat until there are no ""&foo(...)""'s left.

But there are three [at least] problems with this approach:

 1. Ticket #85
 1. ""@foo@"" evaluation is not performed consistently (this may or may not be easily fixable)
 1. Incorrect order of evaluation can leave to useless result values.  Consider the following example:
{{{
np = &if(&eq(&env_max_procs(), 4), ""<first>"", \
         &if(&eq(&env_max_procs(), 8), ""<second>"", \
             &enumerate(""<third>"", &env_max_procs())))
}}}
  The goal of this np value is:
   * If there are 4 procs available, then run with <first> procs
   * If there are 8 procs available, then run with <second> procs
   * If there are more than 8 procs available, then run with (<third>,&env_max_procs()) (i.e., run with 2 NP values)
 With the current order of evaluation, if &env_max_procs() is 4, we will get '''2''' ""<first>"" result values (meaning that we invoke the same test twice with the same np value).  Likewise, if &env_max_procs() is 8, we'll get '''2''' ""<second>"" result values.  This happens because the &enumerate() is evaluated ''first'', therefore creating an array of 2 answers.  That the &if clause for &enumerate() is later trimmed out -- but the damage is already done because we've already made an array result (duplicating the prior clauses).

The solution for this is not simple; it may involve re-writing the entire funclet evaluation scheme to be oriented towards left-to-right evaluation.  A short-term solution might simply be to look at the array answers and ensure that all entries are unique.",1168801483,1188598502,critical
185,defect,emallove,jsquyres,v2.0,closed,fixed,Add date/timestamp to details view,"Add the date/timestamp of each result to the details view.

Is it possible to also add this as an optional column in the summary view (and therefore be able to sort by it)?",1168971882,1168981804,major
186,defect,jsquyres,jsquyres,v3.0,closed,fixed,Sometimes tests falsely failing with signal 9,"I have noticed over the past several days that sometimes tests running on the cisco cluster are falsely failing with a signal 9 (meaning that they were specifically killed).

I'm not sure yet whether this is the MTT client doing something wrong, something I have set incorrectly in my INI file, or whether SLURM is doing something nefarious.  Filing the ticket here so that the issue gets tracked...",1169044183,1186682348,critical
187,defect,,jsquyres,v3.0,closed,fixed,Human-reporting when SQL/database errors,"When an error occurs on the database (e.g., SQL fails or something), there should be some options for reporting this to humans, particularly since the Big Hairy Warnings currently in the client may not get seen if the client is running via cron.  Perhaps:

 * On the server, send an e-mail to the MTT database admins
 * On the client, send an e-mail to the user who is running MTT",1169050859,1186682348,critical
188,defect,emallove,jsquyres,v2.0,closed,fixed,Update robots.txt to disallow crawling of the mtt tree on main web site,"We need to update the robots.txt file on the main ompi web site to tell all crawlers to not crawl /mtt/.

This can be done in the ompi-www SVN, but we should send DongInn a heads-up that we did it, just so that he's aware.",1169054049,1169650000,major
189,defect,,emallove,v3.0,closed,fixed,Allow users to create their own funclets without touching the repository's MTT code,"All funclets currently reside in [source:/trunk/lib/MTT/Values/Functions.pm Functions.pm], but there are many cases where users require ''user-specific'' funclets. MTT should have a mechanism (e.g., local/Functions.pm?) by which users can work their own special little perl mojo into their INI file.",1169162611,1188416879,major
190,defect,,jsquyres,v3.1,new,,Enable heterogeneous MPI testing,"Both Terry (Sun) and Galen (LANL) asked today about using MTT for heterogeneous MPI testing (e.g., having test runs span multiple platforms / operating systems / architectures).

This is going to be related to #167, but is going to have some killer side effect requirements as well:

 * Multiple installations from a single MPI Install phase instance
 * Multiple builds from a single Test Build phase instance
 * Setting paths correctly to a) find OMPI executables on heterogeneous nodes and b) finding the Right test executables on heterogeneous nodes

And there's probably more; these are what occurred to me while talking to Galen today.",1169179443,1189537304,major
191,defect,jsquyres,jsquyres,v2.0,closed,fixed,"TextReporter is eliminating ""0"" results","The text reporter is automatically eliminating results that have a value of 0.

This is actually a bigger problem than just the TextReporter -- it seems to be a problem in the MakeReportString() function.  Need to dive a little deeper and figure out what the exact problem is.

This needs to be fixed before we cut the 2.0 branch.",1169227608,1169232353,critical
192,defect,,emallove,Future,new,,"Have a ""directory_name"" parameter in MPI install section","It is cumbersome to have to create a whole new INI section just to avoid overwriting scratch space. For example, I really only require a single `MPI install` section (see below) for all four of my `MPI install`'s (four combos of sparc/i386 and 32-bit/64-bit). I don't need to worry about sparc and i386 overwriting each other, since they're on separate clusters, so I have two `MPI install` sections. The only reason I have two, and not one, is to split out 32 and 64 into seperate directory branches off the scratch directory. I think it would be better to determine the the scratch area using an INI param called `directory_name` versus using the string after the `:` in the INI section name.

{{{
[MPI install: 64-bit]

mpi_get = override at the cli
configure_arguments = override at the cli

save_stdout_on_success = 1
merge_stdout_stderr = 1
vpath_mode = none
make_all_arguments = -j 4
make_check = 0
compiler_name = sun
compiler_version = &shell(""get_sun_cc_version"")
module = OMPI
}}}",1169233916,1169233916,trivial
193,defect,emallove,emallove,v3.1,new,,"Prefix database objects with ""mtt_""","It would be an added convenience to be able to more easily lookup Postgres meta-data (e.g., statistics) for all mtt database objects. E.g.,

{{{
#!sql
SELECT attname,most_common_freqs 
  FROM pg_stats 
  WHERE tablename LIKE 'mtt_%';
}}}",1169648988,1169648988,major
194,defect,emallove,jsquyres,v2.0.1,closed,fixed,Platform name not showing up in detail pages,The platform name appears to be blank in detail pages.  Perhaps a typo in the reporter?,1169649380,1170257823,major
195,defect,emallove,emallove,v3.0,closed,invalid,"Relocate ""command"" column to ""results"" TABLE","The `command` field should go in the `results` table. The
reason being is that with `command` in the `test_run` table,
the ratio of `test_run` rows to `results` rows is basically
1:1 since `command` contains an often unique `mpirun` command
(when you consider `--prefix some/long/sratch/dir`, `--mca`'s, etc.).
(See [source:/trunk/server/sql/schemas-v2.sql].)",1169681441,1186682348,major
196,defect,jsquyres,jsquyres,,closed,worksforme,post-checkout step doesn't cause failure,"HLRS ran into the problem last night where autogen failing in the IBM test suite checkout didn't cause a failure, but rather failed later when it tried to run ""configure"" in the test build phase.

This should not happen -- if the autogen fails (i.e., the post copy step executed in the beginning of the test build phase), the test build should fail specifically indicating that the post-copy step failed, not let it get farther into the test build and fail later, reporting a problem that is really a red herring and not the root cause.

I could have sworn that I fixed this problem before, but apparently not.  :-(",1169731421,1179947502,major
197,defect,jsquyres,jsquyres,v2.0.1,closed,fixed,MTT not timing out subcommands properly,"This doesn't seem to happen often, but it does happen with a frequency [slightly] greater than 0.  I've seen it on Cisco clusters and Tim has seen it on IU clusters.

A test run hung on a cisco MTT run for almost 10 hours.  Clearly, the mpirun itself was borked, but MTT should have timed out long before then and killed it.  Why didn't it?  Here's what ""ps"" said on the node in question where MTT was running (in a SLURM job):

{{{
[mpiteam@svbu-mpi013 2007-01-24]$ ps -eadf | grep mpit
mpiteam  11580 11577  0 Jan24 ?        00:00:00 perl /tmp/slurmd/job00919/script --mtt-args=--verbose --dir=mtt --get-section ompi-nightly-v1.2 --install-section OMPI/GNU
mpiteam  23044 11580  0 Jan24 ?        00:01:32 perl /home/mpiteam/svn/mtt/client/mtt -p --file /home/mpiteam/svn/mtt/samples/cisco-ompi-core-testing.ini --scratch /home/mpiteam/svn/mtt/svbu-mpi013.cisco.com/scratch --verbose --test-get --test-build --test-run
mpiteam  23195 23044  0 Jan24 ?        00:00:00 [sh] <defunct>
mpiteam  31680 23044  0 01:01 ?        00:00:00 mpirun -np 16 --mca btl tcp,self --prefix /home/mpiteam/svn/mtt/svbu-mpi013.cisco.com/scratch/installs/ompi-nightly-v1.2/ompi_gnu/1.2b4r13295/install src/mpi2c++_test
root      7629  4097  0 10:33 ?        00:00:00 sshd: mpiteam [priv]
mpiteam   7631  7629  0 10:33 ?        00:00:00 sshd: mpiteam@pts/0
mpiteam   7632  7631  0 10:33 pts/0    00:00:00 -bash
mpiteam   7851  7632  0 10:50 pts/0    00:00:00 ps -eadf
mpiteam   7852  7632  0 10:50 pts/0    00:00:00 grep mpit
[mpiteam@svbu-mpi013 2007-01-24]$
}}}

Note the slurm script to start mtt, the mtt itself, and the mpirun that is a child of mtt (I'm not sure what that other defunct [sh] is... a problem for a different ticket).  The MPI process was completely done -- no trace of mpi2c++_test on any of the nodes in the job.  So clearly the mpirun is hung (also a different problem for a different ticket).

In !DoCommand.pm, there's the Big Loop around select() and watching for the timeout.  I puzzled over the code for a while trying to figure out how it could loop forever and not hit the timeout check in the latter half of the block.  I came to the conclusion it couldn't, so I don't know how it could get stuck in this loop ('''assuming''' that it ''is'' stuck in this loop).

So I manually killed the mpirun and got the following output:

{{{
*** Past timeout of 160 seconds by 35353 seconds
** Kill TERM didn't work!
** Kill TERM (more waiting) didn't work!
** Kill INT didn't work!
** Kill INT (more waiting) didn't work!
** Kill KILL didn't work!
*** Past drain timeout; quitting
*** WARNING: Test: mpi2c++_test, np=16, variant=1: TIMED OUT (failed)
}}}

That tels me that it was either hung in the select (i.e., the value of the $t argument was wrong in the call to select() or select() ignored the $t value and never exited after the timeout), or it hadn't made it into the select()/loop yet somehow (which, i'm not sure how that would happen, either).  So it seems to be one of several not-supposed-to-happen cases -- I have no clue.  :-( ",1169752609,1169766162,critical
198,defect,emallove,jsquyres,v3.0,closed,invalid,Reporter seems to be caching results incorrectly,"The reporter sometimes seems to be displaying the wrong results.  It ''seems'' to make the assumption that you will only navigate through the results in one direction -- never go back to a prior screen and do multiple different drill-downs from a common ancestor.  For example:

 1. Go to a daily summary (e.g., click on the ""Summary"" button in the nightly e-mail)
 1. Click on ""cisco"" to see just the cisco results.
 1. Click ""back"" in your browser.
 1. Click on any other organization to see just those results.
 1. You'll get a page saying that there were no results to display.

I'm guessing that this was done for caching / performance reasons (especially since our all-phase summary table query is soooo slow), but this clearly violates the Law of Least Astonishment.  :-)",1170688010,1186682348,major
199,defect,emallove,jsquyres,,closed,fixed,Sometimes nightly mails don't arrive,"The nightly e-mails have been sporatic over the past week or so.  Ethan made some tweaks recently that should have helped, but they don't seem to always work.  For example, this morning, I ''only'' got the summary e-mail -- no stderr or failure e-mails.",1170688087,1179947502,major
200,defect,jsquyres,jsquyres,v3.0,closed,fixed,Add &weekday_name() and &weekday_index() funclets,This will allow having INI files that are driven by the day of the week.,1171836893,1186682348,major
201,defect,,jsquyres,,closed,fixed,"Add &mpi_get_name(), &mpi_install_name(), &test_get_name(), &test_build_name, and &test_run_name() funclets","Add functlets to get the simple section name of all prior phases that are involved in the current execution.

This allows parameterizing off the version of MPI, for example (e.g., Open MPI v1.1.x cannot handle heterogeneous multi-rail IB, but Open MPI v1.2.x can -- so it would be good to be able to parameterize the MPI Details section's MCA parameters off which version of OMPI we're testing [i.e., what MPI Get section it came from]).",1171837040,1179947502,major
202,defect,,jsquyres,,closed,fixed,Have hostname(s) reported explicitly,"Right now, the only way to get the MTT reporter to show which hosts were used in a given test is to hijack the platform_name field in the INI file.  I currently have something like the following in the Cisco INI file:

{{{
mttdatabase_platform = &if(&eq("""", ""&shell(""env | grep SLURM_NODELIST | cut -d= -f2"")""), ""Cisco development cluster"", ""&shell(""env | grep SLURM_NODELIST | cut -d= -f2"")"")
}}}

which covers a variety of situations.  But this no longer works for me because I run MPI get/MPI install/Test get/Test install on a single node in my cluster, and then do all Test runs on a set of nodes.  So what is shown in the reporter is the single node from all the compiling -- the nodes where I run are not shown.  This is important because false failures are sometimes caused because of individual nodes -- so the diagnosing of failures needs to include the host name(s) where the tests actually ran.  

More specifically, the DB schema needs to acknowledge that each reported phase may run on different host(s).  I'm not sure if it already handles this or not, but in the reporter, even for ""test runs"", I only see the hostname where the build occurred (for the platform name).

Additionally, I see that there ''is'' a hostname field in the reporter, but it is currently set to ""bogus"" (at least for all the Cisco entries).  There may already exist a hostname functionality in the client, but it may need to be fixed.  It may also be useful to have a funclet to get the hostnames (similar to &env_max_procs(), so that it understands different resource managers, etc.).",1172145977,1179947502,major
203,enhancement,emallove,emallove,v3.1,closed,fixed,"Provide a ""percentage of failed"" threshold parameter for entire sections",Occasionally there's a non-MPI issue that wreaks havoc on an MTT run which incurs a zillion Test Run failures.  There should be a parameter where users can tell MTT to abort if a certain percentage of tests fail (see also #182).,1172271167,1213977800,major
204,enhancement,jjhursey,jsquyres,v3.0,closed,fixed,Start keeping historical stats on MTT,"It might be interesting to keep data on the following information over time:

 * Number of organizations per day that submitted
 * Total number of tests run per day (probably also broken out into pass, fail, skip, timeout)
 * Database size (# rows, # bytes, ...anything else meaningful)
 * ...?

This information could probably be seeded by mining the current database and then running a short cronjob after midnight to tally up the stats for the previous day.  These numbers could then be dumped into a separate database just for historical tracking.  Extra bonus points for showing pretty graphs of this data over time.",1172278065,1190118318,minor
205,defect,jsquyres,jsquyres,v3.1,new,,Move all resource manager funclets to modules,"The Values/Functions.pm file is getting ''really'' long.  A logical first step would be to move all the resource-manager-related functions out into their own plugin modules.  This will also allow us to add/manage more resource managers a bit more easily.

As a first cut, I'm guessing this entails the following:

 * Make the directory lib/MTT/ResourceManager/
 * Make <foo>.pm files in there, one per resource manager (e.g., SLURM.pm, Torque.pm, ...etc.).
 * Move the *_job(), *_max_procs(), *_hosts() functions out of Functions.pm and into these plugin files.
 * Make &env_max_procs(), &env_job_name(), and &env_name() be wrappers around the back-end plugin functionality
 * Add infrastructure to load up the modules, select which one to use, and any other relevant setup for &env_max_procs() and friends",1172325382,1189537310,major
206,defect,jsquyres,jsquyres,v3.1,new,,What timestamps is the text reporter reporting?,"Bill D'Amico reported that the text files that the text reporter is generating are ""odd"".  Here's an example:

{{{
start_timestamp: Tue Feb 27 04:02:34 2007
command: mpirun -np 16 --mca btl openib,self --prefix /home/mpiteam/scratches/YqiI/installs/XPcx/install src/MPI_Initialized_f
duration: 1 seconds
exit_signal: -1
exit_value: 0
mpi_install_section_name: ompi/intel 9.1
mpi_name: ompi-nightly-trunk
mpi_version: 1.3a1r13805
mtt_version_major: 2
mtt_version_minor: 1
np: 16
phase: Test run
result_message: Passed
RESULT_STDOUT_BEGIN
MPITEST_INFO (         0): Starting test MPI_Initialized
MPITEST_results: MPI_Initialized all tests PASSED (        32)
RESULT_STDOUT_END
start_timestamp: Tue Feb 27 06:09:08 2007
test_build_id: 8807
test_name: MPI_Initialized_f
test_result: 1
variant: 4
}}}

Note that there are 2 ""start_timestamp"" values in there.  One appears to (probably) be the beginning of the MTT client run.  The other is likely when the test was actually run.

Need to clarify what those timestamps are and get them labeled better.",1172628308,1189537320,major
207,enhancement,,jsquyres,v3.1,new,,Multi-level defaults in INI file,"It would be nice to be able to have a multi-level system of value lookups in the INI file, perhaps something like this:

 1. Look up the value for the ""foo"" field in the particular section that is running (e.g., ""Test run: ibm tests"")
 1. If not found, look in a generic section for that phase (e.g., look for a ""foo"" value in a ""Test run"" section -- if it exists)
 1. If not found, look in the global ""MTT"" section
 1. If not found, use the default",1172675058,1172675058,major
208,enhancement,,jsquyres,v2.1,closed,fixed,Add ability to specify scratch directory in INI file,"It would be convenient, especially for #9, to be able to specify the scratch directory in the ini file.  It's then one less thing you have to specify on the command line.",1172677030,1175797753,critical
209,defect,,jsquyres,v2.1,closed,fixed,"""No-op"" MPI get and MPI install modules","Towards #9, provide some ""no-op"" MPI get / install modules that will allow running MTT against an MPI that is already installed (i.e., not under the scratch directory).

 * Should include ability to point to a specific MPI installation (e.g., provide a prefix)
 * Should include ability to find the relevant stuff in the user's $PATH
 * Provide some new funclets to try to divine the compiler used to compile the MPI, what version the MPI is, etc.
",1172677190,1178729424,critical
210,defect,emallove,emallove,,closed,fixed,reporter.php is apallingly slow,"With nearly 3 million test results in the database now, reports are taking an upwards of 7 minutes to load.   A short-term solution to this problem is to keep an ''n-day'' sliding window of data in a set of ''speedy'' tables.  The archive tables contain ''all'' the MTT results (which date back to November 2006).  Long-term, the database schema should be fixed to allow for a larger sliding window (or maybe to eliminate the speedy tables all together).",1172766999,1179947502,major
211,defect,jsquyres,jsquyres,,closed,fixed,Allow multiple proxies to be specified in INI file,"Multiple proxies should be able to be specified in the INI file that will control ''all'' of MTT's non-local network activity:

 * SVN checkouts
 * HTTP downloads
 * FTP downloads
 * MTTDatabase Reporter

Should be able to specify the following fields in the MTT global section in the INI file:

 * http_proxy
 * https_proxy
 * ftp_proxy

Each of these can be a comma-delimited list of valid proxies.",1172959933,1179947502,major
212,defect,jsquyres,jsquyres,,closed,fixed,Generic network locking server,"Implement a simple network locking service that will allow us to implement tickets #121 (make MTT client meta data directory be able to be multi reader/writer save), #211 (allow multiple proxies -- particularly for the SVN HTTP[s] proxy, which is located at $HOME/.subversion/servers), and #167 (wrapper for MTT client parallelism). 

The server has the following requirements:

 * Allow multiple simlutaneous clients
 * Each client can request a lock by string name (locks do not have to be predefined to the server -- if a client asks for the ""foo"" lock and no one else has a lock named ""foo"", then it is granted)
 * When the lock becomes available, the network server replies with a ""granted"" message (i.e., the client request blocks until it gets the lock)
 * Automatically release stale locks (e.g., if a client dies, all of its held locks should automatically be released)

There's two ways this could be implemented:

 1. As a small perl script that organizations can run on some internal server.  It listens on a TCP port which is specified in the MTT client INI file.  Whenever the client needs to do something that requires a lock (e.g., read/write meta data on a filesystem shared by multiple, simultaneously-running MTT clients), it contacts the server and asks for it.  If no one has the lock, it's granted immediately and the client continues.  If someone else has the lock, the client blocks until the other process releases the lock and the server grants it to the next requesting proces.  Random sub points:
   * Locks can be assigned by simple string name (e.g., request the ""svn servers file"" lock)
   * The server should be a single process for locking simplicity (i.e., not multi-threaded and not multi-process)
   * If a socket is disconnected, all of the locks held by that socket should be released
   * The server will need to select() (or poll() or something similar) on accepting new connections, dropping old connections, and answering incoming un/lock requests
   * The server can set all sockets to blocking and avoid dealing with partial messages
   * Each cluster at an organization that runs mutliple simultaneous MTT clients can run a lock server, thereby automatically creating a narrow scope for all the locks granted on a per-cluster basis (i.e., shared filesystem, as opposed to ''all'' MTT access in an entire organization -- which may be overkill and unnecessary)
 1. The existing MTT database server could have a table created for locks, and the existing PHP infrastructure could be extended to effect the locking semantics.  This avoids the need to create another network daemon.  Some random points:
   * Latency may be an issue, and this pretty much definitely won't work in fully disconnected scenarios.
   * HTTP semantics will be an issue -- we can't keep sockets alive for 2-way communication (a client can query the server and get an answer, but then it has to make a new connection to query again).  Because of this, stale locks may become a problem (i.e., if a client dies/crashes/whatever while it holds locks, there's no way to easily know that we can safely remove the locks from the server).
   * The repeated HTTP requests may be tagged as malicious activity (similar to how submitting ''every'' test run result was tagged as malicious activity).

Based on this writeup, option 1 seems like the obvious choice (option 2 included for completeness).  

So I think we need a thin lock server, perhaps perl-based.  If it's specified in the MTT section in the client, it'll be used for locking semantics.  If it's not specified, all locks in the client will be no-ops.",1172961139,1179947502,major
213,defect,emallove,jsquyres,v3.0,new,,Change timezone doesn't update query,"When you change your timezone in the preferences, it doesn't shift the time of your current query accordingly (i.e., the date/time of your query stays the same as it was, so you end up getting different results).",1173360606,1202224476,major
214,enhancement,jsquyres,jsquyres,Future,new,,Find and backtrace corefiles,"It would be most helpful for MTT to find an analyze corefiles at each test run.  

Specifics TBD, but something along the lines of:

 * A Test Run executes
 * MTT looks for new corefiles
 * If any are found, it generates a backtrace from the corefile and puts it somewhere (in the stderr output, perhaps?  or perhaps a new DB field?)
 * Optional settings to:
    * Move corefiles somewhere specific (e.g., some other directory)
    * Remove corefile
    * Leave corefile alone",1173392298,1189537448,major
215,defect,,jsquyres,v3.1,new,,Simple test specify module: include and exclude,"Add new [sub] fields to Simple test specify module:

 * '''tests_include:''' specifically include these tests (''tests'' can probably be considered a synonym for this field)
 * '''tests_exclude:''' specifically exclude these tests

If ""exclude"" is specified, it will remove tests that were specified.  This allows the behavior of using a shotgun approach to find all available tests, but then specifically exclude a small number of them (for whatever reason -- e.g., a certain version of MPI is known to fail a specific test, or somesuch).",1173393232,1189537344,major
216,defect,emallove,jsquyres,v2.1,closed,fixed,New Text reporter hosed on Linux,"{{{
*** ERROR: Module aborted during require: MTT::Reporter::TextFile: Can't
    locate Clone.pm in @INC (@INC contains: /home/jsquyres/svn/mtt/lib
    ...lots of dirs....
    /usr/lib/perl5/vendor_perl .) at
    /home/jsquyres/svn/mtt/lib/Hash/Merge.pm line 66, <GEN2> line 1.
    BEGIN failed--compilation aborted at
    /home/jsquyres/svn/mtt/lib/Hash/Merge.pm line 66, <GEN2> line 1.
    Compilation failed in require at
    /home/jsquyres/svn/mtt/lib/MTT/Reporter/TextFile.pm line 25, <GEN2>
    line 1.
    BEGIN failed--compilation aborted at
    /home/jsquyres/svn/mtt/lib/MTT/Reporter/TextFile.pm line 25, <GEN2>
    line 1.
    Compilation failed in require at (eval 93) line 3, <GEN2> line 1.
}}}",1173404982,1173479080,blocker
217,defect,,jsquyres,v3.1,new,,Funclet for detecting MPI_ABORT-terminated tests,"Periodically, something outside of MTT causes a bunch of tests to fail.  But some of tests will be marked as ""pass"" because we have the ""pass"" condition in the INI file as ""does not return 0"".  For example, the following intel tests are ''supposed'' to fail:

 * MPI_Abort_c
 * MPI_Abort_f
 * MPI_Errhandler_fatal_c
 * MPI_Errhandler_fatal_f
 * MPI_Finalize_c
 * MPI_Finalize_f

However, ""fail"" in this case means ""invoke MPI_ABORT to terminate the MPI job"".  Our current implementation of this is to simply check for a nonzero return code from the test, but this is not sufficient.  It would be better if we had a funclect that could actually detect that MPI_ABORT was used to terminate the job and use that for the ""pass"" condition of these tests.  This would reduce the number of false passes.",1174055053,1189537350,major
218,defect,emallove,emallove,v2.1,closed,fixed,"Large ""Test Run"" submissions are getting dropped by submit.php",Bill (from cisco) noticed that no Intel tests are showing up for Cisco in `reporter.php`. This occurred when their `MPI Details` section `mpirun` multiplier went from 6 to 9 (so from 2800 tests to 4200 tests per `[Test Run: intel]` section). Could it be that [source:/trunk/server/php/submit/index.php submit.php] is choking somehow on the large number of tests? Cisco will set `mttdatabase_keep_debug_files` to `1` in their INI file and this will need to be tracked down using the debug file that goes with the Intel test runs.,1175721857,1176314203,critical
219,defect,,emallove,v3.1,new,,`$MTT::Test::runs` gets corrupted on a multiple-INI file run,"It looks like `$MTT::Test::runs` is getting corrupted somehow when multiple INI files are used. `Dumper($MTT::Test::runs)` in `Trim` (see [source:/trunk/lib/MTT/Trim.pm Trim.pm]) shows the following:

{{{
$MTT::Test::runs = $VAR1 = {
  'workspace' => {
    '1.2.1r14096-ct7b030r1838' => {
        'workspace' => {
          'trivial' => {
            'trivial' => {
              '' => 1,
              'f77_hello' => {
                '2' => {
                 'mpirun ...
}}}

Where did this NULL key=value pair come from?
{{{
              '' => 1,
}}}

It results in this fatal error from Trim.pm:
{{{
Can't use string (""1"") as a HASH ref while ""strict refs"" in use at .../trunk/lib/MTT/Trim.pm line 113.
}}}

I've only seen this when using two INI files in a single MTT run.
{{{
$ client/mtt -f file1.ini -f file1.ini
}}}

Which begs the question: is accepting multiple INI files a ''needed'' feature? One could get the same effect using e.g., `xargs`, wrapper scripts, etc.

{{{
$ cat ini_file_list.txt | xargs -i -t client/mtt -f {}
}}}

(Workaround: `--no-trim`)",1175789530,1189537360,major
220,enhancement,,emallove,v3.1,new,,Add a --rerun switch,"It would be useful, especially for `AlreadyInstalled`, to be able to re-run a subset of tests from a previous run. E.g., re-run all tests from the last run that failed or timed out. The user could invoke it like this:

{{{
$ client/mtt --rerun fail ...
}}}

Note: this would require that we ''always'' cache test results.",1176311560,1176311560,major
221,defect,emallove,emallove,v3.1,new,,Split up large database submissions into smaller pieces,Large test run submissions should get split up so that the PHP memory limit does not need to be increased from 16MB to 32MB in [source:/trunk/server/php/submit/index.php submit.php]. (see also #218),1176320948,1176320948,major
222,defect,jsquyres,jsquyres,v3.1,new,,Remove deprecated fields from MPI Install phase,"Many fields were moved from the MPI Install phase down into the OMPI.pm module (where they belong) in r674, but we intentionally left the old names in place for backwards compatibility for a while.

These names should be removed in a future version.",1176479368,1179949845,major
223,defect,jsquyres,jsquyres,v2.1,closed,fixed,&slurm_hosts() needs to return a comma-delimited list of hosts,The &slurm_hosts() funclet currently returns the native SLURM hostlist regexp.  It should return a comma-delimited list of hosts.,1176905921,1176949367,major
224,defect,emallove,jsquyres,v3.1,new,,Create ORTE-specific tests,"Create a new test suite to run under MTT that tests the following (this is a first set of tests; they will likely be expanded over time):

 * specific process placement: 
    * Use MTT env_hosts() funclet to get a comma-delimited list of hosts that you can use
    * Launch across the following patterns, ensuring that you actually get the right answer:
      * Launch on each node in the list individually
      * Launch on two random nodes.  Do the test twice, ensuring to get a different pair each time.  Obviously skip this test if you don't have more than 2 nodes.
      * Repeat for three random nodes.
      * Repeat for four random nodes.
      * Launch on any individual node multiple times, (e.g., ""mpirun --host foo,foo hostname"")
 * Run a test that will never exit and try to kill it in a variety of different ways
   * Kill mpirun with different signals
 * Compile an application in 32/64 bit and ensure that the output executable is a 32/64 bit executables (which ever is appropriate)
 * stdin redirection (i.e., ""mpirun read_stdin SIZE < big_text_input_file"", where SIZE is the number of bytes to read)
   * VPIDs > 0 should get no stdin
   * VPID == 0 should get stdin
   * SIZE should be 0 (indicating don't read anything from stdin), a positive integer (indicating to read that many bytes from stding), or -1 (indicating that stdin should be drained)
 * test the oob_tcp_listen_thread mode: set it to ""listen_thread"" or don't set it all
 * check for kruft left on the compute nodes
   * Run a variety of tests (jobs that complete successfully, jobs that call MPI_ABORT/orte_abort, jobs that segv, ...etc.)
   * Go out to each comput node and look for things that should not be there: orted, the launched job, session directory, etc.
 * Test orterun's environment variable exporting capabilities: use the -x option to orterun and ensure that those environment variables actually show up in the started process environments
 * Run a simple/short job N times (or for N length of time) and ensure that it works fully every time.  The idea is to launch as fast as possible (but in a blocking manner) and ensure that it works continuously.  Check for failures and leftover kruft ''after'' all runs have completed / time limit has expired / etc.

Some of these tests will likely be bootstrapped with MPI calls.  We can someday replace them with 100% ORTE equivalents.",1176919530,1190468400,critical
225,enhancement,,emallove,v3.1,new,,Pass Perl code to funclets to extend funclet parameters,"Jeff divined a bit of MTT INI syntactic sugar today that may already be in place. That is, passing an anonymous hash to a funclet. The below INI syntax should work because funclet arguments are simply `eval`'d. E.g., specify specific directories to search for executables:

{{{
find_executables({wildcards => ""*.foo"", dirs => ""foo,bar,baz""})
}}}

Use a Perl built-in sub-routine such as `glob`:

{{{
find_executables(glob ""*.foo"")
}}}

The purpose of this ticket would be to test out a use case of this feature.",1176924568,1176924568,minor
226,defect,emallove,emallove,v3.0,closed,fixed,Advanced menu filters do not carry over in drilldown reports,"Bill caught this one. E.g., do an `Advanced` filter, click a colored result count square, and the results are often not what you'd expect because the Advanced filter has been erroneously cleared.",1177101076,1188324256,critical
227,defect,,jsquyres,v3.0,closed,fixed,"""Stop all testing and submit what you have now"" feature in MTT client","Add a feature to be able to signal a currently-running MTT client (perhaps via the presence of a sentinel file?) to tell it to stop running all tests and submit whatever results it's got now.  This is helpful for MTT runs that end up running [a lot] longer than expected - you want to kill MTT to get resources back, but you don't want to lose the results of the tests that it has already run.

This should probably done in conjunction with at least some of the functionality from #158 (i.e., cache all results with a clean/dirty bit indicating whether the results have been successfully submitted yet).  I mention this because the current MTT client does ''not'' cache all results data -- it caches meta data about what has already run, but not specific results data.",1177430575,1187272458,major
228,task,,emallove,Future,new,,Make MTT conform to POSIX 1003.3 (test framework standard),A POSIX test framework standard exists (POSIX 1003.3) that we may want to consider looking into someday.,1177444478,1187616501,minor
229,enhancement,,jsquyres,v3.0,closed,worksforme,"If a test is to be skipped, don't run pre and post exec","If the MTT client is going to skip a test, we should also not run the before_each and after_each steps.

This is just a timesaver.",1177533709,1188481618,major
230,defect,jsquyres,jsquyres,v2.1,closed,fixed,wrap() function does not handle large strings well,"After much trial and error, we figured out that some ""hung"" submits from Cisco were actually due to the fact that Verbose() or Warning() were being invoked with ''enormous'' string (e.g., close to 10MB strings).  The wrap() function that is used inside all the MTT::Messages functions apparently handles strings of such size very poorly.  

Best guess is that it's just trashing trying to prettyprint the string properly -- it seems to hang, but is taking up 100% of the CPU.  So it would probably finish ''eventually'' -- but we've let it run for many hours (over 24) with the 10MB string and it hadn't output anything yet.

So we need to update MTT::Messages to simply avoid calling wrap() for Very Large Strings.",1177541645,1177681187,blocker
231,defect,jjhursey,jsquyres,v3.0,closed,fixed,"Add ""description"" field to MTT submissions","In talking with Mellanox, it seems like it would be good to add a general ""description"" field where clients can submit any arbitrary information that they want, such as:

 * OS driver version (e.g., IB driver)
 * NIC firmware version
 * ...etc.

This field can be at a relatively coarse-grained level; it does not need to be for every test.  Perhaps at the submission level (e.g., in the Reporter section in the INI file)...?

The data in these fields needs to be searchable, too -- meaning that this is not just a DB schema change, but also a reporter.php change.",1178111108,1187273962,critical
232,enhancement,emallove,emallove,,closed,fixed,Extend search capabilities of reporter to support NOT operator,"We need to be able to search the MTT results using a NOT operator. This is especially useful when we are trying to find a small number of uncommon failures amongst a plethora of like failures (e.g., when there are thousands of failures with identical messages on STDOUT).",1178227868,1179947502,major
233,enhancement,emallove,emallove,v3.1,new,,Add debugging options to the web interface,"Various debugging options (see below) are easy to turn on in [source:/trunk/server/php/reporter.php the reporter], but are cumbersome to turn off because one needs to find them buried in the mile-long query string to manually change them.

{{{
#!php

            ""sql""            => ""SQL"",
            ""cgi""            => ""Display input selections"",
            ""stats""          => ""Display query statistics"",
            'debug'          => ""Debug"",
            'explain'        => 'Use EXPLAIN',
            'analyze'        => 'Use ANALYZE',
            'no_cache'       => 'Turn off SQL caching',
            'no_cookies'     => 'Turn off cookies',
            'dynamic_view'   => 'Create the SQL VIEW dynamically',
            'use_speedy'     => 'SELECT only FROM ""speedy"" TABLEs',
            'use_archive'    => 'SELECT only FROM ""archive"" TABLEs',
}}}",1178229532,1189537517,minor
234,defect,emallove,emallove,,closed,fixed,force should be settable in the INI file,"It's essential for `--force` to be settable in the INI file for #9. It makes little sense for a developer to ''not'' run MTT using `--force`. With this enhancement, developers can put `force = 1` in their INI file and not think about it again.",1178307476,1179947502,major
235,defect,emallove,emallove,,closed,fixed,Quote characters need escaping when used in Javascript popup windows,"A Javascript error will occur in the `popup_html()` function (see [source:/trunk/server/php/screen.inc screen.inc]) if, for instance, a search for `""` is done on stderr.",1178548106,1179947502,major
236,enhancement,,jsquyres,v3.1,new,,Graphical timeline of events,"When searching through MTT logs looking for the cause of failures, it would be really helpful to be able to see a graphical timeline of events for one or more tests.  Perhaps it could be a cherry-pick of tests; extra bonus points if the selection could cross mulitple phases, such as ""show me all the tests from cisco from last night"", which would show me ''all'' the tests from my entire development cluster, even those that were running at the same time.

Perhaps the display could be a web page something like a day planner / calendar view -- the timestamps are along the left edge of the screen: starting at the first timestamp and ending at the last timestamp (keep all the timestamps in one column -- don't do multiple columns for multiple days).  Then have events shown as ""bubbles"" spanning from their start time to their end time.  Concurrent / overlapping events can be shown next to each other.  Events that are part of a single sequence ID (i.e., from a single MTT run) can probably be shown in a single column, indicating that they are ""together"".  Bubbles can be colored green, yellow, and red to represent pass, skip/timeout, and fail, just like the rest of the MTT results.

Columns and individual tests should be briefly labeled in the overall display, but clickable to get more information (e.g., information about the whole column and information about the individual test).

This would be '''really''' helpful when tracking down failures that are due to equipment failures or other external factors.  For example, we could tell that our network died from 8:03-8:17pm last night because ''all'' tests failed on nodes X through Y in that timeframe.",1178738218,1190469004,major
237,defect,,jsquyres,v3.1,new,,Add code coverage support to MTT,"It would be great if MTT could also [optionally] report on code coverage from the tests that it runs.  For example, source MPI implementations could be compiled with particular parameters to enable code coverage reports, and then those reports could sucked into MTT for display in the reporter.  Extra bonus points for tying specific failures/timeouts with code coverage reports in some meaningful way.",1179149338,1190469705,major
238,defect,emallove,jsquyres,v2.1.1,closed,fixed,Perf results count wrong in reporter,"http://www.open-mpi.org/mtt/reporter.php?do_redir=196

Shows a result row with 14 perf tests.  But if you click on the 14, you're taken to another screen that shows 45 perf results ''and'' 31 passes that did not show up in the original screen.  Clearly, the mismatch between the number of performance results doesn't seem right.  Are the passes supposed to show up?

I unfortunately do not remember the exact sequence that I used to get to that query -- it was a drill down from a ""past 24 hours"" summary table.",1179714453,1187272967,major
239,defect,emallove,emallove,v3.1,new,,Graph IMB Barrier tests,"[http://www.aditus.nu/jpgraph/ JpGraph] errors out when each row in the summary table contains only a single plotted point (e.g., IMB's `Barrier` test).  Usually there's at least two points that can be rendered as a line connecting the points.  For example, the data for a `Barrier` report might be something like:

{{{
#mpi-rev    #repetitions  t_min[usec]  t_max[usec]  t_avg[usec]
1.3a1r14702    1000       125.25       125.26       125.26
1.3a1r14702    1000        63.49        63.50        63.49
1.3a1r14715    1000        63.12        63.13        63.12
1.3a1r14715    1000       125.74       125.75       125.74
}}}

`reporter.php` should catch on that there's only one point per Summary table row, and render another type of graph (e.g., a bar graph). Or at least error out more gracefully than spitting out this error:

{{{
JpGraph Error: A plot has an illegal scale. This
could for example be that you are trying to use
text auto scaling to draw a line plot with only
one point or that the plot area is too small. It
could also be that no input data value is numeric
(perhaps only '-' or 'x')
}}}

",1179857562,1189537367,major
240,defect,emallove,emallove,v3.0,closed,invalid,"Archived test cases that are refreshed should be in the ""speedy"" tables","If an MPI Install, Test Build, or Test Run is a week old, but is re-run, it does not appear to be kept in the speedy tables. This is confusing because one may see recent results (keyed to an archived MPI Install), but only if they filter on ""8 or more days ago"" (since the ""speedy"" window is 7 days). A workaround is to do the following:

 1. Click the `MPI Install` button
 1. Filter the date range farther back than 7 days (the ""speedy"" window is 7 days)
 1. Drilldown on the MPI versions you want to look at
 1. Lastly, look at Test Runs of those MPI versions

Doing the above steps is essentially a ''speedier'' way to query the archive tables, because MPI Install-only reports generate faster than any report JOINing on the `test_run` table. Then, the Test Run reports generate faster when with more filters (`start_timestamp` and `mpi_version` in the above use case).",1180622679,1186682348,minor
241,enhancement,emallove,emallove,v2.1.1,closed,fixed,"Add support for unrestricted, non-multiplicative variable substitution","Variable substitution is restricted to the `MPI Details` `exec` parameter using `@var@` syntax (which incurs a mulitplicative effect). It would be useful to allow non-multiplicative variable substitution in other INI parameters using dollar-sign syntax. E.g., 
{{{ 
param = $var
}}}

where `var` is an INI param in the same INI section as `param`.",1181316844,1181861594,major
242,enhancement,,emallove,v3.1,new,,"Add ""filter groups"" feature","Currently there are a few ways to filter sections
for an MTT run:

 * Hardcode a nonsense string before the phase ID string in
    the section name. E.g., `[SKIP Test run: some test suite]`
 * The `--[no-]section` option (see [wiki:SectionFilter] or
   `client/mtt --help`)
 * Split out sections of the INI file into separate INI files, and cat the files
   into `mtt`. E.g., `cat trivial.ini intel.ini ibm.ini | client/mtt ...`

What about having the ability to group sets of filters.
E.g., say you have several different types of MTT runs:
    1. !RunType1
    1. !RunType2
    1. !RunType3

    1. For !RunType1, you run want to run `trivial` and `intel`. 
    1. For !RunType2, you run want to run `ibm`, `intel`, and `imb`. 
    1. For !RunType3, you want to run everything but `mpicxx`.

To be more concrete, the !RunType's might be something like:
 * Nightly, Weekly, Monthly
 * multithreaded, non-multithreaded
 * small-cluster,medium-cluster,large-cluster
 * ?

What would the best way to express such a filter in the INI?
How about something like this:

{{{
[Test run: trivial]
run_in_group = RunType1,RunType3
...

[Test run: intel]
run_in_group = RunType1,RunType2,RunType3
...

[Test run: ibm]
run_in_group = RunType2,RunType3
...

[Test run: onesided]
run_in_group = RunType3
...

[Test run: mpicxx]
run_in_group =
...

[Test run: imb]
run_in_group = RunType2,RunType3
...

[Test run: netpipe]
run_in_group = RunType3
...

}}}

`mtt` could then be invoked with the applied filters like so:

{{{
$ client/mtt --run-group RunType1
$ client/mtt --run-group RunType2
$ client/mtt --run-group RunType3
}}}",1181331488,1189537461,major
243,defect,emallove,emallove,v3.0,closed,fixed,"Drilldowns on ""trial"" column do not work","Drilldowns on `trial` column do not work. I see `text_trial = ^t$` in the query string, but for some reason it is not effecting the needed `WHERE` clause to actually filter the results on `trial`.",1181662317,1189983823,major
244,defect,emallove,emallove,v3.0,closed,fixed,&get_sun_cc_version is broken,"`&get_sun_cc_version()` is broken. It ''did'' work :-\  Guess it's back to my trusty old home-grown `&shell(""get_sun_cc_version"")` for now. This minor regression seems to have crept in around 4/18.

http://www.open-mpi.org/mtt/reporter.php?do_redir=221

The compilers themselves look like they've been unchanged for over a year now:

{{{
$ ls -l /ws/ompi-tools/SUNWspro/SOS10/bin/cc
lrwxrwxrwx    1 nobody   nobody         14 Mar 23  2006 /ws/ompi-tools/SUNWspro/SOS10/bin/cc -> ../prod/bin/cc
$ ls -l /ws/ompi-tools/SUNWspro/SOS10/bin/../prod/bin/cc
-rwxr-xr-x    1 nobody   nobody     232984 Nov 29  2005 /ws/ompi-tools/SUNWspro/SOS10/bin/../prod/bin/cc
$ ls -l /ws/ompi-tools/SUNWspro/SOS11/bin/cc
lrwxrwxrwx    1 nobody   nobody         14 Mar 23  2006 /ws/ompi-tools/SUNWspro/SOS11/bin/cc -> ../prod/bin/cc
$ ls -l /ws/ompi-tools/SUNWspro/SOS11/bin/../prod/bin/cc
-rwxr-xr-x    1 nobody   nobody     239032 Oct 13  2005 /ws/ompi-tools/SUNWspro/SOS11/bin/../prod/bin/cc
}}}",1181673229,1188598805,minor
245,enhancement,,emallove,v3.0,closed,fixed,Support multiplicative effect for other INI params,"It would be useful to be able to get a multiplicative effect
out of more than just the `exec` parameter. E.g., the
ability run tests against a few environments:  

{{{
setenv = @envs@
envs = &enumerate( \
    ""FOO BAR"", \
    ""ABC 123"", \
    ...)
}}}

E.g., `configure` with a few different arguments:

{{{
configure_arguments = CC=cc @args@ ...
args = &enumerate( \
    ""--enable-with-threads=solaris"", \
    ""--enable-with-threads=posix"", \
    """",  \
    ...)
}}}",1181682706,1207154502,major
246,enhancement,,emallove,v3.1,closed,fixed,"Add support for ""global phase sections""","This ''wish-list'' item is related to #245 in that it could make INI files more succinct and expressive. '''Global phase sections that contain parameters which apply to all phase sub-sections.''' E.g.,

{{{
[MPI Install]
foo = bar
abc = 123

[MPI Install: x]
...
[MPI Install: y]
...
[MPI Install: z]
...
}}}

The above would be a shorthand for the below:

{{{
[MPI Install: x]
foo = bar
abc = 123
...
[MPI Install: y]
foo = bar
abc = 123
...
[MPI Install: z]
foo = bar
abc = 123
...
}}}",1181683083,1195225173,major
247,defect,emallove,emallove,v3.0,new,,"Preferences (e.g., trial) are not [always] getting set in the query string","I had `Show trial runs` checked in `[Preferences]`, but I noticed in the query string that `trial` was not set to `on`. So the query string should mirror the cookie, unless the user's received a URL from someone else, in which case we don't set the receiver's cookie.",1182262067,1189716472,major
248,enhancement,emallove,emallove,v3.0,closed,fixed,Create a funclet that returns true if there is IB connectivity,This funclet would be useful for conditionalizing the `--mca btl` parameter in the `MPI Details` section and so forth.,1182279842,1190649855,major
249,enhancement,,emallove,Future,new,,Create a funclet that can query the MTT Database,"To be useful, this ticket requires an MTT daemon of some
sort. The daemon would be able to dispatch MTT client runs
based on what had been tested recently.

{{{
skip_section_if_true = \
         &db_query(""In the past 72 hrs, have I run with configuration XYZ?"")
}}}

It ''might'' be more efficient than a `crontab` such as 
this:

{{{
00 19 * * 1 client/mtt --section monday-tests ...
00 19 * * 2 client/mtt --section tuesday-tests ...
00 19 * * 3 client/mtt --section wednesday-tests ...
00 19 * * 4 client/mtt --section thursday-tests ...
00 19 * * 5 client/mtt --section friday-tests ...
}}}",1182373769,1182373769,major
250,defect,emallove,jsquyres,v2.1.1,closed,fixed,Reporter spewing many PHP warnings,"Per a long e-mail thread, the current reporter.php is spewing many many PHP warnings into the web logs on www.open-mpi.org.  Ethan said:

  I squelched those 10 mos ago, and somehow they're back:

  https://svn.open-mpi.org/trac/mtt/changeset/271",1182389238,1182442715,critical
251,defect,jsquyres,jsquyres,v3.1,new,,SVN access is serialized with MTTLockServer when using proxies,"The title is somewhat obvious -- the whole point of the lock server was to serialize access to writing/re-writing the $HOME/.subversion/servers file in the presence of proxies.

However, the problem is that when using the lock server with proxies, it serializes ''all'' Subversion access across all currently running MTT clients.  On the Cisco cluster, I can have 16 or more concurrent builds occurring, each of which will execute a pile of test get's that are all SVN checkouts.  They therefore all get serialized, meaning that some test get's can wait up to 10 or 20 minutes just waiting for the lock.  

There has to be a better way to do safe SVN proxy switching...",1182389590,1189537389,major
252,defect,,emallove,v3.1,new,,copy_tree failures in Test get should not result in a Test build failure,"A `copy_tree` failure in a Test get should result in the matching Test build sections getting skipped, not a Test build failure.

{{{
>> Phase: Test Get
   Started:       Sat Jun 23 21:04:14 2007
   Stopped:       Sat Jun 23 21:05:05 2007
   Elapsed:       00:00:51
   Total elapsed: 01:07:29
*** WARNING: Could not copy file tree .../sources/test_get__intel/intel_tests: 
*** WARNING: Could not find buildfile: all_tests_no_perf; skipping
*** WARNING: Failed to build test [test build: intel]: Could not find buildfile: all_tests_no_perf; skipping
}}}

Though it is useful to immediately know about a Test get failure, such failures should be emailed to the user, instead of logged as a Test build failure.",1182786248,1189537397,major
253,defect,jjhursey,emallove,v3.0,closed,fixed,Adjust client/server to work with the V3 database schema,"Various and sundry things that need to be done for the MTT
client/server scripts to function with the
[source:/trunk/server/sql/v3 v3] schema.

 * [source:/trunk/server/php/reporter.php reporter.php]
   (adjust `compose_sql_query()` / `compose_sql_view()`)
   * Must `JOIN` on `test_name` and `test_suite` (but only
     if they're part of the `WHERE` clause?)
   * If ''command'' is in `WHERE` clause, search on
     `dense_command`
   * Display '''command options''' (which is really a search on `dense_command`) in addition to (or instead of?) `command` in the query screen
   * Only show full `command` in Detail view
   * We will likely scrap the ""ttables"" (cached tables)
   * Remove {{{JOIN results ON (phase = 'x' AND phase_id = some_phase_id)}}} from `compose_sql_*`. We will not be JOINing `results` with phase tables anymore, since all of results' columns are part of the phase tables
 * [source:/trunk/server/php/submit/index.php submit.php]
   * The tree of `TABLEs` is shallower now. All the *_id's
     get tied to phase tables ...
   * Incorporate `test_name`, `test_suite`, and
     `description` into `INSERT` commands
 * MTT client
   * Submit `endian`, `bitness`, and `vpath` fields as a Postgres
     `bit(*)` string
",1184254071,1190473199,critical
254,enhancement,,emallove,Future,new,,"Provide an ""mtt_cache"" parameter in the [MTT] section","It could be useful to be able to specify a location ''outside'' of the scratch directory to store MTT cache data so users could `rm -rf` their scratch directory while still getting the benefit of having MTT keep track of what has been tested. Currently, it would require knowing some MTT internals (e.g., an understanding of where the `mpi_installs.dump`, `test_builds.dump`, and `test_runs.dump` files are) to accomplish this.",1185374058,1185374058,minor
255,defect,jjhursey,jjhursey,v3.0,new,,V3 Reporter Timezone changes,"To aid in speed up the cast to GMT has been eliminated. The Reporter used to submit the {{{start_timestamp}}} as:
{{{
CAST(start_timestamp as TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'GMT'
}}}

We currently remove the cast, and use a plain {{{start_timestamp}}} which will affect timezone usage in the Reporter.

The optimal solution will likely be something like the following:
Have the Reporter do the appropriate shift of the date for the timezone in question with respect to GMT (which the {{{start_timestamp}}} is reported in) before and after submitting the query to the database.
",1186406508,1202224457,major
256,defect,,emallove,v3.0,new,,Column show/hide menu selections are not carried over on drilldown reports,"Drilldown links seem to revert show/hide menu selections to their defaults, which is a violation of the ''principle of least astonishment''.

",1186507461,1186507461,major
257,defect,jjhursey,jjhursey,v3.0,closed,fixed,Normalization on test_run parameters,"This ticket combines and adds to tickets #26 and #27.

The database schema has the ability to normalize on how an application was run. This adds four new fields to the database:
{{{
    -- mpirun, mpiexec, yod, ...
    launcher            varchar(16) DEFAULT '',
    -- Resource Manager [RSH, SLURM, PBS, ...]
    resource_mgr        varchar(32) DEFAULT '',
    -- Runtime Parameters [MCA, SSI, ...]
    parameters          text DEFAULT '',
    -- Network [tcp,self or mx,tcp,sm,self]
    network             varchar(32) DEFAULT '',
}}}

The client needs to be adapted so it can tell the server (with some degree of certainty) what these values are.

Once the client is able to provide this information, the submit script can be adapted to store and process this information.
",1186600637,1187788149,major
258,defect,,jjhursey,Future,closed,fixed,Compare non-contiguous date ranges,"It is possible to get results from two types of runs (say threaded and non-threaded) by regular expression arguments to some existing reporter fields (i,e., configure arguments).

However it is currently not possible to compare two distinct date ranges. We should extend the reporter to effectively display such results.

We could extend the date specification to allow for a comma separated list of ranges: 
{{{
To compare results from July 20, 21, and 22:
  2007-07-20 - 2007-07-21,2007-07-21 - 2007-07-22,2007-07-22 - 2007-07-23
}}}

Then the reporter could make distinct summary tables for each range. Or something like that.
",1186600933,1226596270,major
259,defect,emallove,jjhursey,v3.0,closed,worksforme,"Reporter ""Description"" Verbose Preference","With the addition of the 'description' field to the reporter I had someone at IU look at it. They mentioned that it would be nice if there was a Preferences Option that a user could toggle to 'Always Display Description' in the Individual Phase windows (e.g., mpi_install, test_build, test_run).

Further since 'description' is taged as a long field (like environment and stdout/stderr) it is trimmed when displayed in the Summary table. They would also like the option to 'Always Display the Full Description' in the Summary table, and circumvent the trimming on this value.

Both of these options would be turned 'off' by default, but the user could turn them 'on' if they need this type of data.

Since this is a section of logic in the Reporter I don't fully understand I'm passing this one to Ethan to take a look at.",1187275135,1187960826,minor
260,enhancement,,jsquyres,Future,new,,Do we want slashdot/blog-style tagging?,"It may be useful someday to allow slashdot/blog-style tagging, where the client can send along arbitrary string tags with every result -- allowing one result to be found multiple different ways (also similar to the Gmail label concept).

These tags could be used to form arbitrary subsets of data within the database, such as:

 * Nightly regression testing
 * 2007 collective performance bakeoff
 * Josh's FT performance testing
 * Comparitive BTL performance testing (e.g, !OpenFabrics UD vs. RC)
 * ...etc.

In talking about this, Josh and I decided to just file this idea as a future enhancement.  The ""description"" value is brand-new right now (16 Aug); let's see how users use that and then see if slashdot/blog-style tags are actually necessary.",1187289148,1187819008,minor
261,defect,,jsquyres,Future,new,,Enable using more than one MTTDatabase reporter,"The MTTDatabase reporter plugin is not setup to handle submitting to more than one database right now.  It will get confused in two ways:

 1. The MTTDatabase module has global state that only allows one value.
 2. Identifiers returned from the database are propagated throughout data structures in the client; it is assumed that there is only one value for each required identifier (vs. having an array of these values, and using the appropriate value when submitting to a database).

These problems need to be fixed in order to enable submitting to more than one database.",1187290588,1187290588,major
262,defect,jjhursey,jjhursey,v3.0,closed,fixed,Normalize on Network in v3 schema,"After talking about how to make the 'network' field more useful it was concluded that if we normalize a bit more on the values it will be easier to mine, track, and report.

Meaning that we need a many-to-many association table between the test_run_command.network field and all possible interconnects. The idea is that a single test_run uses a set of interconnects, the combination of 1 or more of these support the run (e.g., for OMPI you may have something like {{{mx,tcp,sm,self}}}). As an entity {{{mx,tcp,sm,self}}} is one group of networks that were used to support the run, however it is more useful to see the different interconnects as individual items when doing searching.

This allows us to search for all {{{mx}}} runs no matter how the user specified the interconnects on the command line (e.g., {{{mx,tcp,sm,self}}} vs {{{sm,self,tcp,mx}}}).

The client will submit to the user a comma separated list of interconnect keys for each test_run (i.e., {{{MX,TCP,SHMEM,SELF}}}).

The server will save the CSV as a unique string (for the moment while we work the details out) then parse these values into the correct many-to-many relationship so it is more easily searchable in the database.
",1187291627,1187648342,major
263,task,jjhursey,jjhursey,Future,new,,Investigate usage of network normalization tables,"Refs #262

Due to the duplication of tuples when joining with the {{{test_run_networks}}} table, we need to look at the usefulness of this association table. It may only be useful in coverage stats generation.",1187648499,1187648499,minor
264,enhancement,,emallove,Future,new,,"Add ""Save Report to File"" functionality to reporter.php","Sometimes it is preferable to have a report locally (in HTML, CSV, or tab-delimited format). Possibly in the spirit of an HTML manual in single or multi-page format (see [http://svnbook.red-bean.com/en/1.4/svn-book.html the Subversion manual]). This would be helpful especially for a ''frozen-in-time'' report (e.g., results for tests run on an already-shipped product that are not changing regularly).  The advantage is not having to search months of data to get test results that were run on an arbitrary day.",1187651235,1216761402,minor
265,enhancement,,jjhursey,v3.0,closed,fixed,Extract HTML header and footer in the Reporter,"It may be useful to have a more abstract notion of the header and footer that the reporter currently uses. This way a developer using MTT can easily insert site stat tracking code (like Google Analytics), copyright information, or support contact info.

This will probably involve extracting the current hardcoded values into individual functions, and then allowing the user to customize those functions as they see fit.",1187698811,1188397359,minor
266,defect,,emallove,Future,new,,Trim out unneeded JavaScript in the MTT reporter emails,"Trim out unneeded !JavaScript in the MTT reporter emails. E.g., there does not seem to be a reason to have !JavaScript functions that provide pop-up select menus in the email (as I assume most clients would not allow !JavaScript to execute out of an HTML email). Some 40K worth of unneccessary !JavaScript are sent with each MTT email.

(This ticket is tangentially related to #265.)",1187709753,1187709753,minor
267,enhancement,,emallove,Future,new,,"Add support for ""fallback"" MPI/Test Get sections","For environments where SVN is unstable, it would be useful to be able to point MTT to ''fallback'' Test Get sections. E.g., the following `Test get` section would settle for using a corresponding `Copytree` get section if SVN is unavailable:

{{{
[Test get: intel]
module = SVN
svn_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/intel_tests
fallback_section = intel-copytree

[Test get: intel-copytree]
module = Copytree
copytree_directory = /my/local/test_sources/intel_tests
}}}",1187732268,1187732726,minor
268,defect,emallove,jsquyres,v3.0,closed,fixed,Timezone kruft still left in new reporter,"I had a report open on an MTT summary page showing some test Cisco submits from >30 minutes ago (org = cisco).  I then changed the timeframe to be ""past 15 minutes"" and clicked on ""Summary"".  It generated a summary page showing 2 test builds.  But when I drill down on the ""2"" in the test build column, I get ""No data available for the specified query."" (which makes sense, because I have not submitted any test builds within the last 15 minutes).  But why is the summary table showing me 2 test build/passes?  

According to Josh, the timestamp from which ""past 15 minutes"" is calculated is actually in the URL -- so it's not ''really'' the past 15 minutes; it's the past 15 minutes from the timestamp in the URL (however/whenever that was generated).  This seems to violate the Law of Least Astonishment -- I would expect that if I have an old summary table up on my browser and I click the ""summary"" button again, it would give me a whole new report based on the relative time that I have entered in the query (e.g., ""past 15 minutes"").

Here's a URL showing the problem (in Josh's new DB): [http://osl.iu.edu/~jjhursey/research/mtt/server/php/reporter.php?limit=100&wrap=100&timezone=EST&trial=on&filter_tracked=off&yaxis_scale=Linear&xaxis_scale=Linear&hide_subtitle=off&remote_go=&do_cookies=&phase=all_phases&text_start_timestamp=past+15+minutes&text_platform_hardware=all&show_platform_hardware=show&text_os_name=all&show_os_name=show&text_mpi_name=all&show_mpi_name=show&text_mpi_version=all&show_mpi_version=show&text_http_username=cisco&show_http_username=show&text_local_username=all&show_local_username=hide&text_platform_name=all&show_platform_name=show&click=Summary&phase=all_phases&text_os_version=&show_os_version=&text_platform_type=&show_platform_type=&text_hostname=&show_hostname=&text_compiler_name=&show_compiler_name=&text_compiler_version=&show_compiler_version=&text_vpath_mode=&show_vpath_mode=&text_endian=&show_endian=&text_bitness=&show_bitness=&text_configure_arguments=&text_exit_value=&show_exit_value=&text_exit_signal=&show_exit_signal=&text_duration=&show_duration=&text_client_serial=&show_client_serial=&text_result_message=&text_result_stdout=&text_result_stderr=&text_environment=&text_description=&text_trial=&lastgo=summary click here]",1187733335,1187804754,critical
269,defect,jjhursey,jsquyres,v3.0,closed,fixed,"Can't search on ""command"" in reporter test run query page","Here's a [http://osl.iu.edu/~jjhursey/research/mtt/server/php/reporter.php?do_redir=2 tiny link] showing a test run report.

If you enter "".*"" (or anything) in the ""command"" text box, you get back the following SQL error:

{{{
postgres: ERROR: column ""command"" does not exist LINE 73: (command ~* 'foo') ^ postgres: ERROR: column ""command"" does not exist LINE 73: (command ~* 'foo') ^
}}}

Is this a schema v3 issue?",1187789564,1187790690,major
270,defect,emallove,jsquyres,v3.0,closed,fixed,Postgres error on bad date input,"I accidentally put in ""past 3 horus"" in the date field in the reporter (misspelled ""hours"") and got a postgres error back on the resulting reporter page:

{{{
postgres: ERROR: invalid input syntax for type interval: ""3 horus"" 
postgres: ERROR: invalid input syntax for type timestamp: """" 
postgres: ERROR: invalid input syntax for type timestamp: """"
}}}

Should we be sanity checking the timestamps that we pass back to postgres?",1187805238,1187813026,major
271,defect,,emallove,v3.0,closed,fixed,"MTT can not handle an ""MPI get"" section that contains whitespace","{{{
[MPI get: My Installation]
mpi_details = Open MPI
module = AlreadyInstalled

[MPI install: My Installation]
mpi_get = My Installation
module = Analyze::OMPI
}}}

The above INI snippet fails in the below confusing manner:

{{{
*** WARNING: Warning: MPI Get section ""my"" does not seem to exist in the
    INI file
*** WARNING: Warning: MPI Get section ""installation"" does not seem to exist
    in the INI file
}}}

Are we disallowing whitespace in the `mpi_get` label because we do not want to attempt to create a directory under scratch containing whitespace?",1187820381,1187837757,minor
272,defect,,emallove,v2.1.1,closed,duplicate,"""Command"" getting repeated multiple times in reporter","The ""command"" value is mysteriously getting repeated -- see [http://osl.iu.edu/~jjhursey/research/mtt/server/php/reporter.php?do_redir=7 this report] for an example.",1187966228,1187969566,major
273,defect,,emallove,v3.0,closed,fixed,"""Command"" getting repeated multiple times in reporter","The ""command"" value is mysteriously getting repeated -- see [http://osl.iu.edu/~jjhursey/research/mtt/server/php/reporter.php?do_redir=7 this report] for an example. Here's my INI:

{{{
[MPI Details: Open MPI]

# MPI tests
exec = mpirun @btls@ @hosts@ -np &test_np() --prefix &test_prefix() &test_executable() &test_argv()

# ORTE tests
exec:rte = &test_executable() --host &env_hosts() --prefix &test_prefix() &test_argv()

# Yes, all these quotes are necessary.  Don't mess with them!
hosts = &if(&have_hostfile(), ""&join(""--hostfile "", ""&hostfile()"")"", \
            ""&if(&have_hostlist(), ""&join(""--host "", ""&hostlist()"")"", """")"")

# This gets set to ""1"" if all the IB interfaces are up
ib_up = &check_ipoib_connectivity()

# Figure out which btl's to use
btls = <<EOT
&perl('

     # Return cached btls, if we have it
     if (defined(@btls)) {
         return \@btls;
     }

     my @hosts = split /\s+|,/, env_hosts();

     if (scalar(@hosts) < 2) {
         @btls = (""--mca btl self,sm"");
     } else {
         if ($ib_up) {
             @btls = (""--mca btl self,sm,tcp"",
                      ""--mca btl self,udapl"",
                      ""--mca btl self,sm,udapl"");
         } else {
             @btls = (""--mca btl self,tcp"",
                      ""--mca btl self,sm,tcp"");
         }
     }
     return \@btls;
')
EOT

before_any_exec = &refresh_ssh_known_hosts_file()

after_all_exec = mpirun @hosts@ orte-clean -v

[Test run: trivial]
test_build = trivial
pass = &eq(&test_wexitstatus(), 0)
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 1
merge_stdout_stderr = 1
np = &if(&gt(&env_max_procs(), 0), &step(2, &max(2, &env_max_procs()), 2), 2)

module = Simple
specify_module = Simple
simple_only:tests = &find_executables(""."")
simple_only_if_exec_exists = 1
}}}",1187966344,1188330605,major
274,defect,,jsquyres,v3.1,new,,Integrate Google Analytics into the reporter,"Have a config option that allows one to turn on ""simplified"" reporting to Google Analytics (e.g., if you provide your GA account number, all the GA code paths are enabled in the reporter).  Here's a mail I sent recently to Ethan/Josh -- we decided that we don't have time to tackle this at the moment but wanted to record the ideas for future integration:

I'm thinking we could make some very easy MTT usage summary reports of our own on Google Analytics.  We can map some specific actions in the MTT reporter to some simple ""fake"" URLs that Google will then record for us (there's a simple API to say ""report to Google that URL X was selected by the user"" -- we can use totally arbitrary values for X that don't have to map to reality).

For example, here's some URLs we can map to:

 1. /mtt/reporter/summary/<timeframe>/ - when someone runs the ""summary"" report, where <timeframe> is:
    */past24hours/
    * /past1day/
    * /past2weeks/
    * ...etc.  Don't report specific timeframes, just the general timeframe
 1. /mtt/reporter/<phase>/<timeframe>/drilldown/<option>[/<target_phase>
    * <phase> is summary, mpiinstall, testbuild, testrun
    * <option> is organization, cluster, hardware, os, mpiname, mpiversion, pass, fail, timeout, skip
    * if <phase> is summary, <target_phase> is one of mpiinstall, testbuild, testrun
 1. /mtt/reporter/<phase>/<timeframe>/detail
 1. /mtt/reporter/<phase>/<timeframe>/performance_graph
 1. ...we can probably think up more

These kind of URLs don't give us a path analysis of how users are getting to the results that they look at; it more gives us an aggregate what queries they are running and some how frequently users are running specific actions.

I'm thinking that this should be pretty darn easy to do (the <timeframe> fuzzing might be the most complicated part), but I haven't done any of the reporter PHP, so I don't know for sure...
",1187976709,1187976709,major
275,defect,emallove,jsquyres,v3.0,closed,fixed,Cherry picking is broken in new reporter,"The cherry picking functionality seems to be broken in the new reporter (I tested trying to eliminate some rows from performance graphs, in particular).  

Initially throwing to Josh, but he may throw this back to Ethan...?",1187981666,1188330273,critical
276,enhancement,,emallove,Future,new,,Show test progress in reporter.php,"MTT has very nice progress reporting in the client. It looks like
this:

{{{
   ...
   Test: MPI_Ibsend_rtoaq_c, np=8, variant=3: Passed
   ### Test progress: 170 of 468 section tests complete (36%)
   Test: MPI_Init_attr_c, np=8, variant=1: Passed
   ...
}}}

It would nice to have this progress reporting in `reporter.php`. E.g.,

|| '''client_serial''' || '''hardware''' || '''os''' || '''mpi-version''' || || '''test run''' || ||
||   ||            ||              ||       || '''pass''' || '''fail''' || '''in-progress''' ||
|| 1 || SPARC || Solaris           || v1.2 || 500 || 0 ||           ||
|| 2|| SPARC || Solaris           || trunk || 500 || 0 ||           ||
|| 3||       ||                   ||       || 0 || 0 || 170 (36%) ||
|| 4||       ||                   ||       || 0 || 0 || 340 (72%) ||

The HTTP submissions of progress data would be tiny to avoid slowing down the MTT client. (What is the overhead of sending *anything*, big or small, to the MTT database?)

{{{
 client_serial => '3',
 tests_in_progress => '170 (36%)',
}}}

Note: `submit.php` would be responsible for removing the ""in-progress"" numbers upon receiving a submission of complete runs.",1187984692,1187984718,minor
277,enhancement,emallove,emallove,v3.1,new,,reporter.php needs aggregate duration columns,"In `All phases` Summary view, `reporter.php` needs to show aggregate durations of all three
phases.  This can be calculated ''on-the-fly'' in one of two ways using postgres [ahttp://www.postgresql.org/docs/8.1/static/functions-aggregate.html aggregate functions]. E.g.,

{{{
#!sql
SELECT sum(duration) as duration ...
SELECT max(stop_timestamp) - min(start_timestamp) as duration ...
}}}

The latter gives total running time including time mtt 
spends doing ''stuff'' other than running tests (fetching
MPI/tests, submitting results, etc.). 
'''We need to be careful here
with regards to INI section ordering, this is only
reliable in the sense of an entire MTT run ('how long did my
entire MTT run take, from MPI Install to last Test run?').'''


The former gives total test execution time.  We should probably
just go with the former to avoid dealing with a special case.

Similarly, `MPI Install`, `Test Build`, and `Test run` reports
should show aggregate durations. E.g., ''how long did the Intel
tests take to run?''",1187985849,1187985849,major
278,enhancement,jsquyres,emallove,v3.0,closed,fixed,Add log_file parameter to [MTT] section,"MTT log files will contain everything that the MTT client printed to stdout. Example usage:

{{{
log_file = &getenv(""HOME"")/mtt/logs/@hostname@-@mpi_get@-@time@.txt
}}}",1187987059,1187992493,major
279,enhancement,,emallove,Future,new,,Add selection popups in Advanced window,The `Advanced` window in reporter.php could use some selection pop-ups of the kind on the main reporter.php query screen. The quoting may get unbearably ugly writing !JavaScript to a child window which will in turn write !JavaScript to a grandchild window (it is already pretty hideous with one generation of child windows).,1188008093,1188008093,minor
280,enhancement,,emallove,Future,new,,"Add ""Saved Reports"" feature to reporter.php","(Related to #264, `permalinks`, and #260)

`reporter.php` should have a mechanism to save reports to
SQL `TABLEs`. ''Saved Reports'' will be lightening fast because the SQL engine
will not be required to do any searching/filtering, as an already-populated
SQL `TABLE` would be used to display the report. 

A link will be needed off the main query screen that reads ''Save Report''.
This link will pop open a window and prompt the user to enter a
description for the report. The following `TABLE` will be added to the database schema:

{{{
#!sql
CREATE TABLE saved_report {
    saved_report_id serial,
    report_description varchar(128),

    -- really only needed to auto-fill HTML form fields
    url text
};
}}}

Then, off the main query screen is a drop-down
menu with a list of ''Saved Reports''. Selecting one
will invoke `reporter.php`, which will bypass all
input parameter processing and go directly to printing the
report.",1188226093,1188226093,major
281,defect,,emallove,v3.1,closed,fixed,"Filtering on Command in ""Test run"" view causes an SQL error","In reporter.php, the `command` field on the main screen does not work, but in the `[Advanced]` popup it does. A caveat with the `[Advanced]` popup is that fields can not be on the main screen ''and'' the `[Advanced]` popup, they can only be on one or the other.",1188230633,1188337599,major
282,task,emallove,emallove,v3.1,new,,Use dump_query_screen() for MTT stats page,"The `dump_query_screen()` function in `screen.inc` should be made a little more
flexible so that it can be used with [www.open-mpi.org/mtt/stats the stats page].
The below items (and maybe a few more) need to be parameterized out in order for `dump_query_screen` to work on both web pages.

 * Page Title
 * Form name
 * Selection popups
 * HTML Layout - ''What goes in the below layout areas?''
  * Top
  * Top left
  * Far left
  * Far right
  * Right
  * Bottom left
  * Bottom
 * HTML hidden fields

(See #204)",1188234995,1188234995,minor
283,enhancement,,emallove,Future,new,,Allow for users to change MTT options part way through a run,"Related to #227 (''Stop all testing and submit what you have now''), but instead of stopping MTT, we will be tweaking it's run-time options midway through a run. The use cases I have in mind are:

 * Change debug or verbose level
 * Skip (or un-skip) INI sections
 * Change an INI parameter

We would need to report to the user on whether the option they are changing is in fact changeable in the client's current state. E.g., skipping an MPI get section makes no sense if MTT has completed all its MPI get sections. There are MTT options we would want to exclude from this feature, e.g.,

 * `--scratch`
 * `--file`

Do we need an MTT daemon for this ticket? A la Postgres's `pg_ctrl`?",1188240502,1236783838,major
284,task,,emallove,v3.1,new,,--debug is showing too much in client/mtt,It is getting more and more difficult to figure out what is going on in the MTT client with the voluminous amount of debug output. A better debugging system is needed that allows MTT developers to turn on debugging for specific modules (or even functions).,1188252336,1188252336,major
285,enhancement,,jsquyres,v3.0,closed,fixed,"Renamed ""latency"" axis to be ""time""",From IU suggestion.,1188252617,1188397310,major
286,defect,jsquyres,jsquyres,v3.0,closed,fixed,Incorrectly reported suite name in test run results,"The jms-new-parser branch seems to be reporting test run stuite names improperly -- possibly using the first (or last) suite name for all the results.  Examples:

 * http://www.open-mpi.org/mtt/reporter.php?do_redir=291
 * http://www.open-mpi.org/mtt/reporter.php?do_redir=292",1188257391,1188330140,blocker
287,defect,jjhursey,jsquyres,v3.0,closed,fixed,MTT php errors showing up in https logs,"These are showing up in the milliways logs with the new reporter:

{{{
[client 192.18.128.5] PHP Notice:  Undefined index:  fields in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1435
[client 192.18.128.5] PHP Notice:  Undefined variable:  interconnect_id_hash in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 100
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1483
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1483
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1483
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1483
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1483
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1483
[client 192.18.128.5] PHP Warning:  Missing argument 2 for do_pg_query() in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1513
[client 192.18.128.5] PHP Notice:  Undefined variable:  pgsql_conn in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 27
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1933
[client 192.18.128.5] PHP Notice:  Undefined index:  mpi_install_section_name in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1435
[client 192.18.128.5] PHP Notice:  Undefined index:  email in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1435
[client 192.18.128.5] PHP Notice:  Undefined index:  number_of_results in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1435
[client 192.18.128.5] PHP Notice:  Undefined index:  phase in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1435
[client 192.18.128.5] PHP Notice:  Undefined index:  fields in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1435
[client 192.18.128.5] PHP Notice:  Undefined index:  mpi_get_section_name in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1435
[client 192.18.128.5] PHP Notice:  Undefined variable:  interconnect_id_hash in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 100
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1483
[client 192.18.128.5] PHP Notice:  Undefined variable:  mpi_install_ids in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 812
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1483
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1483
[client 192.18.128.5] PHP Notice:  Undefined variable:  ret in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1483
[client 192.18.128.5] PHP Warning:  Missing argument 2 for do_pg_query() in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1513
}}}

This is a random snipit / page full of errors that I saw while ""tail -f""'ing the file.  ",1188316873,1188484118,critical
288,defect,emallove,jsquyres,v3.0,closed,fixed,Performance plots are not displaying X values properly,"Log scale latency plots are not showing X values properly (message sizes).  In this graph:

  http://www.open-mpi.org/mtt/reporter.php?do_redir=299

the X scale goes up a little over 10^2^ (value of 123, to be specific -- there are 123 values in the X array, which is where that 123 number is coming from), but the message size goes to just over 8MB.  The linear version of the graph is not displaying the X axis properly (even ticks between each point, even though they're far apart).

First reaction is that !SetTickLabels() is not the right function to call to set the X values.",1188340040,1188401806,critical
289,defect,jsquyres,jsquyres,v3.0,new,,Make a downloadable tarball,There are at least two different commonly-used Perl technologies for making tarballs of Perl packages.  Pick one and use it to make a distribution of the MTT client.,1188386153,1188386153,critical
290,defect,,jsquyres,v3.0,closed,fixed,Finish funclet documentation on wiki,Need to finish the funclet documentation on the wiki before the Paris conference.,1188386190,1190468188,critical
291,defect,,jsquyres,v3.0,closed,fixed,Make an MTT web site on the main Open MPI web site,Need to have some kind of web presence on the main Open MPI web site (perhaps stealing from / pointing to the MTT wiki?) before the October conference.,1188386249,1192115416,critical
292,defect,,jsquyres,v3.0,closed,fixed,Get new MTT logo in place,"Need to have the new MTT logo in place before the October release:

 * Web reporter
 * Wiki web pages / Trac
 * Open MPI sub-web site.",1188386304,1189536993,critical
293,defect,,emallove,v3.1,new,,Preferences pop-up window does not auto-fill correctly,"Already-selected preferences (including checkboxes, drop-down menus, and text fields) should be auto-filled when the user clicks on the Preferences window.",1188401197,1188401197,minor
294,defect,,emallove,v3.1,new,,Fix x-axis linear scaling in performance graphs,"Linear scaling on the X-axis looks like the attached graph. Currently we only support the following:

 * X-axis
  * text (e.g., as in, bar-graph-style tick spacing)
  * logarithmic
 * Y-axis
  * linear
  * logarithmic

(See also #288)",1188402020,1188402020,major
295,defect,jsquyres,jsquyres,v3.0,closed,fixed,"Need way to specify ""by slot"" or ""by node"" in MTT test run sections","Each MPI has a different way of doing by slot / by node, but there are some tests that definitely perfer one way or the other.  For example, netpipe and the OSU benchmarks definitely want ""by node"", while all the coll benchmarks want ""by slot"".

Need to figure out a way to propagate this intent from the test run section up to the MPI details section.",1188434771,1189784909,critical
296,defect,,emallove,Future,new,,"Add columns to DB schema (e.g., test_build.bitness and test_build.command)","Rollup ticket for some needed DB columns.

=== Test build command/bitness ===

Sometimes the bitness for MPI Install and Test Build do not match. E.g., `ClusterTools` is both 32-bit and 64-bit, but a test compiled with ClusterTools will be one or the other. For now, this information will have to go in `description`. (See also #110)

{{{
string mpi_install.command (almost always ""make install"")
string test_build.command (e.g., make all CFLAGS=""-xarch=v9"")
string test_run.command (e.g., ""mpirun blah blah"")
}}}

=== Single node boolean ===

It is difficult to determine whether a test is single or multi-node. A boolean for this would be nice.

{{{
bool   test_run.single_node
}}}",1188482080,1200004981,major
297,defect,,emallove,v3.1,closed,fixed,Permalinks are broken,"Was this due to the change from reporter.php to index.php? 

Also, nothing in the URL http://www.open-mpi.org/mtt/ indicates it is a tool for searching on test results. It is bound to get confused with this page: http://www.open-mpi.org/projects/mtt/.",1188496282,1188496711,blocker
298,defect,,emallove,v3.1,new,,textwrap in [MTT] section does not work,n/a,1188500434,1188500434,minor
299,enhancement,jsquyres,jsquyres,v3.1,new,,More flexible date parsing in reporter,"The ""date range"" field would benefit from being able to parse a whole bunch of common date formats (in addition to ""past X Y"" and the strict ""mm/dd/yy hh:mm:ss"" ranges).  Here's some common ones that I can envision being quite useful (particularly with the upcoming coll bakeoff):

 * General format of: ""A"" or ""A - B"", where A and B are one of the following:
   * '''Month/day/year:''' ""Sep 29, 2007"" or ""September 29, 2007"" (with or without the comma), meaning all day on Sep 29 2007
   * '''Month/day:''' ""Sep 29"" or ""September 29"" (assumes within the last 365 days)
   * '''Day/month/year:''' ""29 Sep, 2007"" (with or without the comma), same as above, but for Europeans
   * '''Day/month:''' ""29 Sep"", same as above, but for Europeans
   * '''Numeric month/day:''' ""9/3"" with optional leading zeros
   * '''Number day/month:''' I think we'd need a cookie preference to be sure to interpret that properly, e.g., ""4/3"" could be the 4th of March or the 3rd of April
   * '''Weekday:''' ""Mon"" or ""Monday"" (assumes within the last 7 days, including today)
 * Allow qualifiers to A and B, such as:
   * '''after:''' ""After sep 29""
   * ...can't think of any others at the moment",1188500955,1202223935,major
300,enhancement,,emallove,v3.1,closed,fixed,Support &dirname(@INI_NAME@) in the INI file,"Now that there are user `funclet_files` (see #189), I need a way to point to the user funclet_files relative to the INI file. This would be like perl's pre-defined $0 and $PROGRAM_NAME. E.g.,

{{{
funclet_files = &dirname(@INI_NAME@)/my_funclets.pm
}}}",1188508839,1190151862,minor
301,defect,,emallove,v3.1,new,,"Add ""command"" column to Test Build","As a sanity check, it would be useful to be able see if the correct compiler flags were used in the Test Build (e.g., 32-bit vs 64-bit).",1188575242,1188575242,major
302,enhancement,,jsquyres,v3.1,new,,"Have ""back links"" from details to Test Build / MPI install","There are times when you're looking at a test run or test build and would like to see some detail of the corresponding MPI install.  As such, we should add the following:

 * In the test build detail display, have a link back to show the detail of the corresponding MPI install
 * In the test run detail display, have links back to show the details of the corresponding test build and MPI install (i.e., two links)",1188956818,1202331196,minor
303,defect,jsquyres,emallove,v3.0,closed,fixed,Some test failures have associated performance data,I thought the policy was to not submit performance data on a failed test run? See http://www.open-mpi.org/mtt/index.php?do_redir=314.,1188960521,1190077426,critical
304,task,,emallove,v3.1,closed,fixed,Create a commit-to-ompi-www script,"Any changes in the [source:/trunk/server/php] directory need to, at some point, be published to [http://www.open-mpi.org/mtt]. It would be helpful to have a script do this to eliminate the possiblity of desynchronizing the mtt/trunk and ompi-www/trunk/mtt.
",1189023013,1190141074,major
305,defect,jsquyres,jjhursey,v3.0,closed,fixed,mtt-relay and submit site deny mirrors problem,"IU reported that on BigRed they are unable to submit to the database any longer through the {{{mtt-relay}}}. The following message appears:
{{{
*** Reporter initializing
Evaluating: MTTDatabase
Initializing reporter module: MTTDatabase
Evaluating: require MTT::Reporter::MTTDatabase
Evaluating: $ret = &MTT::Reporter::MTTDatabase::Init(@args)
Evaluating: XXUsernameXX
Evaluating: XXPasswordXX
Evaluating: http://s10c2b3.dim:8008/
Evaluating: OMPI
Evaluating: 1
Evaluating: IU_BigRed
    Set HTTP credentials for realm ""OMPI""
MTTDatabase getting a client serial number...
MTTDatabase trying proxy:  / Default (none)
MTTDatabase got response: Sorry, this page is not mirrored.  Please  
see the
    <a href=""http://www.open-mpi.org/mtt/submit/index.php"">original  
version
    of this page</a> on the main Open MPI web site.
*** WARNING: MTTDatabase did not get a serial
Making dir:
    /N/ptl01/mpiteam/bigred/20070906-CronTest-cron/pb_0/mttdatabase-submit
    (cwd: /N/ptl01/mpiteam/bigred/20070906-CronTest-cron/pb_0)
}}}

It seems that the {{{mtt-relay}}} script is reporting the relay host as the servername somehow:
{{{
$_SERVER[""SERVER_NAME""] = s10c2b3.dim
$mother_site = www.open-mpi.org
}}}

As a quick hack I'm allowing this specific server to bypass the mirror check, but we need to resolve this more generally.

Below is a snip of the Reporter section used on BigRed:
{{{
[Reporter: IU database]
module = MTTDatabase

mttdatabase_realm = OMPI

mttdatabase_url = http://s10c2b3.dim:8008/

mttdatabase_username = XXUsernameXX
mttdatabase_password = XXPasswordXX

mttdatabase_platform = IU_BigRed
mttdatabase_keep_debug_files = 1
}}}
",1189090454,1189539992,blocker
306,enhancement,,emallove,Future,new,,Need more flexibility in ordering of execution,"MTT has a fixed ordering of how it runs tests, which is by phase. For example, ''all'' test builds are done before ''all'' test runs, but it could be useful to have all test phases (Get, Build, and Run) occur sequentially for individual test suites. So instead of this ordering (`--order-by=phase`):

{{{
[Test get: trivial]
[Test get: intel]
[Test get: ibm]
[Test build: trivial]
[Test build: intel]
[Test build: ibm]
[Test run: trivial]
[Test run: intel]
[Test run: ibm]
}}}

We could have MTT run in the following order (`--order-by=suite`):

{{{
[Test get: trivial]
[Test build: trivial]
[Test run: trivial]
[Test get: ibm]
[Test build: ibm]
[Test run: ibm]
[Test run: intel]
[Test get: intel]
[Test build: intel]
}}}",1189460335,1189521856,minor
307,defect,emallove,jsquyres,v3.0,closed,fixed,reporter not always retrieving message_size=0,"The reporter will fail to graph osu_latency results ''sometimes'' because the message_size array will fail to contain the value ""0"" as the first entry.  This later causes array_pad() to fail, and then the x axis values get mucked up and things go badly.  Here is a URL showing the problem:

http://www.open-mpi.org/mtt/index.php?do_redir=334

However, if you enable ""showing"" the test name, the problem goes away -- the message_size array somehow gets the value ""0"", and everything plots fine:

http://www.open-mpi.org/mtt/index.php?do_redir=335

Note that ""0"" is the actual first message size for the osu_latency test, so it should be the first entry in the message_size array.  I confirmed that the client is actually submitting the 0 value properly -- here's a snipit from my client-side database submit debug file:

{{{
'message_size_2' => '{0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304}',
}}}",1189598058,1189716076,blocker
308,defect,emallove,jsquyres,v3.0,closed,duplicate,Test run failures mail incorrect,"The ""test run failures"" e-mail from this morning contained a ""1"" and nothing else. 

I did not check the last several days to know whether this has been happening repeatedly or not.",1189598134,1190047342,critical
309,defect,jsquyres,jsquyres,v3.0,closed,fixed,Update the README file,The README file still talks about perfbase.  Yikes!  It's waaaay out of date.,1189715533,1189774426,critical
310,defect,jsquyres,jsquyres,v3.0,new,,Check all licenses,"Check the licneses of all files to ensure that they're all BSD-compatible, specifically the licenses of the 3rd party software that is currently included in MTT (jpgraph, the perl libraries, etc.).",1189763971,1189763971,critical
311,defect,emallove,jsquyres,v3.0,new,,"""undef"" values from client","I notice the following warning a lot in milliways' http errorlog for www.open-mpi.org:

{{{
[client xxxxxxxx] PHP Notice:  Use of undefined constant undef - assumed 'undef' in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php(75) : eval()'d code on line 2171
}}}

The submit PHP code in question is:

{{{
eval(""\$_POST = "" . gunzip_file($_FILES['userfile']['tmp_name']) . "";"");
}}}

So assumedly we're sending some dump data from the client who has some ""foo => undef"" kinds of assignments.

Is it suitable to add one more line of PHP before the eval:

{{{
$undef = """";
}}}

Or do we need to scrub the data in the client before sending it to the server, either removing everything that is undef or setting its value to """"?",1189765164,1190468213,critical
312,enhancement,jjhursey,jjhursey,v3.0,new,,Improve Statistics Representation,"A continuation of Ticket #204.

The statistics page currently consists of a table of stats for a given date range.

We can improve this page by including graphs representing contribution and/or growth.

We can also explore the application of advanced visualization concepts to represent testing coverage.",1190121646,1190121646,minor
313,defect,jsquyres,jsquyres,v3.0,closed,fixed,"Using hostlist/hostfile should automatically set resource_manager to ""none""","Jelena reported on the mailing list:

{{{
>> Test run [netpipe]
>> Running with [ompi-nightly-v1.2] / [1.2.4b1r16141] / [ompi/gnu-standard]
    Using MPI Details [ompi] with MPI Install [ompi/gnu-standard]
    Total of 1 tests to run in this section
    Test: NPmpi, np=2, variant=1: Passed
*** WARNING: Unrecognized resource manager name (hostfile); the only
     permitted names are: ""slurm tm loadleveler n1ge none unknown""; skipped
    Test: NPmpi, np=2, variant=2: Passed
*** WARNING: Unrecognized resource manager name (hostfile); the only
     permitted names are: ""slurm tm loadleveler n1ge none unknown""; skipped
    Test: NPmpi, np=2, variant=3: Passed
}}}

Jelena is using a hostlist and apparently not setting resource_manager explicitly.  In this case, MTT should be smart enough to set resource_manager to ""none"".",1190155346,1190224788,major
314,enhancement,,emallove,Future,new,,"Shorten query strings in reporter.php for ""wget --recursive""","If the query strings were not so long, the following command could be useful to save a report (see #264). 

{{{
wget --recursive --level=2 --convert-links 'http://www.open-mpi.org/mtt?do_redir=999'
}}}

The problem is that `wget` attempts to recurse into the drilldown links and store the HTML pages locally with filenames that reflect the query string, but the query strings are exceeding the file system limit for file name length. (See also #98)",1190172923,1190172923,major
315,defect,emallove,emallove,v3.1,closed,fixed,Searching on bit-mapped columns causes an SQL error,"The below SQL error occurs if a bit-mapped field is filtered on while its Show/Hide menu is on ''Hide'':

{{{
postgres: ERROR: operator does not exist: bit ~* ""unknown"" LINE 70:
(bitness ~* '32') ^ HINT: No operator matches the given name and
argument type(s). You may need to add explicit type casts. postgres:
ERROR: operator does not exist: bit ~* ""unknown"" LINE 70: (bitness ~*
'32') ^ HINT: No operator matches the given name and argument type(s).
You may need to add explicit type casts.
}}}

This occurs because `bitness` is not stored as a string, but a bitmapped field. reporter.php only converts `bitness` to a string if it is in the `SELECT` statement (i.e., Show is selected from its Show/Hide menu). Note: ''all'' bit-mapped fields suffer this problem: `bitness`, `endian`, and `vpath_mode`. ",1190296686,1190298224,major
316,enhancement,,jsquyres,v3.1,new,,Reporter data visualization enhancements,"This is a rollup ticket to tie together several independent ideas that all have to do with helping visualize very large data sets (potentially using web 2.0 technologies):

 * #153: allow customization of performance graphs
 * #236: use timelines to show when events occurred (vs. the summary table approach that is used now)
 * #237: visualize code coverage support over a desired set of platforms/environments/run-time options/etc.
 * #302: visualize lineage of MPI Install -> Test Builds -> Test Runs
 * #330: latency/bandwidth history visualization",1190469730,1202227064,major
317,defect,jsquyres,jsquyres,v3.0,closed,fixed,Gracefully handle if Env::Modulecmd is not present,The MTT client should not fail if this module is not present; it should only fail if env_module is used in the INI file and the Env::Modulecmd file cannot be found.,1190663892,1190681420,critical
318,defect,jsquyres,jsquyres,v3.0,closed,fixed,Gracefully handle if Text::TabularDisplay is not present,"The MTT client should not fail if this module is not present; it should only fail if the text reporter is used in the INI file and the Text::TabularDisplay module cannot be found.  Or perhaps it shouldn't fail, but rather display a sub-optimal output with a message ""this would look better if you had Text::TabularDisplay installed""...?",1190663980,1190729823,critical
319,defect,,jsquyres,v3.0,new,,Gracefully handle if jpgraph is not present,"If jpgraph is not present on the PHP server, simply refuse to make graphs.",1190664036,1190682156,critical
320,task,,emallove,v3.0,new,,Gracefully handle if LWP::UserAgent is not present,"If `LWP::UserAgent` is not available in [source:/trunk/lib/MTT/Reporter/MTTDatabase.pm MTTDatabase], then MTT should emit a big warning and fail over to a different [source:/trunk/lib/MTT/Reporter/Reporter Reporter].",1190731120,1190731120,major
321,enhancement,,emallove,v3.1,new,,AlreadyInstalled.pm needs pre/post steps just like SVN.pm,"The [source:/trunk/lib/MTT/Common/SVN.pm SVN] module has the following two INI parameters:

 * `svn_pre_export`
 * `svn_post_export`

Similar parameters would be useful for [source:/trunk/lib/MTT/MPI/Get/AlreadyInstalled.pm AlreadyInstalled].",1190831207,1190831207,major
322,enhancement,,emallove,Future,new,,"Add general ""run_step"" functionality for before/after phases","Related to #321 and #246. The below parameters for the `[MTT]` section, phase sections, (or super-phase sections from #246) would be useful for assigning general set-up and clean-up commands. The parameters the steps are:

 1. `before` and `after`
 1. `each` and `all`
 1. Phase name

Listed out in full:

 * Before
   * MPI get
     * `before_each_mpi_get`
     * `before_all_mpi_get`
   * MPI install
     * `before_each_mpi_install`
     * `before_all_mpi_install`
   * Test get
     * `before_each_test_get`
     * `before_all_test_get`
   * Test build
     * `before_each_test_build`
     * `before_all_test_build`
   * Test run
     * `before_each_test_run`
     * `before_all_test_run`
   * Reporter
     * `before_each_reporter`
     * `before_all_reporter`
 * After
   * MPI get
     * `after_each_mpi_get`
     * `after_all_mpi_get`
   * MPI install
     * `after_each_mpi_install`
     * `after_all_mpi_install`
   * Test get
     * `after_each_test_get`
     * `after_all_test_get`
   * Test build
     * `after_each_test_build`
     * `after_all_test_build`
   * Test run
     * `after_each_test_run`
     * `after_all_test_run`
   * Reporter
     * `after_each_reporter`
     * `after_all_reporter`",1190834010,1190845584,major
323,defect,,emallove,v3.0,new,,"@var@ expansion in ""argv"" parameter violates the Law of Least Astonishment","The following seems reasonable, but it will not do what the user expects.

{{{
[Test run: baz]
...
foo = bar
argv = @foo@
...
}}}

That is because `argv` is evaluated as `&test_argv()` in the `exec` parameter of the MPI details section, and so the `EvaluateString()` call looks for a `foo` parameter in the `[MPI details]` section (not the current test run section). 

To remedy this, I experimented with modifying `EvaluateString()` to take more than one INI section as an argument, but I was not able to finish the task (see attached patch). ",1190923243,1216132416,major
324,defect,,emallove,v3.1,closed,fixed,MTT sometimes (though rarely) does not set Hardware/OS fields,"I have not been able to reproduce this, but I wanted to log the error. MTT didn't set my hardware/OS on this particular run:

  http://www.open-mpi.org/mtt/index.php?do_redir=406

(I thought ''maybe'' the recent `whatami` changes could have caused an issue?) Just something to keep an eye on.",1191011914,1199969332,major
325,enhancement,,emallove,Future,new,,Add --get-value command-line option,"The below command would simply tell MTT to print the value of the specified INI parameter to STDOUT:

{{{
$ client/mtt --get-value <section> <name>
}}}",1191609012,1191609012,major
326,enhancement,timattox,jsquyres,v3.1,new,,Allow INI file to override test names,"The name of a test that is shown in the reporter is currently one of
two things:

 1. The name of the test executable
 1. The name of the sub-test run if a performance analyzer overrides
    it (several of them do, such as the IMB and SKaMPI analyzers,
    because the test executable is the same for all tests; the actual
    test that is run is derived from the argv given to the test
    executable).

It would be cleaner to have a test_name field in the test run INI
section that could supply logic to derive the name of the test.  This
would allow three things:

 1. A cleaner solution for when the test name is sufficient (i.e., a
    default value of ""&test_executable()"", or somesuch)
 1. Get the performance analyzers out of the business of figuring out
    which test was run -- this has always seemed like an abstraction
    break to me.
 1. When tests fail or hang, the performance analyzers are not run, so
    the test name is currently left at the default &test_executable().
    For example, if an IMB test passes, its test name in the web
    reporter will be ""MPI_Bcast"" (or whatever).  But if that same test
    fails, its name in the web reporter will be ""IMB-MPI1"".  That
    seems to clearly violate the Law of Least Astonishment.

This seems like a lot of work just to handle failure cases better, but
as Tim M. pointed out to me, one of the reasons MTT was created was to
find and highlight the failure cases.  So having them show up
""properly"" in the reporter (i.e., under the same classification as
they would if they had succeeded) is the Right Thing to Do.

Here's what I think needs to happen to implement this (off the top of
my head):

 * Remove the {test_name} overrides in the current
   Test/Analyze/Performance/*.pm files.
 * Add another field in Defaults.pm:Test_run->{test_name}, potentially
   with value of ""&test_executable()"".
 * Add processing in Test/Run.pm to snarf (but do not evaluate!) the
   ""test_name"" field from the current Test Run INI section.
 * Add processing in Test/RunEngine.pm to evaluate the test_name field.

Again, this is off the top of my head and could be wrong.  Caveat
emptor...",1191837182,1193487351,major
327,enhancement,,jsquyres,v3.1,new,,Record nbcbench benchmark data,"Title says it all -- nbcbench reports a fixed set of double precision values for each message size that we need to record in the database and visualize in the reporter.

See http://www.open-mpi.org/community/lists/mtt-devel/2007/10/0156.php for a lenghier description.",1191862327,1191862345,major
328,defect,,emallove,v3.1,new,,Provide visibility to @foo@ variables within the same INI parameter,"The following exec parameter does not evaluate properly:

{{{
exec = some-command @foo@ &bar(@foo@)
foo = &enumerate(0, 1)
}}}

One would expect that in each of the two expansions of `exec`, `&bar()` would be passed the value of `@foo@` (first 0, and then 1). What actually happens is `&bar()` gets the two element array `[0,1]` for each expansion of `exec`.",1192134933,1193518456,major
329,enhancement,,emallove,v3.1,new,,Add build_in_place option to MPI Install phase,"There was an mtt-devel thread this issue (Subject: ''Why does OMPI.pm do a Copytree before it installs?''). The below Timer output indicates that the [presumably unncessary] Copytree operation before the MPI install can take up to 6:45 :-(

{{{
>> Command: cp -r <scratch>/sources/mpi_get__foo/trunk .
   Elapsed:       00:06:44 0.00u 0.02s
}}}

Just in case users want to keep a ''clean'' sources directory, this should be INI parameterized (e.g., `build_in_place`?).",1193266453,1193266453,major
330,enhancement,,jsquyres,v3.1,new,,Bandwidth/latency graphs,"A suggestion from a 3rd party...

In addition to the current latency/bandwidth graphs, it would be useful to show a history of latency and bandwidth numbers of a over several message sizes.  That is, the X axis is versions of a given MPI implementation stretching back in time.  The Y axis is time (for latency) or Mbps (for bandwidth).  Show multiple lines on the graph; each line is the latency (or bandwidth) of a given message size for that version of MPI.

This is a good way to check for performance regressions: the lines should be flat or going down (for latency; up for bandwidth) over time.  If the lines go in the wrong direction, then a performance regression has occurred.",1195197942,1195197942,major
331,task,,emallove,Future,new,,Doxygen-ize the MTT source tree,"It would be helpful to have inlined source code documentation. Doxygen seems like the logical pick, since it is used in Open MPI. Unfortunately, Doxygen doesn't natively support Perl, but there is a [http://www.bigsister.ch/doxygenfilter Perl Doxygen Filter] that may help with this.",1196964717,1196964717,minor
332,defect,emallove,emallove,v3.0,closed,fixed,The reporter does not rollup on a large field capture group,"When doing a regexp search on a large field (e.g., stdout or stderr) in Summary view, a capture group appears in the Summary table so that the table cell width can handle the large text field. However, the rows do not aggregate properly because apparently the `GROUP BY` clause is processed before the regexp capture. The result can be hundereds of duplicate rows, instead of the desired single row with a large count in the right hand column. This could be fixed by doing something like this in reporter.php:

{{{
#!sql
SELECT .... <long hairy SQL expression here> ... INTO TEMPORARY TABLE foo;
SELECT * FROM foo GROUP BY blah blah;
}}}",1199314044,1212119256,major
333,enhancement,,jsquyres,v3.0,new,,"Allow default switch between ""OS"" and ""OS version"" in the reporter","In some cases, it can be nice to show the ""OS version"" column by default instead of the ""OS"" column.  For example, if you know that you're only going to be testing one OS, it's a lot of clicks to: 

 1. run a report
 1. to see a single value in all default reports
 1. click ""Advanced""
 1. click ""show"" for OS version
 1. scroll down and click ""submit""; have it re-run the report

Perhaps we could have a PHP configure value that allows toggling between showing the OS / OS version columns by default in all reports.",1199625757,1199723349,minor
334,defect,,emallove,v3.0,new,,Some auto-filled form settings in the Preferences pop-up are incorrect,"Bringing up reporter.php and clicking `[Preferences]` shows the ""Trial runs"" checkbox selected even though the `$_COOKIE` and query string value for it is undefined. The issue is that when the popup window is brought up, all the form values get ""auto-filled"" based on the current URL and the user's cookies. This seems to be functioning for the main window(s), but not for the pop-up windows.",1199804098,1199804098,minor
335,enhancement,,emallove,v3.0,new,,Integrate Trac with the Reporter,Add the abilty to click out of an MTT report to a [http://trac.edgewall.org/ Trac] changeset.,1199991442,1202225067,minor
336,enhancement,,emallove,Future,new,,Support RDBM plug-ins on the server side,"Currently, the PHP code on the server-side is hard-coded to use `PostgreSQL`. One ought to be able to tweak parameters in [source:trunk/server/php/config.inc config.inc] that would allow them to use an alternative RDBMs. This would also require a factoring down of the [source:trunk/server/sql sql] area to separate RDBMs implementations.",1200502403,1216755393,major
337,defect,,emallove,v3.0,new,,Differentiate between text and numeric columns in reporter.php,"There is no way to query the database, e.g., for tests run with np values greater or less than `x`, because the only way to filter on a given column is using string/regexp comparison. The fact that all table cells contain drilldown links has made getting this functionality a little tricky to do, but basically `np` is an oddball numeric column that needs to be given special treatment. The `np` field should accept a syntax like this:

{{{
> x
gt x
greater than x

< x
lt x
less than x

>= x
<= x
== x

x (plain and simple numeric comparison)
}}}

The special case of `np` affects a few spots:

 * The auto-fill of the query dashboard after a button click
 * The processing of the `np` paramter in the SQL query composition function
 * Rename the parameter from `text_np` to `numeric_np` so it will not be processed as a text field",1200527247,1200527247,major
338,defect,,emallove,v3.0,new,,"Do not display redundant ""create permalink"" links for an already permalinked report","When a permalink is loaded into `reporter.php`, its URL is immediately overwritten in the address bar of the browser. It is then indecipherable from other non-permalinked reports. To add to the confusion, the ""create permalink"" links are still visible on the page. The ""create permalink"" links should be overwritten by a link to the ''current'' permalink in the case of a permalinked report.",1200582379,1200582379,minor
339,defect,,emallove,v3.0,new,,DoCommand can run out of memory and bork an entire MTT run on some performance tests,"`DoCommand` is running out of memory on some performance tests (tests with no timeout value). `DoCommand.pm` needs to safeguard against this such that the entire `perl` process does not exit, but that the test times out and testing resumes. I believe the problem is that `$stdout/$stderr` values can accumulate an endless stream of error messages, which end up overloading the process's memory space. Below is a simple program that shows the issue.


{{{
#!perl
#!/usr/bin/env perl
#
# Test that makes DoCommand run out of memory
#

# Fill in <mtt-checkout>
use lib ""<mtt-checkout>/lib"";

use MTT::Messages;
use MTT::DoCommand;
use strict;

#     
# Cmd($merge_output, $cmd, 
#     $timeout, $max_stdout_lines, $max_stderr_lines) = @_;
#

MTT::Messages::Messages(0,1);
MTT::DoCommand::Cmd(1, ""yes"", -1, -1, -1);
}}}
",1201203588,1201203588,critical
340,enhancement,,emallove,v3.0,new,,Provide a way to catalog permalinks with descriptions on the Reporter page,"The `Create permalink` pop-up window displays something like this:

{{{
The original permalink was 673 chars long. 
Here's a tiny link that is only 50 chars long:
  http://www.open-mpi.org/mtt/index.php?do_redir=540
  [Close this window]
}}}

It should have some additional controls like a ''description'' text field with a ''Save'' button. The ''Save'' button would log the description and permalink to a permalinks table, and there would be a way to view the list of permalinks created (like a trac tickets report). E.g., some permalink descriptions might be ""bakeoff mvapich vs openmpi"", ""clustertools 6 vs. 7"", ""xyz testing"", etc.",1204311610,1204311610,minor
341,defect,jjhursey,jjhursey,v3.0,closed,invalid,Reporter cannot query endian or bitness,"You cannot set endian or bitness in the Reporter Advanced window and have it result in a query. The problem is that we take the input from the text box (i.e., endian: 'big') and represent that to the sql as [{{{endian ~* 'big'}}}].

Since endian and bitness are not strings, but bit fields we need to translate between the user specified values and the bit fields.",1204380806,1208289443,major
342,defect,,jjhursey,Future,new,,Improve Integrity checking in the database,"This stems from r1162

We currently try to take all of the data from the mtt client, even if it is known to the database to be incorrect. We try to file it under the 'undef' categories in the appropriate tables. For example if a MTT client submits a test_run result and submits the wrong test_suite reference for a particular test_name then this run is going to be misfiled.

The database can check for these types of consistency breakages, but at a cost to modifying data (insert, delete, update). If the database detects that there is a violation of integrity/consistency then it will reject the Insert of data with an error message describing the violation it has detected.

If we were to strengthen the integrity constraints in the database then we must adjust the MTT client to handle these types of database 'errors' better. This may mean allowing the user to correct the mistake and resubmit the data, or emailing them that this has happened and they need to take action.

We chose a looser IC model because we want to make sure that we get the data submitted no matter what. In the future we should be a bit more selective so we do not misrepresent the dataset.

Since this will take a lot of effort to do I'm filing this under minor and future.

",1204906993,1204906993,minor
343,defect,,emallove,v3.0,new,,MTT is leaving a ton of 0 byte tempfiles in /tmp,"MTT is leaving a ton of 0 byte tempfiles in `/tmp`. Somewhere there is a call to `tempnam()` or `tempfile()`, but the file is not getting cleaned up. E.g.,

{{{
$ ls /tmp
9abBX9Rnxy            LDIgYgkyUW      VQv2kKJtCm      g7z0mr1RSo          oxdXS7svRZ                                  ykHRMrlUlU
9f0bxYKZPK            LDgOPSUIm1      VXWgKEBgy3      g81xEGg3v6          p0nYZlnA06                                  yqRmvsEMzr
9fNKpu9ifl            LL8W1nWC3z      VZYMvXuxS2      gB9GCWfBqE          p1xWqpBxsG                                  yzDYfF1GQY
9gamsOBf2u            LNV6UZ99Ud      VcfaIz74dq      gD3P7jh18R          p4KGSNjWsw                                  z6pQ7iNf7q
9giHPPpAv9            LbOjHTlAD5      VgKErtBNST      gJyMwms11v          pB3hyC5nOu.ini                              zBCg4huXha
9hYXoSyWZa            LegF8zL6Ma      VjA5mjp89Z      gN7CboAOo7          pBnjlV7Sdk                                  zDfOtA3Fr8
9iG57QJNnF            LpR2zfRNwY      VkrsezGwsl      gQ8WOxL7FO          pC39ZnoSXJ                                  zH0hV2iQ1r
9jm6e8WBA2            LqCeAUaZ3F      Vpn3T9U0wx      gTsasas7pX          pEHlYfmAw5                                  zJS7szftjz
9lebNtHWX4            LtZH24KOp0      VsmXNXXTfY      gYEUk7n28f          pHneUlnPI0                                  zJYQS4T87U
9sIUryfPw9            Lw0Y9AZod1      Vt3rFJjOlw      gZdWYPyeyO          pJIphO3Yfx                                  zOXxX9eNM6
A0FcX52k16            LwKo6XG1g8      VveHjmAn3n      gb0CAOXruX          pakkMVp2xn                                  zPa4G8AKEk
A7Szj1DnzC            Ly391lu2qV      W3H09T7sbB      gb9ggNDY6e          pg4Zb7ZH6M                                  zScjG9Xfrf
AL4TfrLtVm            M1Hevnwsj6      W4mH4YhT3g      gbxzEBAZyG          pr37DLxOa1                                  zVqNtifdBH
ANV2mNuGOs            MDv8gBA3O5.ini  WArVJ4ZQjG.ini  guDGN3PWPp          puhIyeK6ru                                  zYJZxPpT5q
}}}",1204907728,1204913335,major
344,enhancement,,emallove,v3.0,new,,Provide means to drill down and change view (summary/detail/perf) in a single action,"It would be a time-saver to be able to, e.g., drill down from a table cell into Detail view in a single mouse-click. Currently, this is a two-click (and thus a two-SQL-query) operation, because one needs to drill down on a row before clicking the Detail button. In lieu of some clever AJAX or the like, a menu or radio button control for the three ""views"" (summary/detail/performance) would work. ([http://www.zapatec.com/website/ajax/zpmenu/demo/csm_themes.html Some design ideas are here.])",1205262166,1205262166,minor
345,enhancement,,emallove,v3.0,new,,Add option to use single color for identically labeled line plots in perf graphs,"If legend items are identical they should be rolled up into a single plot-line color. http://tinyurl.com/5pcaqs shows 22 runs of IMB Exchange (11 w/ !ClusterTools 7.1, and 11 with !ClusterTools 8.0). The plot lines are too chaotic to tell the 7.1 lines from the 8.0 lines. If 7.1 lines were uniformly one color, and the 8.0 lines were uniformly another, the graph would be easier to read.",1205775634,1216755632,major
346,enhancement,,emallove,v3.0,closed,fixed,Add graphing preferences option to split up performance graphs,"The axis scaling of the performance graphs can make it difficult to visually process the line plots near the small message size segment of the graphs (the left-hand side of the png's). An option to slice up the graphs (e.g., by 1/2, 1/3, 1/4, etc.) would make the graphs easier to read.",1205776884,1208215486,minor
347,defect,emallove,emallove,v3.0,new,,Submit buttons on a partially loaded page can behave badly,"Submit buttons on a partially loaded page can behave badly due to the location of some `hidden` HTML form fields towards the end of the page. E.g., if the following `hidden` fields are not loaded before the user clicks a `submit` button, the resulting SQL query differs from the case where the page is fully loaded.

{{{
...
<input type='hidden' name='phase' value='test_run'> 
<input type='hidden' name='test_result' value='_rf'> 
<input type='hidden' name='text_os_version' value=''>
...
}}}

It would be best to place these hidden field earlier in the page.",1207152167,1207152167,major
348,enhancement,,emallove,v3.0,new,,"Add graphing for the ""duration"" column","MTT could be used to gather ORTE launch scalability data (see
[https://svn.open-mpi.org/trac/ompi/wiki/ORTEScalabilityTesting ORTEScalabilityTesting]). The missing functionality is the ability to graph on the `duration` column. Currently, graphing is only available for latency/bandwidth data. (Maybe this feature could be extended to provide graphs for some other numeric columns such as result counts?) (See also #239 - ''Graph IMB Barrier tests.'')",1207591931,1207592427,major
349,enhancement,,emallove,v3.0,new,,Get TextFile reporter to split out each result into individual table cells,"The `TextFile.pm` Reporter would be more slick if Test run reports were split out into individual table cells. Currently, `TextFile.pm` outputs something like the below for the Intel tests, e.g.,

{{{
+--------------------------+-------------------------------------------------------------------------------+
| Field                    | Value                                                                         |
+--------------------------+-------------------------------------------------------------------------------+
| description              |                                                                               |
| environment              | prepend_path PATH /ws/ompi-tools/SUNWspro/SOS12-ML/bin                        |
| exit_signal              | -1                                                                            |
| launcher                 | mpirun                                                                        |
| mpi_install_section_name | already-installed                                                             |
| mpi_name                 | already-installed                                                             |
| mpi_version              |                                                                               |
| network                  | loopback,shmem                                                                |
| np                       | 1                                                                             |
| parameters               |                                                                               |
| phase                    | Test run                                                                      |
| resource_manager         | none                                                                          |
| result_stderr            |                                                                               |
| test_build_section_name  | intel-32                                                                      |
| variant                  | 1                                                                             |
|                          |                                                                               |
| command                  | mpirun	--mca btl self,sm --host burl-v20z-0 -np 1 --prefix /opt/openmpi/1.3   |
|                          | src/MPI_Cart_sub_c                                                            |
| duration                 | 0 seconds                                                                     |
| exit_value               | 77                                                                            |
| result_message           | Skipped                                                                       |
| result_stdout            | MPITEST info  (0): Starting MPI_Cart_sub: test                                |
|                          | MPITEST skip (0): WARNING --  nodes =	1   Need   6 nodes to run test          |
| start_timestamp          | Fri Apr 11 19:32:43 2008                                                      |
| test_name                | MPI_Cart_sub_c                                                                |
|                          |                                                                               |
| command                  | mpirun	--mca btl self,sm --host burl-v20z-0 -np 1 --prefix /opt/openmpi/1.3   |
|                          | src/MPI_Cart_create_nonperiodic_c                                             |
| duration                 | 0 seconds                                                                     |
| exit_value               | 77                                                                            |
| result_message           | Skipped                                                                       |
| result_stdout            | MPITEST info  (0): Starting MPI_Cart_create with reorder = false test         |
|                          | MPITEST skip (0): WARNING --  nodes =	1   Need   6 nodes to run test          |
| start_timestamp          | Fri Apr 11 19:32:43 2008                                                      |
| test_name                | MPI_Cart_create_nonperiodic_c                                                 |
|                          |                                                                               |
| command                  | mpirun	--mca btl self,sm --host burl-v20z-0 -np 1 --prefix /opt/openmpi/1.3   |
|                          | src/MPI_Graphdims_get_c                                                       |
| duration                 | 0 seconds                                                                     |
| exit_value               | 77                                                                            |
| result_message           | Skipped                                                                       |
| result_stdout            | MPITEST info  (0): Starting MPI_Graphdim_get test                             |
|                          | MPITEST skip (0): WARNING --  nodes =	1   Need   6 nodes to run test          |
| start_timestamp          | Fri Apr 11 19:32:43 2008                                                      |
| test_name                | MPI_Graphdims_get_c                                                           |
...
}}}

It would be better if each mpirun case was somehow split out into their own table cells. E.g.,

{{{
+--------------------------+-------------------------------------------------------------------------------+
| Field                    | Value                                                                         |
+--------------------------+-------------------------------------------------------------------------------+
| description              |                                                                               |
| environment              | prepend_path PATH /ws/ompi-tools/SUNWspro/SOS12-ML/bin                        |
| exit_signal              | -1                                                                            |
| launcher                 | mpirun                                                                        |
| mpi_install_section_name | already-installed                                                             |
| mpi_name                 | already-installed                                                             |
| mpi_version              |                                                                               |
| network                  | loopback,shmem                                                                |
| np                       | 1                                                                             |
| parameters               |                                                                               |
| phase                    | Test run                                                                      |
| resource_manager         | none                                                                          |
| result_stderr            |                                                                               |
| test_build_section_name  | intel-32                                                                      |
| variant                  | 1                                                                             |
+--------------------------+-------------------------------------------------------------------------------+
| command                  | mpirun	--mca btl self,sm --host burl-v20z-0 -np 1 --prefix /opt/openmpi/1.3   |
|                          | src/MPI_Cart_sub_c                                                            |
| duration                 | 0 seconds                                                                     |
| exit_value               | 77                                                                            |
| result_message           | Skipped                                                                       |
| result_stdout            | MPITEST info  (0): Starting MPI_Cart_sub: test                                |
|                          | MPITEST skip (0): WARNING --  nodes =	1   Need   6 nodes to run test          |
| start_timestamp          | Fri Apr 11 19:32:43 2008                                                      |
| test_name                | MPI_Cart_sub_c                                                                |
+--------------------------+-------------------------------------------------------------------------------+
| command                  | mpirun	--mca btl self,sm --host burl-v20z-0 -np 1 --prefix /opt/openmpi/1.3   |
|                          | src/MPI_Cart_create_nonperiodic_c                                             |
| duration                 | 0 seconds                                                                     |
| exit_value               | 77                                                                            |
| result_message           | Skipped                                                                       |
| result_stdout            | MPITEST info  (0): Starting MPI_Cart_create with reorder = false test         |
|                          | MPITEST skip (0): WARNING --  nodes =	1   Need   6 nodes to run test          |
| start_timestamp          | Fri Apr 11 19:32:43 2008                                                      |
| test_name                | MPI_Cart_create_nonperiodic_c                                                 |
+--------------------------+-------------------------------------------------------------------------------+
| command                  | mpirun	--mca btl self,sm --host burl-v20z-0 -np 1 --prefix /opt/openmpi/1.3   |
|                          | src/MPI_Graphdims_get_c                                                       |
| duration                 | 0 seconds                                                                     |
| exit_value               | 77                                                                            |
| result_message           | Skipped                                                                       |
| result_stdout            | MPITEST info  (0): Starting MPI_Graphdim_get test                             |
|                          | MPITEST skip (0): WARNING --  nodes =	1   Need   6 nodes to run test          |
| start_timestamp          | Fri Apr 11 19:32:43 2008                                                      |
| test_name                | MPI_Graphdims_get_c                                                           |
...
}}}


Unfortunately, [http://search.cpan.org/~darren/Text-TabularDisplay-1.22/TabularDisplay.pm Text::TabularDisplay] has no `separator()` function, so this might need to be a patch for `Text::TabularDisplay`. Or maybe [http://search.cpan.org/~akste/Data-ShowTable-3.3/ShowTable.pm Data::ShowTable] has some separator functionality? ",1207949314,1207949314,minor
350,task,jjhursey,jjhursey,v3.0,new,,PostgreSQL Users,"To improve security and distinguish between the different uses of the {{{mtt}}} database we need to create some specialized user roles.

The user roles should be as follows (* indicates a new creation)
{{{
 Role           | Privileges               | Use
----------------+--------------------------+----------
 mtt_viewer     | Read only access         | Reporter (normal)
 mtt_submitter* | Insert, Read only access | Submit
 mtt_updater*   | Update, Read only access | Reporter (auth)
",1208196627,1208196627,major
351,enhancement,jjhursey,jjhursey,v3.0,new,,"Auto Normalize on configure, runtime, and network","Add logic to database schema, and submission scripts to normalize on configure arguments, runtime arguments, and network arguments in a uniform manner.

This will allow more focused (maybe even faster) queries on specific 'features' in the database runs.

Ideally this would be implemented as a [http://www.postgresql.org/docs/8.1/static/plpgsql.html PL/SQL] function triggered on inserts into these areas. This keeps the code out of the {{{submit.php}}}, thus making a transparent feature of the database.",1208196943,1208211370,major
352,defect,jjhursey,jjhursey,v3.0,new,,Document new server side scripts,"Document the new server side scripts on the wiki.

Also document what to do when they identify a problem.",1208198148,1208198148,minor
353,enhancement,,emallove,v3.0,new,,"Create ""Show all"" and ""Hide all"" controls for the Reporter","There needs to be a JavaScript doohickey somehwere on the Reporter screen that sets all the show/hide menus to ""hide all"" and ""show all"".",1208274637,1208274637,minor
354,enhancement,,emallove,v3.0,new,,"MTT needs a ""restart"" feature","If MTT is killed/interrupted by a signal (or a phase fails for any reason), it should be able to pickup where it left off right before it died. The overriding aim here is to reduce the use of `--clean-start`, which can be wasteful of
time and testing resources (and which I currently use at all times). Here are the scenarios:

    1. '''MTT is killed by a signal''': MTT could set up a signal handler that would write some checkpoint meta data after receiving the signal (is this anything like OMPI's checkpoint/restart feature?). If MTT was invoked again out of the same scratch area, it could then read the checkpoint data and pick up where it left off.
    1. '''INI section XYZ fails''': Tell MTT to go back and retry failed sections (this is what `--force` does, I think).
    1. '''INI section XYZ passes''': A section passes, but the user wants it repeated anyway.
 
(2) and (3) might be possible with a careful combination of `--force` and `--section`/`--phase` options, but could MTT be made more intuitive on this? Maybe MTT restarted out of the same scratch area could look for indicators that a phase could be redone with a potentially different result (e.g, file modification times on ""Get"" source code). Instead of just `--force`, we need other ways to control what MTT redoes or skips over (e.g., a `--restart` option) when rerun with a previously used scratch area.",1208454397,1208788834,major
355,enhancement,emallove,jsquyres,Future,new,,tooltips for reporter,"Currently, when browsing the reporter, if you hover over a link in the reporter, the browser (or mail client) may show the entire URL of the hyperlink as a tooltip (see attached screenshot).  Is there a way to show something nicer / smaller?  In the attached screenshot, either no tooltip or a tooltip showing ""Drill down to all 1.2.7a.... results"" would be nice.",1208784769,1208803777,minor
356,enhancement,,jsquyres,v3.0,new,,"""specify_module=foo"" listed multiple times causes Bad Things","Per this e-mail thread:

    http://www.open-mpi.org/community/lists/mtt-users/2008/05/0542.php

If ""specify_module"" is listed multiple times in the INI file, it gets a wonky value and Bad Things happen (e.g., the perl ""require"" fails).  This seems like an error we should be able to catch and print an intelligent message about (before having a perl ""require"" fail).",1210849347,1210849347,major
357,defect,jjhursey,pasha,v3.0,closed,fixed,Removing duplicated functions and and unifying some config.inc,The patch removes duplicated functions and eliminates hardcoded username and password. Please review.,1211283947,1313419691,major
358,defect,,emallove,v3.0,new,,Print verbose messages of why Test run sections are being skipped,"MTT prints helpful `Verbose` output when it skips a test build on account of a failed MPI install:
   
{{{
Failed build for [ompi-svn-head] / [17851] / [clustertools-8.0-developer] / [mpicxx-64] -- skipping
}}}

It needs to do the same for Test runs. It's a little terse now:

{{{
>> Test run [trivial]
Value got: _
Evaluating: trivial-32,trivial-64,trivial-stlport4
Replacing vars from section test run: trivial: trivial-32,trivial-64,trivial-stlport4
Got final version before escapes: trivial-32,trivial-64,trivial-stlport4
Returning: trivial-32,trivial-64,trivial-stlport4
Value returning: trivial-32,trivial-64,trivial-stlport4
}}}

Somthing along the lines of ''No tests to run in section ABC, because Test build section XYZ was skipped''.",1211560916,1211560916,major
359,defect,,emallove,v3.0,closed,fixed,Determine compiler_name using Pre-defined Compiler Macros,"Currently MTT relies on users being good citizens to fill in `compiler_name` INI params, but this should be automated. Borrowing an idea ([https://svn.open-mpi.org/trac/ompi/browser/trunk/config/ompi_check_vendor.m4 ompi_check_vendor.m4]) from the OMPI config/ area, we can determine the compiler vendor using pre-defined compiler macros.",1211575153,1222097739,major
360,task,emallove,emallove,v3.0,closed,fixed,Pipe characters do not work in DoCommand::Cmd (document associated INI limitations),"`DoCommand::Cmd` does not seem to parse `|` characters the way it should. The following command outputs `hello | grep hello`, but it should output just `hello`.

{{{
MTT::DoCommand::Cmd(1, ""echo hello | grep hello"");
}}}

Output:

{{{
...
          'result_stdout' => 'hello | grep hello
...
}}}",1212607670,1213904280,trivial
361,defect,emallove,emallove,v3.0,closed,fixed,Reporter needs the ability to use AND queries on a single column,"For a given column, the only way to search on `foo` ''and'' `bar` would be to enter `foo.*bar|bar.*foo` in a search field, which doesn't scale. One interface would be to have `[+]` buttons next to the search boxes which would make more search fields appear. E.g.,

{{{
 Stdout _foo_________ [+]
}}}

User clicks the `[+]`, and then another textfield control appears, e.g.,

{{{
 Stdout _foo_________ [+]
        _____________
}}}",1212688830,1213799830,major
362,defect,,emallove,v3.0,new,,Condense Reporter output pages,"[http://www.open-mpi.org/mtt/index.php?do_redir=699 This report] (which is also attached) is
big at 3MB (and zips to 4KB). Reporter should do a better job compressing what it sends.

 1. Some of the field names could be shortened, e.g., rename `text_start_timestamp` to `t_st`. Since over-sized query-strings would seem to be a common problem for Joe Web Developer, I looked around for some built-in PHP ''query-string compression'' (?) functionality but didn't find anything.
 1. Reporter probably does not need to transmit parameters with a null value. E.g., prune out `&foo=&bar=&baz` parameter settings.
 1. CSS would eliminate a lot of the old-fangled HTML style tags used in the Reporter, e.g., `<option style='width: 300px'>`. In other words, Reporter ought to list style attributes once in a single CSS style sheet, instead of in ten zillion HTML tags.
 1. Can some of the !JavaScript be cached on the client side?

I'm sure there's more to add to this list ...",1212691143,1212691143,major
363,enhancement,,emallove,v3.0,new,,Add mouse-over tips for the result column cells,"It would be helpful to have some some interesting percentages displayed in mouse over bubbles for the result counts columns. E.g., in the below link, mousing over the red `3604` square in this link could show something like ''3% of row's total test runs failed''.

  http://www.open-mpi.org/mtt/index.php?do_redir=701

This helps to answer a question such as, ''roughly how do ABC's tests results compare to XYZ's test results?'' (See also #355.)

Maybe there just needs to be a toggle or preference to switch from ""count view"" to ""percentage view""? (See the attached two HTML reports. Don't mind the completely random and incorrect percentages used. You get the idea.)",1212699640,1212700308,major
364,defect,emallove,emallove,v3.0,closed,fixed,Bitness searching is slightly broken in Reporter,Can't do a Postgres regexp (`~*`) search on a bitmapped field. (See http://www.open-mpi.org/mtt/index.php?do_redir=703),1212704345,1213799830,major
365,defect,,emallove,v3.0,new,,Warn about unknown INI parameters,"MTT initializes itself using the INI file before executing any phases. During this initialization, it should check and print warnings for any unrecognized INI parameters. It currently ignores them silently.",1215119469,1215119469,major
366,defect,,emallove,v3.0,closed,worksforme,SKaMPI performance test results bork the X-axis in Reporter graphs,"`SKaMPI` performance test results are borking the X-axis in the graphs:

    http://www.open-mpi.org/mtt/index.php?do_redir=750

`SKaMPI` test data differs from the other latency-bandwidth test suites in ompi-tests because the `*.ski` file iterates over a series of node counts. A workaround is to change this line in the .ski file:

{{{
   for nodes = 2 to np step * 2 do
}}}

To this:

{{{
   for nodes = np to np step * 2 do
}}}

Should we create special `mtt*.ski` files for this special ''non-iterating'' use case? (See [source:trunk/lib/MTT/Test/Analyze/Performance/SKaMPI.pm SKaMPI.pm])",1215539762,1216848338,major
367,defect,,emallove,v3.0,new,,MTT client can't find MTT support libraries if invoked from <topdir>/lib,"If client/mtt is invoked from `lib` directory, `<mtt-top-dir>/lib/lib` gets into `@INC` and so the first `use MTT::Foo` dies. The workaround is to simply `cd` into another directory like `$HOME` or `$TMPDIR`.

{{{
$ pwd
/workspace/emallove/mtt-sandbox/lib
$ /workspace/emallove/mtt-sandbox/client/mtt --file ~/mtt-utils/ini/all.ini
...
*** ERROR: Module aborted during require: MTT::MPI::Get::AlreadyInstalled: Can't locate MTT/MPI/Get/AlreadyInstalled.pm in @INC (@INC contains: /workspace/emallove/mtt-sandbox/lib/lib /ws/ompi-tools/lib/perl5/5.8.8 /usr/perl5/5.8.4/lib/sun4-solaris-64int /usr/perl5/5.8.4/lib /usr/perl5/site_perl/5.8.4/sun4-solaris-64int /usr/perl5/site_perl/5.8.4 /usr/perl5/site_perl /usr/perl5/vendor_perl/5.8.4/sun4-solaris-64int /usr/perl5/vendor_perl/5.8.4 /usr/perl5/vendor_perl .) at (eval 59) line 3, <SHELL> line 8.
$ cd /tmp
$ /workspace/emallove/mtt-sandbox/client/mtt --file ~/mtt-utils/ini/all.ini
...
}}}
",1215792197,1215792197,minor
368,enhancement,,emallove,v3.0,new,,MTT should display progress using ncurses,"This is mostly a rather useless and cosmetic improvement, but wouldn't it be fun if MTT didn't move the cursor as it churned through a test run? E.g., instead of seeing these lines append one after the other to STDOUT, the cursor stay put. The count/percentage numbers would update ''in place''.

{{{
 ### Test progress: 26 of 242 section test executables complete (10%)
 ### Test progress: 52 of 242 section test executables complete (21%)
 ### Test progress: 78 of 242 section test executables complete (32%)
 ### Test progress: 104 of 242 section test executables complete (42%)
 ### Test progress: 130 of 242 section test executables complete (53%)
 ...
}}}

I just noticed that [http://git.or.cz/git git] does this on a clone operation, and it made me happy.",1216318652,1216401602,minor
369,defect,,jsquyres,v3.0,new,,Ensure timestamps received in submit.php are correct,"We had a problem recently where a client's clock was way off from reality -- they were submitting results ""from the future.""

We can fix this by having the client also submit what time it thinks it is ""now"".  submit.php can compare its ""now"" to the client's ""now"" and calculate an offset.  Then factor that offset into all the timestamps in the client's submitted data.  This will normalize all the client's timestamps to the server's time base.",1216758747,1216758756,major
370,defect,jsquyres,jsquyres,v3.0,closed,fixed,Stop tests when disk space gets too low,"MTT should frequently check the disk space left on the filesystem(s) that it is running on.  If the disk space falls below some pre-determined percentage or value (e.g., use a default ""5%"" INI field or somesuch), MTT should pause for a while (i.e., equivalent to ""touch $HOME/mtt-pause""), and if the disk space doesn't go above the threshhold, report and quite (i.e., equivalent to ""touch $HOME/mtt-stop"").",1216758852,1216776426,critical
371,defect,,jsquyres,v3.0,new,,Submit corefile backtraces to database,"When a corefile is dropped as a result of a test, MTT should snarf the backtrace from the corefile and submit it as part of the results.

This will require a little more smarts from the client and a new column in the database.",1216758942,1216758942,major
372,defect,timattox,jsquyres,v3.0,assigned,,Allow finer granularity of scratch trees,"In some organizations, it would be most beneficial to be able to download and build MPI's in one filesystem, but then install and run them from another.

For example, it may take hours (!) to build Open MPI on a networked filesystem, but it could be built in minutes on a local filesystem.  After being built, it could be installed to the networked filesystem (which would take much less than ""hours"") and then all the tests can be built and run from the networked filesystem.

This could be achieved by creating a finer-grained ""scratch"" specification -- perhaps something like:

 * MPI get and Test get
 * MPI source expansion and building
 * MPI target installation
 * Test building / running
 * Test run results",1216759144,1221748970,major
373,defect,jsquyres,emallove,v3.0,closed,fixed,Timestamps can end up set to 1970-01-01 00:00:00 on some systems,"Mellanox has run into an issue of having start timestamps set to `1970-01-01 00:00:00`. E.g.,
    
    http://www.open-mpi.org/mtt/index.php?do_redir=787

The system in question seems to have the correct time of day. Grabbing the time in the same way that `MTTDatabase` does, seems to yield a sane timestamp:

{{{
$ perl -e 'use Time::Local; print gmtime(timegm(gmtime())) . ""\n"";' 
Tue Jul 29 14:59:37 2008
}}}

More investigation is needed.

(See also #369)
",1217347402,1217454885,major
374,defect,,emallove,v3.0,new,,Fill in undef fields in the case of a null MPI install or Test build,"MTT should automatically set some defaults in the case of a NULL `MPI install` or `Test build`. The case is when the user does two isolated MTT runs - one that does '''not''' submit to the database, and one that '''does'''. E.g.,

{{{
$ client/mtt --section ""textfile ..."" --no-test-run ...
$ client/mtt --section ""database ..."" --test-run ...
}}}

The resulting report is littered with `undef` values. E.g.,

    http://www.open-mpi.org/mtt/index.php?do_redir=797

In the above case, MTT could have checked the meta-data, and filled in some of the `undef` fields. This means having MTT (e.g., the `MTTDatabase` Reporter plug-in) fire off a couple of submissions for the missing `MPI install` and `Test build` data before submitting the ''main'' `Test run` results. This would save the user the time of redoing their whole MTT run.

(Related to #12 and #158)",1217619318,1217619318,minor
375,defect,,emallove,v3.0,new,,Eliminate MTT database server errors in submit.php,"[source:/trunk/server/php/submit/index.php The PHP submit script] still runs into the occasional (and inexplicable) MTT databse server error. They all seem to have the form:

{{{
Invalid test_build_id () given. Guessing that it should be 0 
}}}

I've attached a compendium of all the MTTDatabase server error emails that I've received over the past year or so in the hopes that with them, we can root cause the issue.
",1217624888,1313420003,major
376,enhancement,,emallove,v3.0,new,,Add a Graphing Preference to roll-up line plots for identical runs,"MTT needs a Graphing Preference to roll-up identical line plots by average, minimum, or maximum. E.g., in the below graphs, the user should be able to view the five identical tests in a single line plot.

  http://www.open-mpi.org/mtt/index.php?do_redir=803

Consider three separate !NetPipe runs (all run with identical MPIs, runtime parameters, run on the same cluster, etc.) with the below output:

{{{
  ...
  0: 1 bytes  68255 times --> 7.30 Mbps ...
  ...
  0: 1 bytes  68255 times --> 9.30 Mbps ...
  ...
  0: 1 bytes  68255 times --> 8.30 Mbps ...
  ...
}}}

The resulting datapoints would be:

  1. average: 8.30 Mbps
  1. minimum: 7.30 Mbps
  1. maximum: 9.30 Mbps
",1217865913,1217865913,major
377,defect,,emallove,v3.0,new,,Message sizes in graph subtitles are off by one message size,`2-253` should read `1-195` in [http://www.open-mpi.org/mtt/index.php?do_redir=805 this report].,1217879058,1217879058,minor
378,enhancement,,emallove,v3.0,new,,Add popup date selector next to the Date range filter in the Reporter,"In the MTT Reporter, add a little calendar popup (of the sort found [http://www.mattkruse.com/javascript/calendarpopup here]) next to the `Date range` filter.",1218209605,1218209605,trivial
379,defect,,emallove,v3.0,new,,Abort (or warn) ASAP if a module doesn't compile,"MTT can progress for quite a long time before encoutering a fatal error in one of it's modules. It should warn about an upcoming error of this kind, that is, do a quick `eval ""use Foo.pm;` on each of the modules that will be used, and print big warning(s) about ones that are not going to work. This would prevent the scenario where the user has to restart an MTT run that has run for hours due to it dying hours into an otherwise okay run. Maybe MTT should also have an option that would tell it to skip over sections that use problematic modules? This way, MTT doesn't completely abort what could be at least a ''partially'' successful run. (See also #365 - ''warn about unknown INI parameters''.)
",1218662231,1218662231,major
380,enhancement,,jjhursey,v3.0,new,,Add Bisect feature,"It would be really awesome of MTT could do a bisection search through a set of revision numbers and determine where a problem started to occur. Given a range of revision numbers, and a test that either succeeds or fails the bisect functionality would iterate though the various revisions until it found the culprit.

GCC has regression-hunting tool that does something similar to what we are looking for:
{{{
http://gcc.gnu.org/ml/gcc/2007-04/msg00635.html
}}}

Currently we do this by hand creating a set of INI files with various revisions and then watch as they complete. This would automate that step.",1220979715,1221750817,major
381,defect,emallove,emallove,v3.0,closed,fixed,Javascript permalink creator link is broken,"The new non-contiguous date range feature which wraps date ranges in quotes has broken the permalink creator links. Some kind of `s/""//` needs to be done before passing the date range to the javascript `OpenPermalinkConfirmation`. Reporter should accept a ;-delimited list of date ranges ("";"" and not "","" delimited so we don't conflict with date range formats that contain commas, etc., `Sep. 14, 2007`).",1227044230,1228343330,major
382,defect,,rusraink,v3.0,new,,Warn user about language environment flag (LANG),"Hello,
when running client/mtt from a shell which has LANG (or LC_ALL) set to anything other than english (en_*), the called applications (such as subversion), will output to stdout/stderr in unexpected ways -- making mtt believe the command failed; when it actually succeeded:
{{{
svn co https://svn.open-mpi.org/svn/ompi-tests/trunk/ibm
...
A    ibm/topology/sub.c
 U   ibm
Ausgecheckt, Revision 1562.
}}}

instead of:
{{{
A    ibm/topology/sub.c
 U   ibm
Checked out revision 1562.
}}}

As a fix, {{{client/mtt}}} should store / reset the {{{LANG}}} and {{{LC_ALL}}} variable or warn the user and bail out.


",1227634280,1228150020,minor
383,defect,emallove,emallove,v3.0,new,,Print a warning if a --section filter does not match any sections,"It is easy to have a typo go unnoticed in a --section option because MTT silently proceeds without warning. When a --section option does not match a single INI section, a warning ought to be printed. Also, since MTT does not support disconnected scenarios (#12), it should print a warning when the user does not have an MPI get or MPI install section in their INI file.",1233330443,1233330443,major
384,defect,emallove,emallove,v3.0,new,,Sanity check the textfile_textwrap,"The `textfile_textwrap` parameter should be sanity checked before using to prevent the below fatal error.

{{{
Quantifier in {,} bigger than 32766 in regex; marked by <-- HERE in m/\G([^\n]{ <-- HERE 0,999998})(\s|\z)/ at /usr/lib/perl5/5.8.5/Text/Wrap.pm line 46.
}}}

The above error resulted from the following setting the INI file:

{{{
textfile_textwrap = 999999
}}}",1236971282,1236971282,major
385,defect,emallove,emallove,v3.0,new,,Display permalink ID number somewhere on the MTT Reporter web page,"When a permalink is visited, the MTT reporter redirects the web browser to the permalinked report. When this happens, the address bar is overwritten with the long nasty query string that is stored in the database. It would be useful if the original {{{do_redir}}} ID number were still visible on the page after the address bar gets overwritten.",1239819455,1239819455,minor
386,defect,,emallove,v3.0,new,,Enhance terminate_files feature for quicker response,"`terminate_files` direct the MTT client to interrupt testing, submit results for completed tests, and exit. The problem is that the currently running test must complete before MTT acts on a `terminate_file` (which is a pain, if tests are taking hours to time out). It would be better for MTT to ''interrupt'' the currently running test (maybe discard it's result to avoid recording it as a real failure), submit completed test results, and exit. (see also r848)

",1253894392,1253894425,major
387,defect,,emallove,Future,new,,Add RSS monitoring,"A mechanism is needed to trigger the start of an MTT run at the moment an RSS ""event"" occurs. For example, it might be desirable to build MPI and test it after a certain Trac ticket is closed. MTT could subscribe via RSS to a Trac ticket (e.g., svn.open-mpi.org/trac/ompi/ticket/2054?format=rss), and begin testing when a regular expression matches an RSS update. E.g., with the below INI parameter settings, MTT ought to begin execution when !#2054 is marked ''closed''.

{{{
rss_trigger_url = svn.open-mpi.org/trac/ompi/ticket/2054?format=rss
rss_trigger_regexp = status changed from \w+ to closed
}}}",1255533253,1255533253,major
388,defect,,emallove,v3.0,new,,"""configure: No such file"" errors in IBM test suite","Several sites report ""configure: No such file"" errors in their ibm test builds (http://www.open-mpi.org/mtt/index.php?do_redir=1170). This may be a site-specific issue with Autotools not being properly set in the MTT client's environment, or a defect in the implementation of the `svn_post_export` INI parameter. The current workaround (which appears to work for Sun) is to put `autogen.sh` before `configure` in the `shell_build_command`.",1257365926,1257366121,major
389,task,,emallove,v3.0,closed,fixed,Migrate MTT server-side code to PHP 5.x,"In order to allow the www.open-mpi.org/mtt website to move to PHP 5.x (from PHP 4), the [source:trunk/server/php server-side code] needs to be migrated to PHP 5.x. Use http://www.php.net/manual/en/migration5.php as a guide.",1259946339,1338376324,critical
390,defect,,emallove,v3.0,new,,MTT Reporter needs to escape special characters in SQL queries,"In the below MTT report, clicking on any of the red failure squares incorrectly opens up a 0 results page:

http://www.open-mpi.org/mtt/index.php?do_redir=1189

Adding `&sql=2&debug=on` to the URL reveals the following problematic SQL:

{{{
...
(configure_arguments ~* 'CFLAGS=-g -pipe') AND
(configure_arguments !~* '-enable-picky') AND
(configure_arguments !~* '-enable-debug') AND
(configure_arguments !~* '-enable-mpirun-prefix-by-default')
...
}}}

The `""` and `-` characters have special meaning (see [wiki:WebUIGuide]), and in the above case - report.php misinterprets them.",1263415479,1264456380,major
391,defect,,emallove,v3.0,new,,"Create a test result ""categorizer""","There needs to be an automated process to categorize MTT results.  Out of a batch of MTT results, many failures will generally fall into only a few categories (e.g., a sys admin issue, SEGV, etc.). Currently, this type of categorization has to be done manually.  Specifically, the user performs the following steps:

  1. From the top level summary page of results, click the `Fail` column header for `Test runs`, which filters all results by test run failures  
  1. Click `Detail`, which displays STDOUT, STDERR, and more for each test run failure
  1. Look for result ''signatures'' to group the failures, e.g., a group of errors outputs: {{{some error message foo}}}
  1. Click {{{[Advanced]}}}, filter out results by entering the following in STDOUT (note the use of the negating {{{-}}} character): {{{-""some error message foo""}}}
  1. Repeat the above steps - group by group
  
The above steps need to be automated.",1267652153,1267652153,major
392,enhancement,,emallove,v3.0,new,,Specify/Simple.pm needs special exec param functionality for test groups,"The `Specify/Simple.pm` module allows the user to create groupings of tests within an INI section that have their own pass condition and np values, e.g., from the `[Test run: intel]` section:

{{{
# These tests sleep for 90 seconds (!) before attempting to process
# any messages.  So give it a really long timeout value.
simple_really_slow:tests = src/MPI_Isend_flood_c src/MPI_Send_flood_c
simple_really_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_really_slow:exclusive = 1
simple_really_slow:timeout = &sum(800, &multiply(12, &test_np()))
}}}

Users also need the ability to add in special `exec` parameters for test groups, e.g., the below INI params should add `-mca mpi_yield_when_idle 1` to mpirun for the IBM loop_spawn test:

{{{
# Do loop_spawn tests in a separate section
simple_loop_spawn:tests = dynamic/loop_spawn
simple_loop_spawn:exec_param = -mca mpi_yield_when_idle 1
}}}",1271190988,1271190988,major
393,defect,,emallove,v3.0,closed,invalid,MTT erroneously reports a failure on exit status 0,"This loop_spawn test appears to have passed, though it's marked 
as FAIL: http://www.open-mpi.org/mtt/index.php?do_redir=1233 

Its pass condition in the INI file is set to: 
{{{
  pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
}}}

(See also: http://www.open-mpi.org/community/lists/mtt-users/2010/04/0729.php)",1271431350,1271859763,major
394,defect,,emallove,v3.0,new,,Funclets returning a scalar cause a confusing Abort,"If a user-defined funclet (defined in a file set with {{{funclet_files}}}) returns a scalar (instead of an array reference), MTT aborts with a confusing error:

{{{
...
Returining outter reference
Returining reference to an array of a single scalar
*** ERROR: Could not evaluate: $ret = MTT::Values::Functions::MyFunclets::foo();: Undefined subroutine &MTT::Values::Functions::MyFunclets::foo called at (eval 1919) line 1, <HANDLE> line 1150.
}}}

`EvaluateString` should convert the scalar to an array reference containing a single scalar, so that user-defined funclets are allowed to return scalars.",1273761517,1273761679,major
395,defect,,emallove,v3.0,new,,MTTDatabase needs to clearly report cause of upload failures,"The `MTTDatabase` module may fail to upload test results to the database, though the root cause of why the results failed to upload is not clearly sent back to the user.  E.g., the user will see only the following in the debug output: 

{{{
...
MTTDatabase client getting a client serial number...
MTTDatabase client trying proxy:  / Default (none)
MTTDatabase proxy successful / not 500
MTTDatabase client got response: 
*** WARNING: MTTDatabase client did not get a serial
...
}}}

In a later phase (e.g., MPI install) the test results will not upload because the MTT client could not get a `client_serial`.  A Dumper on the HTTP response reveals that the cause of the upload problem is due to perl not being able to locate `HTML/HeadParser.pm`.  Simply installing `HTML/HeadParser.pm` on the client system will enable the results to upload to the database.

{{{
$response = $VAR1 = bless( {
     '_protocol' => 'HTTP/1.1',
     '_content' => '',
     '_rc' => 200,
     '_headers' => bless( {
        'connection' => 'close',
        'x-powered-by' => 'PHP/4.3.9',
        'client-response-num' => 1,
        'date' => 'Fri, 21 May 2010 13:59:28 GMT',
        'client-peer' => '129.79.247.128:80',
        'content-length' => '32',
        'client-aborted' => 'die',
        'client-date' => 'Fri, 21 May 2010 14:35:08 GMT',
        'content-type' => 'text/html; charset=UTF-8',
        'x-died' => 'Can\'t locate HTML/HeadParser.pm in @INC (@INC contains: /workspace/em162155/hpc/mtt-utils/mtt-utils-hg-clone-nightly-testing/lib /ws/ompi-tools/lib/perl5/5.8.8 /usr/lib/perl5/5.8.8/x86_64-linux-thread-multi /usr/lib/perl5/5.8.8 /usr/lib/perl5/site_perl/5.8.8/x86_64-linux-thread-multi /usr/lib/perl5/site_perl/5.8.8 /usr/lib/perl5/site_perl /usr/lib/perl5/vendor_perl/5.8.8/x86_64-linux-thread-multi /usr/lib/perl5/vendor_perl/5.8.8 /usr/lib/perl5/vendor_perl . /workspace/em162155/hpc/mtt/cron/mtt-sandbox/lib) at /usr/lib/perl5/site_perl/5.8.8/LWP/UserAgent.pm line 592, <SHELL> line 1.',
        'server' => 'Apache'
                          }, 'HTTP::Headers' ),
     '_msg' => 'OK',
     'default_add_content' => 1,
     '_request' => bless( {
        '_content' => 'SERIAL=1',
        '_uri' => bless( do{\(my $o = 'http://www.open-mpi.org:80/mtt/submit/index.php')}, 'URI::http' ),
        '_headers' => bless( {
           'user-agent' => 'MPI Test MTTDatabase Reporter',
           'content-type' => 'application/x-www-form-urlencoded',
           'content-length' => 8,
           'authorization' => 'Basic XXXXXXXXXXXXXXX='
         }, 'HTTP::Headers' ),
        '_method' => 'POST',
        '_uri_canonical' => bless( do{\(my $o = 'http://www.open-mpi.org/mtt/submit/index.php')}, 'URI::http' )
      }, 'HTTP::Request' )
   }, 'HTTP::Response' );
}}}
",1274453152,1274453152,major
396,enhancement,,emallove,v3.0,new,,Make hostlist INI parameter more flexible,"MTT has just one global `hostlist` for the `[MTT]` INI section, but there should also be a test run-specific way to set hostlist (the way there is for `np`).  The workaround is to create two `exec` parameters, e.g.,

{{{
...
exec:foo = mpirun @hostlist1@ ... &test_executable()
hostlist1 = --host wilma,fred
exec:bar = mpirun @hostlist2@ ... &test_executable()
hostlist2 = --host marge,homer
...
}}}",1279822340,1279822340,major
397,defect,,emallove,v3.0,new,,Limit the number of MTT server error emails sent,"Occasionally there are MTT database submission errors (see #375).  For each error, an email is sent to the user who submitted the MTT data to the server.  This is a good thing ... to a point.  There needs to be a limit on the number of such ''sizable'' emails sent to prevent a user's inbox from filling up.

(See also #187, r602, and r614)",1283547267,1313420310,minor
398,defect,,emallove,v3.0,new,,The stdout_save_lines INI parameter is sometimes broken,"This [http://www.open-mpi.org/mtt/index.php?do_redir=1907 report] contains over 7,000 lines of STDOUT, even though my INI file contains the following line:
{{{
stdout_save_lines = 100
}}}
See also #1200.",1284408598,1284408598,major
399,defect,,emallove,v3.0,new,,MTT Reporter should link-to/hide very long STDOUT fields,"Sometimes a user submits data with a ton of output, e.g., the below report is an MPI install with 9,000+ lines of STDOUT:

  http://www.open-mpi.org/mtt/index.php?do_redir=1909

The problem with this is that scrolling through so many lines of output can make it difficult to seperate one test result from the next.  The MTT Reporter should abbreviate beyond the first 50 or so lines and have a !JavaScript ""..."" link of some sort to view the remaining output.",1285009853,1285009853,major
400,defect,,emallove,v3.0,new,,Create a global timeout setting,"Our nightly MTT tests sometimes run longer than we would like them to, which interferes with our developers time on the cluster.  It would be valuable to have some kind of command-line timeout option or INI parameter that could halt or end the MTT client testing process.",1286546863,1286546863,major
401,defect,,jjhursey,Future,new,,Client should display stdout/stderr if Reporter section not supplied,"If the INI file does not contain a Reporter section, the MTT client should output the stdout/stderr with the --debug output to the main terminal. This helps debugging MTT ini files without submitting to the database or reading a text file after the test. This method gives immediate feedback in case there is a bad test or some such.
",1295458350,1295458350,minor
402,defect,emallove,emallove,v3.0,new,,time_to_terminate can hang due to underlying df hang,"The time_to_terminate() routine makes a call to the system ""df"" command.  df can hang (at least on Solaris) in a faulty NFS setup.  MTT should take this into account and not wait indefinitely for ""df"" to return.",1302875231,1302875231,critical
403,defect,,eugene,v3.0,new,,"reporter gives incorrect query results on ""second page""","If results to a query go to a second page, the results on the second page seem unreliable.  See mtt-devel mail archives:
http://www.open-mpi.org/community/lists/mtt-devel/2012/05/0589.php",1339011076,1339011076,major
404,defect,,eugene,v3.0,new,,reporter returns the same result twice,"I noticed that a particular result shows up twice in the data base.  This is for:

phase: MPI Install[[BR]]
date: 2012-05-31 02:31:57[[BR]]
Org: Oracle[[BR]]
Platform: burl-ct-x2200-2

The result shows a particular entry occurring twice.

Part of the problem is possibly the ""retry"" code I added to mtt/lib/MTT/Reporter/MTTDatabase.pm in _do_request{}:  if a result submit was unsuccessful, the client tries again.  For the case in question, there were three unsuccessful attempts to submit this particular result before there was a successful submit.  So, perhaps in this case, one of the earlier submits actually was successful, resulting in the duplicate DB entry.  While we see such retries often at Oracle, I have never seen another case of duplicate entries that I can attribute to this cause.",1339020881,1339420482,minor
405,task,,rotchfordf,v3.0,new,,svn authentication,"svn checkout https://svn.open-mpi.org/svn/mtt/branches/ompi-core-testers
Could not authenticate to server: rejected Basic challenge (https//svn.open-mpi.org)",1369870906,1369870906,blocker
