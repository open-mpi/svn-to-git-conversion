ticket,PosixTime,author,newvalue
1,1156418075,,Milestone MTT 1.0 deleted
1,1156510096,tdd,"There have been lots of discussion on this issue via email that have not been captured here.  I wonder if saving the http username and ip addr is redundant.  That is currently our usernames are organization accounts which also is stored in the results DB as Platform_id and we save the machine hostname the tests were ran on which makes me wonder if that might be similar to the IP addr or an equal replacement?
"
1,1156511690,tdd,"Jeff reminded me that platform_id is truly the cluster identifier so there really might be a need to store the _username in the results DB.  However, in the near term we can ask the MTT users to set the platform_id to include the organization's name and a cluster specifier.  Something like 
<Org name> <Org Location> (<Cluster Specifier>)
Sun BUR03 (ct-v440-0/1).

If we do that then we'll be able to do queries that search for platform_ids that contains an Org's name.  This actually might obviate the need for storing the _username."
1,1156786129,jsquyres,Terry thinks that we should add the HTTP username to summary.php in the Cluster Summary and Test Suite Summary tables.
2,1156418075,,Milestone MTT 1.0 deleted
2,1166657961,jsquyres,"(In [494]) Several changes spanning many areas:

 * Fixes #99: MPI install, Test Build, and Test Run sections will now
   emit a noisy warning if they refer to non-existent parent sections
   (MPI Get, Test Get, Test Build, respectively).
 * Refs #128: client side of ""--im-just-testing"" flag.  If the
   ""--trial"" option is given to the client, send a ""trial"" value of
   ""1"" via the MTTDatabase reporter.  Alternatively, ""trial = 1"" can
   be put in the [MTT] globals section of the ini file, but the
   command line will always trump whatever value is in the INI file.
   On the server side (once this is implemented), ""trial"" results will
   not be reported (by default) with other results and will expire out
   of the database after a short period of time (e.g., a week).
 * Add support for environment modules.  MPI install, Test build, and
   Test run phases can supply a comma-delimited list of values for the
   field ""env_module"" that will ""module load"" thost modules (in order)
   before invoking the phase.  These values are carried forward as
   relevant; for example, if you list an env_module for an MPI install
   phase, any Test build and Test run phase that uses that MPI install
   section will also load that module.
 * Refs #2: Add support for reference counting in the internal meta
   data for MPI get, MPI install, Test get, and Test build.  Each
   phase instance that uses another phase instance will increase the
   ref count as appropriate.  This is critical for a valid Trim phase.
 * Refs #2: More work was done on the Trim phase, but it's not yet
   complete.
 * Use mtt-wide constants for test FAIL, SKIPPED, TIMED_OUT, and PASS."
2,1172679987,emallove,Milestone v2.1 deleted
3,1156418075,,Milestone MTT 1.0 deleted
3,1156460680,jsquyres,"(In [226]) Fixes #3.

This turned out to be much more complicated than I thought, but I
ended up with an elegant solution to some of the stickier problems due
to Perl being crazy flexible.  It ends up with a lot of quoting in the
.ini file, but it works with minimal additional code in MTT.  Whew!

Added full support for the 3 MTT global variables:
 * hostfile
 * hostlist
 * max_np

I'll only describe the hilights here -- see the comments in
source:trunk/samples/ompi-core-template.ini for details of how these
three values are used.

 * '''IMPORTANT:''' The functlet &rm_max_procs() changed names.  It is
   now &env_max_procs().  The old name meant ""resource manager max
   procs"", but now that we can run with hostfiles, we're not
   necessarily running under resource managers.  Hence, the name
   change seemed appropriate.  However, this won't immediately break
   if you have an INI file that uses the old name -- you'll just get a
   warning and it'll automatically call &env_max_procs() for you.  Yay
   funclets!  :-)
 * Parse hostfiles and snarf in :X, slots, and max[_-]slots to
   calculate the max_np.
 * Parse hostlists to calculate the max_np.
 * Added funclets to get to the new global values (and the
   parsed/calcualted max_np values).
 * Added a super-duper cool ""specify the hosts"" bit to the MPI Details
   section in the ompi-core-template.ini file that uses the new
   funclets to specify the hostfile or hostlist if we have it (in an
   OMPI-specific way, which is why it's in the INI file and not
   hard-coded in MTT anywhere).  If your morbidly curious, see the
   ""hosts ="" field in the MPI Details section."
4,1156361128,jsquyres,"Forgot about this issue that may cause problems implemeting &exclude_filename():

 * It would be nice to be able to have a &remove() function that would take one list and remove elements from it, e.g.:
{{{
    &remove(&some_big_list(), ""foo"", ""bar"", ""baz"")
}}}
  But right now, this will first expand &some_big_list() and therefore make N instances of &remove().  It would still give the Right answer, but be horribly inefficient (i.e., if ""foo"" appears in &some_big_list(), then one of the instances will be ""&remove(""foo"", ""foo"", ""bar"", ""baz"")"" and its return will be empty -- so the union of answers from all the &remove instances will not have ""foo"" in it).  Even worse:
{{{
    &remove(&some_big_list(), &enumerate(""foo"", ""bar"", ""baz""))
}}}
  Will make the combinatorial of N and 3 instances of &remove(), which will definitely result in the wrong answer (because we'll have 3 copies of every item from &some_big_list() that is not ""foo"", ""bar"", or ""baz"" -- and two copies of ""foo"", etc.)

  It would seem like we should be able to pass lists around -- not do the default expansion and just be able to pass an explicit list.  Perhaps we should explore using ""@"" in the syntax...?  (hypothetically still allowing a perl ""eval""...?)
"
4,1156361684,jsquyres,"Recording more prior discussion on this topic:

The way we do the Intel tests for the tests that aren't supposed to pass isn't so great right now -- we have to have a section INI file section with a different ""pass"" rule.  It would be nice to be able to handle all the Intel tests in a single section -- the question is: how?  We talked about a few options, but it always got complicated -- either in the .ini file and/or in the implementation.  Here's some of the options we talked about:                  

 * one global expression, and individual overrides                            
{{{
pass = some_general_expression                                             
MPI_Abort_c_pass = some_other_expression                                   
MPI_Abort_f_pass = some_other_expression                                   
...                                                                        
}}}                                                                                
  This is the Automake-ish way, but isn't super-scalable (i.e., we have to explcitily list each test that is different).                      
 * give pass a list of tuples -- paring test names with expressions to check for success, something like:
{{{
pass = &enumerate( \                                                       
    &tuple(&remove(&tests, @nonzero_tests@), ..check for 0...) \             
     &tuple(@nonzero_tests@, ..check for non-0...) \                          
)                                                                          
}}}
  * This, unfortunately, has some problems:                                    
    * &tuple() could be implemented, but it is effectively a new datatype and may require some thought - see the discussion below about &remove() and lists in general            
    * the current parsing engine expands from inside-out.  So the              
    * above expression would evaluate the ""...check for 0..."" during the initial expansion.  It would not result in a list of tuples, where the second element of the tuple is an expression that can be evaluated later.  Possible solution for this is to put the ""...check for 0..."" expression in a string, but that feels kinda icky...?                                                           
"
4,1156418075,,Milestone MTT 1.0 deleted
4,1158204859,jsquyres,"(In [331]) Fixes #4, #11, #60.

 * Add more verbose output to test run --verbose such that you can
   tell which MPI the current set of tests are running with (per #60)
 * Modify usage of Test Run modules to return a more descriptive hash,
   allowing per-test specification of all kinds of values, such as np,
   pass, etc.  This allows the specification of groups of tests, some
   of which have different ""pass"" conditions than others (e.g., most
   tests are designed to return 0 exit statuses, but some return
   nonzero, per #4 and #11).
 * Modified Test/Run/Simple.pm to accept new syntax for the
   specification of groups of tests, and overriding the default values
   for each group (e.g., np, pass, ...per above)
 * Modified ompi-core-template.ini to use the new Simple module
   syntax.
 * Changed some internal nomenclature such that modules that used to
   be ""Test run"" are now ""Test specify"", to more accurately represent
   what they are doing (per #11)."
5,1156418075,,Milestone MTT 1.0 deleted
7,1156418075,,Milestone MTT 1.0 deleted
7,1156788404,jsquyres,"In further discussion the phone, we decided that at least for a first cut, the following would be sufficient:

 * User logs into a web page with their MTT username/password
 * User is presented a list of all their MPI installs (possibly filtered, etc.)
 * User can pick which MPI install to delete.  This implies a specific timestamp, compiler, build, etc.
 * The server will then delete that MPI install and any test build / test run information associated with that install (i.e., any results)."
7,1157252872,jsquyres,"(In [299]) Add a ""variant"" field to the test_run table in the new database schema
on the following inspiration: for the past 2 days, I've had failed
infiniband runs but successful TCP runs.  The cause was that I had
borked an IB driver install on my cluster.  So I wouldn't want to
invalidate/delete all my results -- only the IB variants (because the
failed results don't indicate anything about the MPI that was under
test; there was an external factor that was causing it to fail).

""Variant"" is a value that the MTT client maintains that has to do with
the expansion of the MPI Details section.  For example, if you have an
OMPI MPI Details section:

  exec = mpirun --mca btl self,&enumerate(""tcp"", ""openib"") ...

Then all the TCP runs will be one variant and all the OpenIB runs will
be the other (it actually doesn't matter which is which/which order
the MTT client expands &enumerate() -- looking at the results in the
MTT reporter will make it obvious).  So this schema change means that
the MTT client now needs to submit the variant value along with each
test result.

Adding this field gives a little more fine-grained control to ticket
#7 (user should be able to delete results from the database).

Refs #7."
7,1160080598,emallove,"Another implementation for results deletion is to have a delete checkbox on every row in the reports (similar to the {{{[i]}}} links) which would allow one to delete rows. The ""delete"" checkbox field will contain enough info to generate a {{{DELETE}}} statement via an authenticated script to i.e., delete the specified MPI Install (and if the user desires, all of its associated Test Builds and Test Runs). After deletion, an email should be sent to the owner(s) of the deleted tests, detailing which tests were deleted and why."
7,1165422469,jsquyres,"For now, people can e-mail Ethan and he can do it manually.  Move the automatic feature to 3.0."
7,1207610723,jsquyres,"Ishai from Mellanox just made a suggestion to me: why delete a ""bad"" record, ''and'' all records derived from a ""bad"" record?

Instead, why not just set a flag on a ""bad"" result?  For example, if an MPI install result is marked as ""bad"", any test build results that derive from it can also (on the fly, by the reporter) be displayed as ""bad"" (i.e., they can be tainted).  Similarly, any test run result that derives from a test build result that derives from a ""bad"" MPI install result can be displayed as such.  Similar for test builds and test run.

So we don't necessarily need to chase down all data related to a ""bad"" mpi install / test build (and delete it), you can just mark it ""bad"" and make the reporter a little smarter.  E.g., we already have the reporter ignore ""trial"" results by default -- why not also ignore ""bad"" results, and anything derived from a ""bad"" result?

That might be much easier. "
7,1207664441,emallove,"Replying to [comment:8 jsquyres]:
> Ishai from Mellanox just made a suggestion to me: why delete a ""bad"" record, ''and'' all records derived from a ""bad"" record? Instead, why not just set a flag on a ""bad"" result?

I like the idea of having the user invoke an SQL `UPDATE`, instead of a `DELETE`. (Maybe have a nightly script that deletes the ''bad'' results?) Side note, the way `trial` is currently implemented, the `trial` column is actually in all three tables: mpi_install, test_build, and test_run. In other words, there is no scan for ''derived'' records in the JOINed descendant tables. I think it is best to ''only'' mark the on-screen results as ""bad"". If the user is allowed to flag all derived `test_run` rows of an MPI install, they could end up inadvertently updating much much more than they bargained for.

In the Reporter, we would need to distinguish between `trial` and `bad` results. Some ideas:
 1. Make the `bgcolor` of `bad` table cells darker than `trial`
 1. Put `bad` results in a separate table (under the heading ''bad'')
 1. Provide a preference checkbox to hide `bad` results"
7,1207665324,jjhursey,"Technically this is an easy addition to the database and reporter.

Non-technically we run into some potentially contentious issues of trust that we have to deal with. We let any web user query testing results through the MPI Reporter interface, which is fine since they do not alter the database in any way. If we allow web users to mark a result as 'bad' now web users are changing the testing data. What if some malicious user/developer/competitor decides to mark add testing data as bad, and the nightly script ends up deleting the entire database. :( Do we trust any web user to do this? Should we require authentication to provide this operation to only those users in the Open MPI development testing community?

I think this is an important aspect to add to MTT, but we must also be able to handle the other issues that are needed to support it, and preserve the integrity of the database."
7,1207671737,jsquyres,"Replying to [comment:9 emallove]:
> I like the idea of having the user invoke an SQL `UPDATE`, instead of a `DELETE`. (Maybe have a nightly script that deletes the ''bad'' results?) Side note, the way `trial` is currently implemented, the `trial` column is actually in all three tables: mpi_install, test_build, and test_run. In other words, there is no scan for ''derived'' records in the JOINed descendant tables. I think it is best to ''only'' mark the on-screen results as ""bad"". If the user is allowed to flag all derived `test_run` rows of an MPI install, they could end up inadvertently updating much much more than they bargained for.

What does it mean to have a ""bad"" MPI install but a ""good"" test build/run that came from it?

From a general testing perspective, I don't think that's a good idea...

> In the Reporter, we would need to distinguish between `trial` and `bad` results. Some ideas:
>  1. Make the `bgcolor` of `bad` table cells darker than `trial`
>  1. Put `bad` results in a separate table (under the heading ''bad'')
>  1. Provide a preference checkbox to hide `bad` results

I like keeping it in the same table, but somehow visually marking them as ""bad"".  And I definitely agree that we need a trial-like way to select whether to show ""bad"" results or not (by default, I'd say not to show them).

FWIW, I'm becoming enchanted with the idea of just marking the results as bad -- not actually deleting them (not even later via cron).  Keep all the data.  We have the space.  Keeping everything also allows for rolling back of mistakes / misuse.

Replying to [comment:10 jjhursey]:
> Non-technically we run into some potentially contentious issues of trust that we have to deal with. We let any web user query testing results through the MPI Reporter interface, which is fine since they do not alter the database in any way. If we allow web users to mark a result as 'bad' now web users are changing the testing data. What if some malicious user/developer/competitor decides to mark add testing data as bad, and the nightly script ends up deleting the entire database. :( Do we trust any web user to do this? Should we require authentication to provide this operation to only those users in the Open MPI development testing community?

Agreed on many points; there definitely needs to be some kind of authentication before marking results as ""bad"".  It might be pretty easy to use the same HTTP auth that we use for submitting to the database (the HTTP auth username appears in a PHP $_SERVER[] field, IIRC) -- just put the same htpasswd controls on the subdirectory containing the PHP/pages for manipulating the data in the database (marking results as ""bad"" may only be the first action that we allow for manipulating the database data).  

Unless a ""superuser"" bit is set for the user, only allow a user to modify records that belong to them.  "
7,1207680333,emallove,"> > I think it is best to ''only'' mark the on-screen results as ""bad"". If the user is allowed to flag all derived `test_run` rows of an MPI install, they could end up inadvertently updating much much more than they bargained for.
> 
> What does it mean to have a ""bad"" MPI install but a ""good"" test build/run that came from it?
> 
> From a general testing perspective, I don't think that's a good idea...
>

Take Sun's nightly MPI installs, for example. They don't change from day-to-day (e.g., they repeatedly use the same tuple of cluster, configure arguments, compiler, etc.), but sometimes an MPI Install fails for a frivolous reason (like running out of disk space). The user only wants to mark an individual MPI Install as ''bad'', but it might be unclear that that single database record also keys to some ''good'' results (from previous MTT runs that went fine). There can be more to a result set than meets the eye, especially with all the column hiding/rolling-up that can occur with the GROUP BY clauses used in the Reporter. Maybe there's a safe way we can provide a shortcut for updating derived records in one fell swoop. (E.g., using `client_serial` comes to mind. This way the UPDATE would not impact rows outside the given MTT run.) I was mostly thinking along the lines of erring on the side of caution."
7,1207759317,jsquyres,"Replying to [comment:12 emallove]:

> Take Sun's nightly MPI installs, for example. They don't change from day-to-day (e.g., they repeatedly use the same tuple of cluster, configure arguments, compiler, etc.), but sometimes an MPI Install fails for a frivolous reason (like running out of disk space). The user only wants to mark an individual MPI Install as ''bad'', but it might be unclear that that single database record also keys to some ''good'' results (from previous MTT runs that went fine). 

It was my understanding that even if there were multiple MPI install records that were effectively identical (e.g., the v1.2 tarball didn't change overnight, so Sun tested the same OMPI v1.2 two nights in a row with the same results), they are still unique in the DB in some way -- one result will be mpi_install_id X and one will be Y.  Further, a test build is only cross-referenced to ''one'' mpi_install_id (e.g., X).  So if MPI install X is bad, it should mark any test builds that came from X as ""bad"", but not any test builds that came from Y.

Is that wrong?

> There can be more to a result set than meets the eye, especially with all the column hiding/rolling-up that can occur with the GROUP BY clauses used in the Reporter. Maybe there's a safe way we can provide a shortcut for updating derived records in one fell swoop. (E.g., using `client_serial` comes to mind. This way the UPDATE would not impact rows outside the given MTT run.) I was mostly thinking along the lines of erring on the side of caution.

Understood.  I can see how if the same version is tested multiple nights in a row, one would need to be sure to mark only the ''one'' result as ""bad"" (vs. all the results -- some of which are ""good"").  And therefore the values in the rollup row may decrease once it's marked as ""bad"" (e.g., false negatives/positives in the test build and test run columns).

Two random points:

 * My naieve SQL view is that we can be creative with the JOINed searches to do the daisy-chaining search for ""good"" results.
 * It would seem that we should be able to raise a warning (e.g., perhaps another nightly mail?) when a results are found in the DB that are effectively identical but have different results (e.g., Sun tests version ABC one night and it passes, but then Sun tests the same version the next night and it fails) because it would be a good datapoint for the system administrator that there might be something wrong with their system."
7,1207761099,jjhursey,"On Jeff's comments.

If an organization tests the same tarball two nights in a row with the same INI file these will be distinct in the database as you describe. One will be marked as MPI Install X and the other as MPI Install Y.

Point 1: Yes, it should be easy to Join tables such that we can see the hierarchy of testing resulting from a since MPI Install. So it is easy to make sure we mark all resultant data as 'bad' (or 'good') if it's parent in the hierarchy is marked as such. We need to define these rule a bit more finely, but it is possible.

Point 2: This is much much harder than it seems (maybe even impossible). To do this type of data mining would first assume that the testing data is 100% accurate and it collects all the necessary system data. For example two runs from an organization may look the same with regards to all of the data being collected (e.g., runtime options, configuration options, compiler, etc.), but may differ in a variety of ways not currently tracked by the MTT database such as firmware version or NFS mounting rules (i.e., the sysadmin might have changed the NFS mount such that Parallel I/O is no longer able to work effectively). So I don't doubt that such a feature would be useful, it is just hard to get right in the general case. For finely specified cases it may be possible to do, but may not be useful.

I think this conversation might be served better by a whiteboard and verbal discussion since it is kinda diverging into a lot of additional complexities.
"
7,1207762927,emallove,"Replying to [comment:14 jjhursey]:
> On Jeff's comments.
> 
> If an organization tests the same tarball two nights in a row with the same INI file these will be distinct in the database as you describe. One will be marked as MPI Install X and the other as MPI Install Y.
> 
> Point 1: Yes, it should be easy to Join tables such that we can see the hierarchy of testing resulting from a since MPI Install. So it is easy to make sure we mark all resultant data as 'bad' (or 'good') if it's parent in the hierarchy is marked as such. We need to define these rule a bit more finely, but it is possible.
> 
> Point 2: This is much much harder than it seems (maybe even impossible). To do this type of data mining would first assume that the testing data is 100% accurate and it collects all the necessary system data. For example two runs from an organization may look the same with regards to all of the data being collected (e.g., runtime options, configuration options, compiler, etc.), but may differ in a variety of ways not currently tracked by the MTT database such as firmware version or NFS mounting rules (i.e., the sysadmin might have changed the NFS mount such that Parallel I/O is no longer able to work effectively). So I don't doubt that such a feature would be useful, it is just hard to get right in the general case. For finely specified cases it may be possible to do, but may not be useful.
> 
> I think this conversation might be served better by a whiteboard and verbal discussion since it is kinda diverging into a lot of additional complexities.

The ""All phases"" view shows what Jeff is describing: MPI installs next to their associated test builds next to ''their'' associated test runs (pruned by date range, etc.). This is what made me think we should only have a control to flag the on-screen results (meaning no behind-the-scenes scanning for derived results that we assume they also meant to flag as bad). Basically, we force the user to drill down to the results they need to flag. 

Random thougt: I'm imagining this as a ""Flag these results as 'bad'"" button that is only visible if the user is logged in (sort of like the Trac buttons that appear when going from ""logged out"" to ""logged in""). The button will only have permission to update results from the user's own organization."
7,1208198067,jjhursey,"Some notes from our meeting today.

 * Authentication
  * .ht* access to authenticate with MTT org level username/password
  * Use a cookie, similar to Trac, to preserve login
  * Use a different PostgreSQL user depending on if logged in or not.
  * Admin superuser of some sort
 * Reporter
  * When logged in you can see all submissions, but only delete 'your' submissions.
  * Warn/Error when trying to mark a mixed aggregation where you only own part of the aggregation.
  * Maybe have an admin page for user preference/info input
  * Maybe even have a page for cluster information input (Refs #83)
  * ""Delete all"" Button for all entries on a summary page
  * Detail level check boxes next to each entry, with check all/none buttons that cover the whole page of results
  * Summary level check per row of aggregation
  * Summary level, investigate check boxes per cell (see if it makes the table too busy)
  * Maybe right click to popup a menu to drill directly down to the details in one click (Refs #344). Jeff will look into Javascript ways of picking up a right click.
 * Database (Josh)
  * Add a 'delete' field to the phase tables.
  * It would be nice to differentiate between 'deleted because my parent was deleted' and 'deleted because I was deleted'. Maybe make this a bit field?
  * Look into how to get an array of unique ID when running an aggregate query (Josh/Ethan).
  * Think about concurrent updates to the same set of rows from two different users. Transactions should help us here, but need to make sure the reporter knows how to deal with them.
"
8,1156418075,,Milestone MTT 1.0 deleted
8,1156427048,jsquyres,"An idea came up that we could simply send the executive summary web page output.  That may be fine.

My only thought here would be that if we send an HTML mail, we should set the mime-type properly in the mail so that mail clients can render it properly (i.e., don't just send HTML in the body and assume that mail clients can render it properly)."
8,1158084520,jsquyres,"Email is close to completion.

 * Set it to run daily at 9am.
 * Fix the fonts (make them all the same size)
 * Fix the OMPI graphic to display properly with the IMG size attributes set properly"
9,1156418075,,Milestone MTT 1.0 deleted
9,1159535300,jsquyres,"Performance testing and historical analysis are more important than this one, so we'll be attacking that first.  Leaving this ticket as a 2.0 milestone for now, but it may be pushed out beyond 2.0."
9,1172676900,jsquyres,"Feedback from OMPI develoeprs:

 * Ok to use full MTT client -- no need to slim down the functionality to make it easier to run; willing to take the time to setup some .ini files for common use scenarios and then just run with those.

My thoughts on this:

 * We need some ""no-op""-like modules for MPI Get and MPI Install that just fill in internal MTT client data structures.
    * Have the ability to point to a specific MPI installation (e.g., supply prefix dir, or perhaps the absolute location of the wrappers, mpirun, and anything else we need) or just find these things in the $PATH
 * We should fix #5 first, and/or add a ""cache time"" for SVN such that we won't check SVN for a new version unless the cache time has expired (or --force is used).  E.g., if a developer runs MTT and then runs it again 10 minutes later, it doesn't have to re-SVN-download all the tests.
 * We need a text-based output Reporter module to output the results, per #115."
9,1172677217,jsquyres,"Forgot to say -- we should also be convenient for developers if the scratch dir could be specified as part of the INI file (#208).

Filed the ""no-op"" MPI Get / MPI Install modules as ticket #209."
9,1172679987,emallove,Milestone v2.1 deleted
9,1173393363,emallove,"(In [645])  * Added `AlreadyInstalled` MPI Install plug-in
 * Enhanced `TextFile` reporter to print a summary of entire
   MTT run in tabular format
 * Added these parameters for TextFile section:
  * textfile_summary_header
  * textfile_summary_footer
  * textfile_detail_header
  * textfile_detail_footer
  * textfile_textwrap
 * Added `Hash::Merge` and `Text::TabularDisplay` CPAN
   modules to the MTT repository (to support the above new
   features)
 * Use `__PACKAGE__` constant in a few places, instead of
   hard-coding in the package name

Refs #9
Refs #115"
9,1178729658,emallove,"So far, several users have been able to test their workspaces using MTT."
10,1162648796,emallove,"To correlate INI configurations with results, we could also push the entire INI file into the database and key to it from the [source:/trunk/server/sql/schemas-v2.sql results table]."
11,1158204859,jsquyres,"(In [331]) Fixes #4, #11, #60.

 * Add more verbose output to test run --verbose such that you can
   tell which MPI the current set of tests are running with (per #60)
 * Modify usage of Test Run modules to return a more descriptive hash,
   allowing per-test specification of all kinds of values, such as np,
   pass, etc.  This allows the specification of groups of tests, some
   of which have different ""pass"" conditions than others (e.g., most
   tests are designed to return 0 exit statuses, but some return
   nonzero, per #4 and #11).
 * Modified Test/Run/Simple.pm to accept new syntax for the
   specification of groups of tests, and overriding the default values
   for each group (e.g., np, pass, ...per above)
 * Modified ompi-core-template.ini to use the new Simple module
   syntax.
 * Changed some internal nomenclature such that modules that used to
   be ""Test run"" are now ""Test specify"", to more accurately represent
   what they are doing (per #11)."
12,1172091222,emallove,"(In [623]) Added a ''simple'' web proxy using `HTTP::Daemon` (1) and
`LWP::UserAgent` (2) for MTT runs that run on hosts which
can not access the Internet.

{{{
$ client/mtt-relay --help
 --port|-p     Port that client/mtt-relay listens on (default: 8008)
 --host|-h     Specify client/mtt-relay's host (default: localhost)
 --url|-u      MTT results submission URL (default: http://www.open-mpi.org/mtt/submit/index.php)
 --debug|-d    Debug mode
 --help        This message
}}}

Basic usage:

{{{
$ client/mtt-relay --port 6789
}}}

The INI file's `[Reporter: IU database]` needs to be
modified to contain this line:

{{{
mttdatabase_url = host.where.mtt-relay.runs:6789
}}}

Refs #12 (Disconnected scenarios)

1 [http://search.cpan.org/~gaas/libwww-perl-5.805/lib/HTTP/Daemon.pm]
2 [http://search.cpan.org/~gaas/libwww-perl-5.805/lib/LWP/UserAgent.pm]"
13,1156464730,jsquyres,"Note currently that there are references to ""perfbase_xml"" throughout the code base where we expected to pass in an XML template file that specified how to parse the stdout of the test to extract the performance results.  

These will likely need to be updated."
13,1158940349,emallove,[changeset:345 First try] at supporting performance data in schema.
13,1159535212,jsquyres,Bumping this to v2.0.  It is becomming increasingly important...
13,1162335659,emallove,"(In [406]) sql/schemas-v2.sql:

 * NetPIPE exited with 36608 which does not fit in a smallint
 * Make bandwidth values double precision in units of Mbps (or did we
   want them to be integers converted to bytes, as some tests consider
   ''M'' 1000, and others 1024)

php/submit/index.php:

 * Set latency_bandwith data, and hook it into the results row 

refs #13
refs #55"
13,1162511095,emallove,"(In [411]) Added [source:/trunk/lib/MTT/Test/Analyze/Performance/IMB.pm] for Intel
Performance (aka Pallas) tests.  The plugin requires that only one
individual benchmark and one {{{np}}} be run at a time (E.g.,
{{{PMB-MPI1 PingPong -npmin n}}})

refs #13"
13,1162562572,emallove,"(In [412])  * While slurping in lines, differentiate between an empty string and
   undefined.
 * Typo: {{{save_output_on_pass}}} -> {{{save_stdout_on_pass}}}
 * Remove some unused variables

refs #13"
13,1162590731,emallove,"(In [415]) No need to look for NetPIPE's ""main loop"" intro

refs #13"
13,1162598273,emallove,"(In [416])  * axis_labels are not needed. Plugins can normalize to a certain unit.
   Currently it is bytes, Mbps, and usec for message_size, bandwidth,
   and latency respectively.
 * Provide DEFAULTs. Perf tests will vary in which fields they report
   on.
 * Accomodate for ''some'' fields in a single submission to be blank
   while others are filled in (part of this mess could be avoided with
   #118)

refs #13"
13,1164821923,emallove,"(In [458]) Added {{{imb performance}}} (fka Pallas) and {{{netpipe}}} sections to
[source:/trunk/samples/ompi-core-template.ini template]. (Refs #13)"
16,1156460829,jsquyres,"Wow.  This is already done.  Yay for foresight!

{{{
$ mtt --version
MTT Version 0.5
}}}

The version number is stored in lib/MTT/Version.pm."
18,1156435995,jsquyres,Fixed in r224.
19,1156464545,jsquyres,Done in r228.
20,1156464340,jsquyres,"(In [227]) Add support for getting max_procs under PBS-like resource managers.
Fixes #20."
22,1156508286,jsquyres,"(In [230]) Fixes #22.  Instead of deleting LD_LIBRARY_PATH, just prepend our
$libdir.  Also, when looking for the bindings, ensure to ''prepend''
the libdir to LD_LIBRARY_PATH, not ''append'' it."
23,1157086414,emallove,"(In [271]) closes #23

Squelched PHP Notice messages using error_reporting(). This should be
revisited someday to see if any of these are legitamate.

Made query string parameters carry over from invocation to invocation."
23,1157470397,emallove,"(In [310]) refs #23

- {{{isset}}} broke the URL trimming here.
- To allow more URL trimming, let's let {{{null}} be an alias for
  {{{All}}}."
24,1156514343,jsquyres,"(In [231]) Fixes #24

 * Make ""unknown_please_send_us_a_patch"" labels more descriptive on
   what exactly is unknown.
 * Add support for Sci Linux (HLRS)"
25,1158084570,jsquyres,Ethan is going to investigate w/ Pak.
25,1158240321,emallove,"(In [334]) refs #25

Add two funclets for N1GE (identical to the PBS funclets)."
26,1186598255,jjhursey,"The v3 schema is ready for this data. This is adding data for the {{{test_run_command.network}}} table/field.
"
26,1186598338,jjhursey,"Replying to [comment:3 jjhursey]:
> The v3 schema is ready for this data. This is adding data for the {{{test_run_command.network}}} table/field.

This should be:
The v3 schema is ready for this data. This is adding data for the {{{test_run_command.resource_mgr}}} table/field.
"
26,1187266086,jsquyres,This ticket now replaced by #257.
27,1186598294,jjhursey,"The v3 schema is ready for this data. This is adding data for the {{{test_run_command.network}}} table/field.
"
27,1187266101,jsquyres,This ticket now replaced by #257.
28,1156521375,jsquyres,Fixed in r234.
29,1156517871,jsquyres,This was fixed by r232 and/or r233.
30,1156541002,jsquyres,"(In [239]) Ensure that the version number is in the resulting struct.  This
appears to be a bug in XML::Simple, but I'm not 100% sure. 

Fixes #30."
31,1156535715,ethan.mallove@sun.com,"In light of this new use case (submitting results of a single run, from multiple hostnames), it also makes sense to change the concept of a unique MTT test run key from:

hostname, mpi, timestamp

to:

http_username, mpi, timestamp

This way we do not break up a single test run which happens to submit from multiple hosts."
31,1156536091,jsquyres,"I think you misunderstand the new use case.

The new use case is that multiple runs can be submitted from multiple hosts, but are still within the same cluster.  Specifically, HLRS will be submitting an entire MTT run via cron the batch scheduler.  Hence, it'll run on a single set of nodes, and reporting will come from one node for that entire MTT run.

The next night, the cron job will be kicked off again and the MTT job will be submitted to the scheduler, who will likely let MTT run on an entirely different set of nodes.  The point is that the results from these two nights should be considered to be from the same cluster, even though they were run on different nodes.

That being said, remember that the http username is used to classify ''all'' runs from a given organization.  So it's not sufficient to group results only by http username (e.g., the http username ""sun"" has a bunch of different clusters that it runs on)."
31,1156781315,ethan.mallove@sun.com,"Ah, then the conept of an MTT test run is not affected by this use case, since the results from an MTT test run will be submitted from one host and one host only.

To preserve the Cluster naming scheme (""platform_id hostname"") with the new use case, I propose the following change to ompi-core-template.ini:
{{{
mttdatabase_platform = you must set this value
}}}
change to:
{{{
mttdatabase_platform = &shell(""echo <you must set this value> `hostname`"")
}}}"
31,1156799281,jsquyres,"Note the < and > in the shell statement will be problematic.

What's your rationale for this proposed change?"
31,1157395378,emallove,"The rationale for tacking {{{hostname}}} to the {{{mttdatabase_platform}}} ini value, was that I thought we liked knowing which node the mtt client was run on."
31,1157396140,emallove,"(In [309]) closes #31

- Do not fuse hostname with platform_id for the Cluster column in the
  report
- Remove error control operator ('@') from function calls"
33,1156530641,jsquyres,"Ok, trac wouldn't allow me to attach it because the file is 1.4MB and the max attachment size is 256kb.  Doh!

Let me know if the description above is not sufficient.  I still have the file and can provide it out of band."
33,1156533661,ethan.mallove@sun.com,"An ""MTT test run"" is uniquely keyed by a Hostname, Mpi, and Timestamp tuple. An MTT test case is a single running of a command (e.g., ""mpirun"", ""make"", etc.). An MTT test run ""pass"" would be a series of ""MTT test cases"" belonging to a single MTT test run that do not contain a single test case failure.

To validate the counting of test cases and their corresponding test runs, use a small unchanging test database (something that is not potentially being currently updated). E.g.,

http://www.open-mpi.org/mtt/summary.php?date=all&db=mtt_test

A little mouseover balloon/bubble of some sort for the labels ""test run"" and ""test case"", explaining what test run and test case mean would be a useful addition."
33,1156852389,jsquyres,"And so it begins -- from an e-mail that I got from IU last night:

  Also I noticed that the summary page is a bit broken. For the cluster ""Odin at IU - Testing"" it shows only 1 test build, when if you look at the ""MTT Test Summary"" just below it ""Odin at IU - Testing"" shows that it completed both Trivial and ibm with success.

I think my point was lost on the teleconf yesterday.  All I want is some kind of legend on the summary page explaining the units of the columns.  Something quick and dirty is fine.  I don't really care if it looks like crap  because it can eventually be replaced by something much more aesthetic and/or common tooltip functionality provided by some back-end PHP library.

Just like we only wanted to bring in 2 friendly users (IU and HLRS) to limit the amount of bugs found, questions, problems, etc., I would like this legend to help stem this same question from every MTT user.  That's my only point."
33,1156853899,tdd,You know looking at the tables I noticed something that we did that I thought would actually should make this pretty abundantly clear.  Look under each table heading there is blurb in parens that say's either (by test run) or (by test case).  Why isn't this sufficient enough?  
33,1156856266,jsquyres,"Terry pointed out to me that we're being stupid.  :-)

The units ''are'' listed on summary.php, but in a small font underneath the titles for the tables.  So small that we looked at this text every time but failed to notice it.  ""By MTT test run"" and ""By MTT test case"".

We therefore have a suggestion -- move the small font text to in the tables themselves.  Right now, the results columns are 2-row headers that look something like this:

{{{
--------------------------------------------------
      | MPI Installs | Test Builds |  Test runs  |
      | Pass | Fail  | Pass | Fail | Pass | Fail |
--------------------------------------------------
}}}

We suggest removing the tiny font text and moving it to a third top header row in the table:

{{{
--------------------------------------------------
      |              By MTT test run             |
      | MPI Installs | Test Builds |  Test runs  |
      | Pass | Fail  | Pass | Fail | Pass | Fail |
--------------------------------------------------
}}}"
33,1156859946,jjhursey,"I guess (as an outside user) I don't know what the difference between ""BY MTT test run"" and ""By MTT test case"" in this context. Could you give me some more details on what you mean by this?"
34,1157400189,emallove,"There is a temporary workaround for this on the reporting end. The following search on {{{reporter.php}}} shows skipped tests.

{{{
Timestamp:           Past Two Weeks 
Phase:               Test Run
Stdout:              Skipped [contains]
All other fields:    default
}}}"
34,1159479515,jsquyres,"The client is now reporting tests as ""skipped"" -- ie., the test_result value is 3 (1=pass, 2=fail, 3=skipped, 4=timed out)."
34,1159535408,jsquyres,Re-assigning to Ethan because it's now a server-side problem.  :-)
35,1156560637,jsquyres,"This one just got more important.  :-(

After running a many-hour test run on a Cisco test cluster, the mtt client tried to submit 1773 results.  The Cisco proxy server started refusing connections somewhere around 1024 because it thought mtt was a malicious worm trying to spread itself.  So my results were effectively lost.

So it seems like we really need to make this better. "
35,1156773843,ethan.mallove@sun.com,"At the top of the bulk-submit will be the once fields, just like before. E.g.,
{{{
    os_name: SunOS
    os_version: SunOS 5.10
    platform_hardware: sun4u
    platform_type: solaris-10
    submit_timestamp: Sun Jul 23 15:43:54 2006
    mpi_install_section_name: solaris sparc
    mpi_name: ompi-nightly-v1.0
    mpi_version: 1.0.3a1r10944
    mtt_version_major: 0
    mtt_version_minor: 5
}}}
Then all other fields could be a comma-separated list of values. E.g.,
{{{
    success: '0','0','1','1','1',...
    mpi_get_section_name: 'name','name','name',...
    mpi_install_section_name: 'name','name','name',...
    mpi_details: ""long quoted string"",""long quoted string"",""long quoted string"",...
    ...
}}}
How will we handle multi-line fields? We need some kind of separator. I think something somewhat human-readable, yet having no possibility of showing up in test output would be nice, e.g., 
{{{
<><><><><><><><><><><><><><><><><><><><><>
}}}
Will the submission be zipped before it's HTTP posted, so we don't go near Apache's size limit?"
35,1156776957,jsquyres,"Good ideas here.

I like the bulk-fields at the top; that will likely be, by far, the biggest savings.  I think we need to define exactly what fields go in the top because that defines how we group test results (i.e., what exactly can go in one submission).  For example, if we say that only results from a single MPI installation can go in a single submit, we can move mpi_install and mpi_get_section_name (etc.) up into the first block, and then we don't need to specify those fields in any of the individal results.  Or, if we allow a bulk submission for multiple MPI installations, then they need to move out of the first block and be included in every result.  So I think we need to find a happy medium of which fields to include in which block.

As for the details of per-test results, it might be easier just to list them one after another and not try to combine them into single values.  Perhaps something like this (made up some field names just for example purposes):

{{{
success: 0
test_name: MPI_Allgatherv_c
mpirun_command_line: mpirun ...whatever...
stderr = << EOT
all the stdout
EOT
<><><><><><><><><><><><><><><><><><><><><><><><><><><>
success: 0
test: MPI_Allgatherv_f
mpirun_command_line: mpirun ...whatever...
stderr = << EOT
all the stdout
EOT
...etc.
<><><><><><><><><><><><><><><><><><><><><><><><><><><>
}}}

Listing them one after another is slightly less efficient in terms of bytes transferred, but it's a whole lot easier (and more efficient) to assemble on the client and disassemble on the server.  Let's not forget that the major win will be the fact that it's 1 submit (vs. N), so if we're slightly less than optimal on the actual content of the payload, I think that's ok.

As for gzipping before we send it to stay below Apache's limit -- that's a good point.  Let's go with plain text first (i.e., get the basics working) and then look at compression and fragmenting second (compression and fragmenting should not be inherent to the overall scheme -- we should be able to add those as a 2nd effort fairly easily)."
35,1156778917,jsquyres,"Here's a first take at what fields to include in the first block of the submit.  I took the results that are currently submitted and listed them here, and added a few more fields (all new fields are clearly marked)

 * hostname
 * os_name
 * os_version
 * platform_hardware
 * platform_type
 * mpi_install_section_name
 * mpi_get_section_name (we don't currently include this in the results -- do we need to?)
 * mpi_name
 * mpi_version
 * phase (although this field may be useless?  It's currently set to ""Test run"", which seems redundant)
 * submitting_user (new field, pending ticket #1)
 * test_run_section_name
 * test_build_section_name

Looking at the information above -- do we have enough information to cross reference test run results with a specific MPI implementation install?  I see mpi_name and mpi_version -- is that enough to link back through the database data to get to the results for the MPI Install for the MPI that was used for this test run?  (I ''think'' it is, but am not 100% sure)

And these fields be sent on a per-test result basis:

 * result_message (although this may be redundant with ""success"", ""skipped"", and ""timedout""...?)
 * start_test_timestamp
 * success
 * skipped (new field; pending tickets #34 and #37)
 * timed_out (new field; pending tickets #34 and #37)
 * test_command
 * test_duration
 * test_name
 * test_np

Note that the particular cut of data that I have chosen is that one submit can contain all the results ''from a single Test Run section.''  For example, in a Cisco INI file, I run the same test for np={ 1, 2, 4, 8, 16, 32 } and for both the TCP and openib BTLs.  For the Trivial test run, for example, this is 96 results.  Then I run it for two compilers -- GNU and Intel.  But these would be considered two different batch submits because they would refer to two different MPI installations.

How does that sound?"
35,1156797203,jsquyres,"Ethan and I talked about this and came up with the following set of fields:

Common block

 * hostname
 * os_name
 * os_version
 * platform_hardware
 * platform_type
 * mpi_install_section_name
 * mpi_name
 * mpi_version
 * phase
 * submitting_http_user (new field, pending ticket #1 -- server may not recognize it yet, but that's ok)
 * submitting_unix_user (new field -- server may not recognize it yet, but that's ok)
 * test_run_section_name
 * test_build_section_name

And these fields be sent on a per-test result basis:

 * result (pending #34 and #37 --> will implement this field now so that when the server is available to handle it, it'll already be there)
 * success (although this will be deprecated per #34 and #37 and will someday go away)
 * result_message (ditto with success)
 * start_test_timestamp
 * test_command
 * test_duration
 * test_name
 * test_np
 * test_environment
 * test_stdout
 * test_stderr"
35,1157132150,jsquyres,"For anyone following this ticket...

I branched off down into /tmp/bulk-submit to do this work.  The work is essentially done; I am running some large scale tests on a test database right now -- I should know in a few hours if I was able to submit all the results properly.  If so, I'll merge this up into the trunk.

I did '''NOT''' modify the DB schema for this -- I only modified how the data is marshalled up and sent to the submit/index.php (and how submit.php parses it all out and sql INSERTs it down into the database).

In doing so, I also addressed ticket #42 by  ensuring that we will only INSERT fields that exist in the database by first querying the table to see what fields exist.

I will close this ticket [hopefully] in a few hours when my tests complete and I merge this stuff back up into the trunk."
35,1157132305,jsquyres,"BTW, the fields that were finally used ended up being different than what are on this ticket for a few reasons:

 * We decided not to change the current DB schema at all
 * I ended up using HTTP fields to encode all the data (so no separator such as ""<><><>"" was necessary -- sending everything together in One Big Field was a holdover from perfbase when we used to let perfbase do all the parsing for us -- now a) we're not using perfbase, and b) with HTTP fields, there's no need to do any parsing)

So I just wanted to note on this ticket that some of the text that it contains is not exactly how it worked out to be -- please go check the code to see the specific details."
35,1157376713,jsquyres,"(In [306]) Fixes #35, #42.

Bring the /tmp/bulk-submit branch back into the trunk.  A bunch of
testing shows that it's working.  Reporter/MTTDatabase.pm and
submit/index.php have been revamped to accept all the relevant MTT
data as separate fields in a single HTTP connection rather than
multiple MTT connections."
36,1156593639,jsquyres,"(In [242]) Fixes #36.

Upon demand (-p), print out the elapsed time of phases and total
elapsed time of the mtt client run.  This is intended to help mtt
users test the ini file and plan for how many tests they want to run."
37,1156600890,jsquyres,"(In [243]) Refs #37

The mtt client now explicitly reports whether a test has timed out (to
differentiate it from failing to meet its ""pass"" criteria).  This is
helpful for sysadmins to adjust the timeout value in their ini files.

The timed_out value is reported in the results.  See ticket #37 for
details of the possible (pass, timed_out) tuple possibilities."
37,1156699844,jsquyres,"Thinking about this a bit more, I wonder if we should actually have 4 possible results from an individual test run:

 * passed
 * failed
 * timed out
 * skipped

And therefore we should have a single field (bit-mapped?) passed back to the server indicating which of those results the tests fell into.

This would also imply a slightly different methodology both in the ini file and the client -- we should allow a specific ""skipped"" criteria (just like we allow specifying the ""pass"" criteria).  The default can be an exit status of 77."
37,1156700111,jsquyres,Also see ticket #34.
37,1156784656,ethan.mallove@sun.com,"In the database, I would like to have two fields {{{exit_status}}} and {{{timed_out}}}.

{{{exit_status}}}[[BR]]
smallint which allows for any status code (so we will be
provisioned for any other possible status codes we want to report on in the future)

{{{timed_out}}}[[BR]]
boolean (which can be paired with an {{{exit_status}}})
"
37,1156792340,jsquyres,"We talked about this a little more -- let's only add ''one'' field, and name it ""result"".  Let's have this set of values:

 * 0 = success
 * 1 = fail (meaning: the test completed, but it did not meet the ""pass"" criteria)
 * 2 = timed out (meaning: the test did not complete in the assigned time and the MTT killed it)
 * 3 = skipped (meaning: the test indicated that it could not run, and therefore it didn't do anything useful)

More specifically -- what if the client returns one of four '''strings''' back to the server, and how the server chooses to store that is up to the server (i.e., the server could convert that to a smallint based on the mapping and only store that smallint in the database for efficiency, and then convert it back to a string whenever querying for or displaying that result on a web page).  Doing it this way will:

 * make the HTTP results easy for a human to read (particularly for debugging)
 * ensure that the client and server never get out of sync in terms of which integer maps to which meaning"
37,1159479560,jsquyres,"The client is now reporting a value of 4 for the test_result field when tests timeout (1=pass, 2=fail, 3=skipped, 4=timeout)"
37,1159535498,jsquyres,Reassigning this to Ethan because it's now a server-side problem.  :-)
38,1156940692,emallove,"{{{CALL exit(77)}}} seems to work with Sun Studio's Fortran, but I am not 100% sure it will work with other Fortran compilers."
39,1156770243,jsquyres,"Are you running on the trunk or the release branch?

Did you update to the latest core template ini file?  We changed the name of the perfbase reporter to MTTDatabase; I suspect that this is your problem."
39,1156770678,hpcstork,"here is the config file 


{{{
#
# Copyright (c) 2006 Cisco Systems, Inc.  All rights reserved.
#

# Template MTT configuration file for Open MPI core testers.  The
# intent for this template file is to establish at least some loose
# guidelines for what Open MPI core testers should be running on a
# nightly basis.  This file is not intended to be an exhaustive sample
# of all possible fields and values that MTT offers.  Each site will
# undoubtedly have to edit this template for their local needs (e.g.,
# pick compilers to use, etc.), but this file provides a baseline set
# of configurations that we intend you to run.

# OMPI core members will need to edit some values in this file based
# on your local testing environment.  Look for comments with ""OMPI
# Core:"" for instructions on what to change.

# Note that this file is artificially longer than it really needs to
# be -- a bunch of values are explicitly set here that are exactly
# equivalent to their defaults.  This is mainly because there is no
# reliable form of documentation for this ini file yet, so the values
# here comprise a good set of what options are settable (although it
# is not a comprehensive set).

# Also keep in mind that at the time of this writing, MTT is still
# under active development and therefore the baselines established in
# this file may change on a relatively frequent basis.

# The guidelines are as follows:
#
# 1. Download and test nightly snapshot tarballs of at least one of
#    the following:
#    - the trunk (highest preference)
#    - release branches (highest preference is the most recent release
#      branch; lowest preference is the oldest release branch)
# 2. Run all 4 correctness test suites from the ompi-tests SVN
#    - trivial, as many processes as possible
#    - intel tests with all_tests_no_perf, up to 64 processes
#    - IBM, as many processes as possible
#    - IMB, as many processes as possible
# 3. Run with as many different components as possible
#    - PMLs (ob1, dr)
#    - BTLs (iterate through sm, tcp, whatever high speed network(s) you
#      have, etc. -- as relevant)

#======================================================================
# Overall configuration
#======================================================================

[MTT]

# The following three values allow you to specify what hosts to run on
# and how many to run (mainly important when not running under
# schedulers).  These values are examined, in priority order, during
# the Test Run phase, and are used by the templated MPI Details
# section, below.  The values are (in priority order):
#
# 1. Hostfile
# 2. Hostlist
# 3. Max number of processes
#
# Descriptions are below.

# OMPI Core: if you are not running in a scheduled environment and you
# have a fixed hostfile for what nodes you'll be running on, fill in
# the absolute pathname to it here.  If you do not have a hostfile,
# leave it empty.  Example:
#     hostfile = /home/me/mtt-runs/mtt-hostfile
# This file will be parsed and will automatically set a valid value
# for &env_max_np() (it'll count the number of lines in the hostfile,
# adding slots/cpu counts if it finds them).  The ""hostfile"" value is
# ignored if you are running in a recognized scheduled environment.
hostfile =

# OMPI Core: if you would rather list the hosts individually on the
# mpirun command line, list hosts here delimited by whitespace (if you
# have a hostfile listed above, this value will be ignored!).  Hosts
# can optionally be suffixed with "":num"", where ""num"" is an integer
# indicating how many processes may be started on that machine (if not
# specified, "":1"" is assumed).  The sum of all of these values is used
# for &env_max_np() at run time.  Example (4 uniprocessors):
#    hostlist = node1 node2 node3 node4
# Another example (4 2-way SMPs):
#    hostlist = node1:2 node2:2 node3:2 node4:2
# The ""hostlist"" value is ignored if you are running in a scheduled
# environment or if you have specified a hostfile.
hostlist =

# OMPI Core: if you are running in a scheduled environment and want to
# override the scheduler and set the maximum number of processes
# returned by &env_max_procs(), you can fill in an integer here.
max_np = 

#======================================================================
# MPI get phase
#======================================================================

# OMPI Core: If you do not want to test nightly trunk tarballs, delete
# this section.
[MPI get: ompi-nightly-trunk]
mpi_details = Open MPI

module = OMPI_Snapshot
ompi_snapshot_url = http://localhost:4321/nightly/trunk

#----------------------------------------------------------------------

# OMPI Core: If you do not want to test nightly v1.2 tarballs, delete
# this section.  WE STRONGLY ENCOURAGE EVERYONE TO TEST v1.2 TARBALLS!!
[MPI get: ompi-nightly-v1.2]
mpi_details = Open MPI

module = OMPI_Snapshot
ompi_snapshot_url = http://localhost:4321/nightly/v1.2

#----------------------------------------------------------------------

# OMPI Core: If you want to test nightly v1.1 tarballs, uncomment this
# section.
#[MPI get: ompi-nightly-v1.1]
#mpi_details = Open MPI
#module = OMPI_Snapshot
#ompi_snapshot_url = http://localhost:4321/nightly/v1.1

#----------------------------------------------------------------------

# OMPI Core: If you want to test nightly v1.0 tarballs, uncomment this
# section.
#[MPI get: ompi-nightly-v1.0]
#mpi_details = Open MPI
#module = OMPI_Snapshot
#ompi_snapshot_url = http://localhost:4321/nightly/v1.0

#======================================================================
# Install MPI phase
#======================================================================

[MPI install: cacau gcc warnings]
# Note: it is ok to list ""MPI get"" sections here that are commented
# out above.
mpi_get = ompi-nightly-trunk,ompi-nightly-v1.2,ompi-nightly-1.1,ompi-nightly-1.0
save_stdout_on_success = 1
separate_stdout_stderr = 1
vpath_mode = none
# OMPI Core: This is a GNU make option; if you are not using GNU make,
# you'll probably want to delete this field (i.e., leave it to its
# default [empty] value).
make_all_arguments = -j 4
make_check = 1
# OMPI Core: You will likely need to update these values for whatever
# compiler you want to use.  You can pass any configure flags that you
# want, including those that change which compiler to use (e.g., CC=cc
# CXX=CC F77=f77 FC=f90).  Valid compiler names are: gnu, pgi, intel,
# ibm, kai, absoft, pathscale, sun.  If you have other compiler names
# that you need, let us know.  Note that the compiler_name flag is
# solely for classifying test results; it does not automatically pass
# values to configure to set the compiler.
compiler_name = gnu
compiler_version = &shell(""gcc --version | head -n 1 | awk '{ print \$3 }'"")
configure_arguments = --enable-picky --enable-debug

module = OMPI

#======================================================================
# MPI run details
#======================================================================

[MPI Details: Open MPI]
exec = mpirun @hosts@ -np &test_np() --prefix &test_prefix() &test_executable() &test_argv()

# Yes, all these quotes are necessary.  Don't mess with them!
hosts = &if(&have_hostfile(), ""&join(""--hostfile "", ""&hostfile()"")"", \
            ""&if(&have_hostlist(), ""&join(""--host "", ""&hostlist()"")"", """")"")

after_each_exec = <<EOT

# This scriptlet ensures that all remnants of the prior mpirun are
# gone.  It kills all orteds running under this user and whacks any
# session directories that it finds.  Hence, do not expect to be able
# to run on the same machine/user as a user who is running MTT tests.

# This scriptlet is not fully tested yet.  Needs testing on: Linux,
# OSX, Solaris.

who=`whoami`
which killall > /dev/null 2> /dev/null
if test ""$?"" = ""0""; then
    # If we have killall, it's easy.
    killall -9 orted
else
    # We're on an OS without killall.  Which variant of ps do we have?
    ps auxw > /dev/null 2> /dev/null
    if test ""$?"" = ""0""; then
        ps_args=""auxww""
    else
        ps_args=""-eadf""
    fi
    pids=`ps $ps_args | grep $who | grep -v grep | grep orted awk '{ print $2 }'`
    if test ""$pids"" != """"; then
        kill -9 $pids
    fi
fi

# Whack any remaining session directories.  This is a workaround for
# current bugs in OMPI.
rm -rf /tmp/openmpi-sessions-${who}*
EOT

#======================================================================
# Test get phase
#======================================================================

[Test get: trivial]
module = Trivial

#----------------------------------------------------------------------

[Test get: intel]
module = SVN
svn_url = https://localhost:4322/svn/ompi-tests/trunk/intel_tests

#----------------------------------------------------------------------

[Test get: ibm]
module = SVN
svn_url = https://localhost:4322/svn/ompi-tests/trunk/ibm
svn_post_export = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[Test get: imb]
module = SVN
svn_url = https://localhost:4322/svn/ompi-tests/trunk/IMB_2.3

#======================================================================
# Test build phase
#======================================================================

[Test build: trivial]
test_get = trivial
save_stdout_on_success = 1
separate_stdout_stderr = 1
stderr_save_lines = -1

module = Trivial

#----------------------------------------------------------------------

[Test build: intel]
test_get = intel
save_stdout_on_success = 1
separate_stdout_stderr = 1
stderr_save_lines = -1

module = Intel_OMPI_Tests
intel_ompi_tests_buildfile = all_tests_no_perf
# I am using the g77 compiler, which needs these flags.  Your fortran
# compiler may need different flags.
intel_ompi_tests_fflags = -g  -Isrc -I.

#----------------------------------------------------------------------

[Test build: ibm]
test_get = ibm
save_stdout_on_success = 1
separate_stdout_stderr = 1
stderr_save_lines = -1

module = Shell
shell_build_command = <<EOT
./configure CC=mpicc CXX=mpic++ F77=mpif77
make
EOT

#----------------------------------------------------------------------

[Test build: imb]
test_get = imb
save_stdout_on_success = 1
separate_stdout_stderr = 1
stderr_save_lines = -1

module = Shell
shell_build_command = <<EOT
cd src
make clean IMB-MPI1
EOT

#======================================================================
# Test Run phase
#======================================================================

[Test run: trivial]
test_build = trivial
pass = &eq(&test_exit_status(), 0)
timeout = &test_np()
save_stdout_on_pass = 1
separate_stdout_stderr = 1
np = &env_max_procs()

module = Simple
simple_tests = &find_executables(""."")
simple_only_if_exec_exists = 1

#----------------------------------------------------------------------

[Test run: intel]
test_build = intel
pass = &or(&eq(&test_exit_status(), 0), &eq(&test_exit_status(), 77))
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 1
separate_stdout_stderr = 1
# The intel tests have some hard limits at 64 processes
np = &min(64, &env_max_procs())

module = Simple
simple_tests = &find_executables(""src"")
simple_only_if_exec_exists = 1

#----------------------------------------------------------------------

[Test run: ibm]
test_build = ibm
pass = &or(&eq(&test_exit_status(), 0), &eq(&test_exit_status(), 77))
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 1
separate_stdout_stderr = 1
np = &env_max_procs()

module = Simple
simple_tests = &find_executables(""collective"", ""communicator"", ""datatype"", \
                          ""dynamic"", ""environment"", ""group"", ""info"", \
                          ""io"", ""onesided"", ""pt2pt"", ""topology"")

#----------------------------------------------------------------------

[Test run: imb]
test_build = imb
pass = &eq(&test_exit_status(), 0)
timeout = &max(1800, &multiply(50, &test_np()))
save_stdout_on_pass = 1
separate_stdout_stderr = 1
np = &env_max_procs()

module = Simple
simple_tests = src/IMB-MPI1

#======================================================================
# Reporter phase
#======================================================================

[Reporter: IU database]
module = MTTDatabase

mttdatabase_realm = OMPI
mttdatabase_url = https://localhost:4323/mtt/submit/
# OMPI Core: Change this to be the username and password for your
# submit user.  Get this from the OMPI MTT administrator.
mttdatabase_username = XXXXXXXX
mttdatabase_password = XXXXXXXX
# OMPI Core: Change this to be some short string identifying your
# cluster.
mttdatabase_platform = Cacau at HLRS

#----------------------------------------------------------------------

# This is a backup for while debugging MTT; it also writes results to
# a local text file
[Reporter: text file backup]
module = TextFile

textfile_filename = cacau-$phase-$section-$mpi_name-$mpi_version.txt
textfile_separator = >>>>----------------------------------------------------------<<<<


}}}
"
39,1156770934,jsquyres,"Please use the attachment mechanism next time; it keeps the length of text on the ticket much shorter.  :-)

Well, so much for that theory.  Did you get any Perl errors significantly earlier in the output?  I have noticed that when perl outputs errors with modules, it could be significantly earlier in the output than when the corresponding stdout shows up that exhibits the problem (e.g., any problems loading the MTTDatabase plugin?)."
39,1156772351,hpcstork,I cannot see any perl error. Evrything look good to me.  
39,1156776186,jsquyres,"Can you attach the full output from running with --debug?  Ensure that you have fully captured all stdout *and* stderr.

If you can have just a small test case (E.g., just run the trivial tests, not any of the others), that would be most helpful (i.e., keep the size of the output down).

You can do this by commenting out (or renaming) all the Test Run sections except trivial, and then run MTT with:

{{{
$ mtt --test-run --force ...all your other params...
}}}"
39,1156778115,hpcstork,add output of trivial test run
39,1156799428,hpcstork,The problem was that the new config template used https instead of http for submitting the data babk to the database. Fixed in r249.
39,1156804940,jsquyres,"No, this is an incorrect fix.

https is perfectly acceptable (and encouraged!) to submit the data back to the database.  It is much more preferable to submit via https than http so that your password does not go in plain text.

You can submit via http if you want to, or you can adjust your proxying system to support https.  I use https submits through Cisco proxies just fine...

I'm going to back out r249."
39,1156879372,hpcstork,r257 contains the real fix. 
39,1156879527,jsquyres,"Ah -- the problem was that you were using an alternate port and we didn't parse that properly.  Good catch!

We had that in the http parser but not https.  I wonder why.  [shrug]

Thanks -- I'll move this fix over to the release branch."
40,1157052315,emallove,"(In [268]) closes #40

Use reporter.php as a backend for summary.php, instead of duplicating a
ton of code."
42,1156855963,jsquyres,"FWIW, you should be able to see all the changes that I made to summary.php by looking at the SVN history in the ompi-www repository (do all of these in an ompi-www workspace):

 * svn log on summary.php shows that I initially committed summary.php at r366 and then committed the warnings cleanup at r372.
 * You can therefore run ""svn dirr -r 371:372 summary.php"" to see what the differences were that I did.

If I did something to muck this up, sorry.  :-("
42,1156856325,jsquyres,"Blah!  s/svn dirr/svn diff/ in my previous comment.

Sorry for the confusion..."
42,1156870269,emallove,"{{{submit/index.php}}} should gather the known column names from the database. For example, in Postgres:

{{{SELECT column_name FROM information_schema.columns WHERE table_name = '<table_name>'}}}

It should then discard data submitted to it that is keyed by an unknown column name, with a warning ""this data will not be inserted"". This way, the data can keep coming in while the server-side is adjusted to catch all incoming data.

Jeff is exonerated :)"
42,1156941575,tdd,Why was this bug downgraded from critical to major.  We really need to be able to see the test run results which seem to be non-existant now.  This seems critical to me and I think it should be fixed asap.  Am I missing something here?
42,1156946527,emallove,"I was only referring to the submit.php's robustness, not the lack of test runs data (which I agree is indeed critical). I thought that once we stabilize on a set of columns, it would not be an every-day occurrence for the database to be changing.  At that point, I thought the robustness would be more handy than critical. (?)

By the way, {{{$GLOBALS['debug']}}} is set to {{{0}}}, which means submit.php will not report {{{INSERT}}} errors back to the client. It might help to turn that on (or use a sandbox submit.php with it turned on) while we get the new db schema ironed out."
42,1156972707,jsquyres,"(In [266]) Refs #42

Commit a compromise for #42 that will get people able to submit test
run data.  This is not the real fix.  The idea with this commit is
just to skip the two fields that we know are problematic.

In discussions with Ethan about #42 and #35, we have come to the
conclusion that #35 is going to end up revamping submit/index.php, so
there was no point in doing a real fix for #42 -- just get people able
to submit and let #35 put in the real fix for ignoring fields that it
doesn't understand.

So as of this commit, people can submit test run data again.  However,
I'm leaving #42 open so that the handy SQL for selcting the column
names is still available so that I can incorporate it into #35."
42,1157115272,jsquyres,More specifically (because it wasn't entirely clear above) -- this ticket will be properly fixed in #35.
42,1157376713,jsquyres,"(In [306]) Fixes #35, #42.

Bring the /tmp/bulk-submit branch back into the trunk.  A bunch of
testing shows that it's working.  Reporter/MTTDatabase.pm and
submit/index.php have been revamped to accept all the relevant MTT
data as separate fields in a single HTTP connection rather than
multiple MTT connections."
43,1156867526,jsquyres,"I personally setup the Intel variables before I invoke MTT.  Another alternative is to setenv the relevant variables in your ini file (there's setenv directives that can be used).  We could probably expand these mechanisms a bit if required (e.g., we had talked about using the environment modules API to load/unload modules, but never got a round tuit).

Can you setup your intel env vars before invoking MTT, or can you setenv in your INI file?

(regardless, this information should probably go to the wiki...)"
43,1157638833,jsquyres,Sven -- can you comment on this ticket?
43,1159535525,jsquyres,Sven -- can you comment on this ticket?
43,1164833180,jsquyres,"Haven't heard anything on this ticket, and I'm unable to replicate, so I'm closing it."
44,1156871922,emallove,"To ensure there's no issue with a specific directory or file, how about a ""ping"" option in submit/index.php? So client/mtt can do something like the following to determine if a GET will work:

{{{$response = post(""submit/index.php?ping"");}}}

Also, will the users have the option of troubleshooting their HTTP issues '''after''' running the tests and generating results data?"
44,1156876202,jsquyres,"""?ping"" is a good idea.

Mind if I add it to submit.php?

As for ''after'' the tests, right now all we do is print out the error message from LWP as to why the results couldn't be submitted.  Do you have any further suggestions?"
44,1156876497,jsquyres,Ethan: Can you commit the php files to the MTT SVN?
44,1156878533,jsquyres,"(In [254]) Fixes #44.

This commit fixes up the client side.  submit/index.php is still not
in MTT SVN, so I committed the change over there in the ompi-www
repository.  All it does is look for a PING variable in the form, and
if it finds it, exits (successfully) before doing anything."
44,1156925494,hpcstork,"Here are my suggestions to the case of an error.

Maybe we can introduce a new section (e.g.error which acts as an error handler. The user should be able define an action (shell script, e.g. send mail) and a policy (e.g. stop, continue, ...).

Additional to this it would be nice to have a new command line option only to submit the results (e.g. --submit-results). Even if the test submit at the beginning was successful there can be error when trying to submit the results later (e.g. network connection lost). This would also allow disconnected sites to use MTT. They can run the test on the cluster and after that they can submit the results from a node with network connection."
44,1156939487,jsquyres,"The ""submit results as a separate step"" stuff is already covered in tickets #12 and #32.

Adding an error handling section should be filed as a separate ticket; I'll go create it."
46,1158152555,jsquyres,"(In [323]) Fixes #46.

The OMPI MPI Install module creates a perl script in the $bindir of
each OMPI installation that it creates called mtt_ompi_cleanup.pl.
This script searches the process list for orteds and kills them --
except for its own parent orted (I thought this was particularly
clever ;-) ).  This allows us to launch this script via orterun
itself, and therefore use whatever native launching mechanism is used
via ORTE (e.g., slurm, pbs, rsh/ssh, etc.).

So there's now a new after_each_exec section in the OMPI core template
that essentially runs:

{{{
orterun $args -np $MTT_TEST_NP --prefix $MTT_TEST_PREFIX mtt_ompi_cleanup.pl
}}}

The script will be found because OMPI's $bindir is automatically put
in the path by MTT.  It'll run on all nodes and kill any orteds that
it finds (except its own).  Then it will whack any session directories
that it finds (including its own -- this is safe), and exit.  Since
its parent orted wasn't killed, it'll exit normally and the orterun
from the after_each_exec will complete normally.

The only drawback to this scheme is that we run $np copies of the
script, so we could be running multiple copies of the script on each
node.  This is a bit wasteful, but it does work.  Further optimization
someday to figure out how to only run 1 copy of the script on each
node."
47,1156965305,jsquyres,"Forgot to add Josh as a CC on this bug, since he reported it."
47,1156967849,jjhursey,"I can't exactly seem to replicate this bug any longer. I'll try something a bit more involved this evening, but this may just have to be chalked up to Odin cluster + User weirdness.

"
47,1157638788,jsquyres,Closing since it's unable to be replicated.
48,1156967114,jsquyres,This is a duplicate of #42.
50,1157204997,emallove,"As Jeff pointed out to me, this will ''improve'' performance because instead of doing x number of string comparisons in our searches/aggregations, we will be doing x number of (speedier) integer comparisons."
51,1157376614,jsquyres,"Moving this to ""future"" milestone because it's tied with #55 and will not be fixed in the current schema."
51,1159535552,jsquyres,"I think that this is done in the new schema, and therefore this ticket can be closed."
51,1163516883,emallove,"(In [438])  * Always print SQL errors
 * Eliminate run_index race condition

Fixes #51
Fixes #136"
52,1157151232,emallove,"(In [288]) refs #52
closes #52

Stashed data/functions from reporter.php into these include files:

screen.inc   - Generate the query screen
database.inc - Vars/function that map-to/operate on database
http.inc     - Vars/function that map-to/operate on $_GET/$_POST
config.inc   - Left-over $config var from first cut at summary.php
head.inc     - Things that go in the <HEAD> section
html.inc     - Some HTML elements
reporter.inc - Catch-all functions for the reporting tools"
53,1157079218,jsquyres,"Unbelievably, this is a[n undocumented] feature!

There is another INI file parameter named ""stdout_save_lines"" (and a corresponding stderr_save_lines) indicating how many lines of stdout (stderr) you want to save.  The MTT client saves the last [stdout_save_lines] of lines of output from stdout.  So even if you turn on ""save_stdout_on_success"", it only saves the last N lines.

The problem was that the default value for stdout_save_lines was 0, meaning that no lines were saved.  I changed the default to -1, meaning ""save them all""."
53,1157079233,jsquyres,"(In [270]) Fixes #53

- Change defaults for number of stdout lines save to -1 (infinite)
- Ensure that undef'ed fields in the report are actually skipped"
54,1158097323,emallove,"I am not able to reproduce this truncation problem with my version of Firefox (nor with Opera or Mozilla). I'm using:

{{{
Mozilla/5.0 (X11; U; SunOS sun4u; en-US; rv:1.7.8) Gecko/20050606 Firefox/1.0.4
}}}

What version are you using? Does the problem occur with IE and Safari too?

The window should open with scrollbars since the popup function opens the window with {{{scrollbars=yes}}}, but maybe {{{yes}}} needs to be {{{1}}} for your browser? Could you download the attachment ([attachment:reporter.php.htm]) and see if changing the popup function to use {{{scrollbars=1}}} works? (Note: after clicking the link to the attachement, you will need to click the ""Original Format"" link at the bottom of the page below ""Download in other formats"".)

Maybe we should compile a list of browser specific issues, as I've found some using Opera (not that anyone else in the world uses Opera). E.g., Opera has trouble with large tables (over 1000 rows)?"
54,1158098158,jjhursey,"I'm using:

{{{
Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.8.0.6) Gecko/20060728 Firefox/1.5.0.6
}}}

I'll try your other suggestions and let you know."
54,1158113901,jjhursey,"After playing with the example it seemed that changing the line:
{{{
newwindow2=window.open('','name','height=' + height + ',width=' + width + ' scrollbars=1');
}}}

from
{{{
',width=' + width + ' scrollbars=1');
}}}
to
{{{
',width=' + width + ',scrollbars=1');
}}}

It made it work. It seems that the ',' is required in later versions maybe.

With that fix it didn't matter if the value was set to yes or 1 they both worked equally well.
"
54,1158162475,emallove,"(In [326]) fixes #54

Josh caught the missing comma before {{{scrollbars}}} in the {{{popup}}}
function."
55,1157398043,emallove,"Would it make sense to include the hostlist as part of a {{{cluster}}}? So add the following field to {{{TABLE cluster}}} in [source: trunk/server/sql/schemas-v2.sql].

{{{
#!sql
       hostlist character varying(256)[],
}}}"
55,1157454602,jsquyres,For what purpose?
55,1157464137,emallove,"I guess there are two reasons I can think of.

=== Solaris Zones ===

We have several Sparc/Solaris clusters which would be
stored in {{{cluster}}} as one single cluster. I would like
to differentiate at least one, because it uses
[http://www.sun.com/bigadmin/content/zones/ Solaris Zones].

Putting the following field in {{{TABLE cluster}}} seems inelegant:

{{{
#!sql
	is_solaris_zone boolean,
}}}

Or is there a Linux/MacOS/Windows equivalent to Solaris Zones?

=== --prefix argument ===

Maybe I am wanting hostlist in {{{TABLE test_run}}}, because
wouldn't we want to know how many and which nodes were used for a
given test without having to do an arbitrary text filter for a 
{{{--prefix}}} argument?"
55,1157492268,emallove,I have started to make a [wiki:SchemaVersion2 list of things to do] for converting the server-side php scripts to use the new schema ([source:/trunk/server/sql/schemas-v2.sql]).
55,1157550365,emallove,"(In [312]) refs #55

 * Any column that will be used in a {{{JOIN}}} statement, deserves an
   index. (To avoid symbol name collisions, the table name is prepended
   to the index name.)
 * {{{tstamp}}} deserves an index because it is part of the {{{WHERE}}}
   clause in all queries.  
 * Fixed SQL syntax errors"
55,1158005415,emallove,I started a wiki page for Jeff's [wiki:ClusterRegistration] idea.
55,1158522377,emallove,"Having {{{results}}} point to {{{submit}}} seems to eliminate the need for the {{{phase}}} and
{{{phase_id}}} fields in {{{submit}}} (see [changeset:341]). Or was there a
need for those phase fields that I am missing?

{{{
#!html
<a href=""/trac/mtt/attachment/ticket/55/schema2.gif"" style=""padding:0; border:none""><img src=""/trac/mtt/attachment/ticket/55/schema2.gif?format=raw"" alt=""Diagram of MTT 2.0 database schema"" title=""Diagram of MTT 2.0 database schema"" style="""" width=650 /></a>
}}}"
55,1162335659,emallove,"(In [406]) sql/schemas-v2.sql:

 * NetPIPE exited with 36608 which does not fit in a smallint
 * Make bandwidth values double precision in units of Mbps (or did we
   want them to be integers converted to bytes, as some tests consider
   ''M'' 1000, and others 1024)

php/submit/index.php:

 * Set latency_bandwith data, and hook it into the results row 

refs #13
refs #55"
56,1157149261,jsquyres,"(In [281]) Fixes #56.

I don't know why we were only saving MPI install / Test build
information in the meta data only if they were successful.  Duh!  Now
save them regardless of whether they succeeded or failed."
57,1157197242,jsquyres,"(In [289]) Fixes #57, #58

 * If the INI file sets save_stdout_lines and/or save_stderr_lines,
   only actually gather that many lines (don't gather them all and
   then save athe last N).
 * Ensure that the save_*_lines handling is uniform throughout MPI
   install, test build, and test run
 * Change the defaults and the ompi-core-template.ini to not save
   infinite numbers of lines because that can lead to '''severe'''
   performance problems for badly-behaving tests (per #57).  Instead,
   set the defaults to save the last 100 lines of stdout and stderr
   everywhere.  This can be overridden in the INI file if desired.
 * Ensure that we use ""merge_stdout_stderr"" everywhere and eliminate
   ""separate_stdout_stderr"""
58,1157197242,jsquyres,"(In [289]) Fixes #57, #58

 * If the INI file sets save_stdout_lines and/or save_stderr_lines,
   only actually gather that many lines (don't gather them all and
   then save athe last N).
 * Ensure that the save_*_lines handling is uniform throughout MPI
   install, test build, and test run
 * Change the defaults and the ompi-core-template.ini to not save
   infinite numbers of lines because that can lead to '''severe'''
   performance problems for badly-behaving tests (per #57).  Instead,
   set the defaults to save the last 100 lines of stdout and stderr
   everywhere.  This can be overridden in the INI file if desired.
 * Ensure that we use ""merge_stdout_stderr"" everywhere and eliminate
   ""separate_stdout_stderr"""
59,1157373449,jsquyres,"I vote that we do not change the current schema but instead fix it in schemas-v2.sql.

If you agree, mark this ticket as ""wontfix"" and close it."
59,1157550964,emallove,"The following fields ''might'' also conflict with SQL key words:

{{{
name 
cluster
result
}}}"
59,1158607164,emallove,"(In [342]) refs #59
Avoid using SQL key words.

 * cluster --> compute_cluster
 * name    --> test_name or section_name
 * result  --> success"
59,1163185162,emallove,"(In [429])  * More name mismatch cleanup (see #131 and #59)
 * {{{mtt_ompi_cleanup.pl}}} kills all processes in
   {{{@processes}}} list
 * {{{submit_test_timestamp}}} is set on the server via
   Postgres {{{now()}}} function
 * Since {{{stdout_save_lines}}} is applied in
   [source:/trunk/lib/MTT/DoCommand.pm DoCommand.pm],
   there's no need to trim stdout lines anywhere else
 * Convert {{{vpath_mode}}} string to its mapped
   smallint"
60,1157459705,jsquyres,"Sure, we can do that.  Probably not today, though -- today's unfortately kinda full for me.  :-("
60,1158204859,jsquyres,"(In [331]) Fixes #4, #11, #60.

 * Add more verbose output to test run --verbose such that you can
   tell which MPI the current set of tests are running with (per #60)
 * Modify usage of Test Run modules to return a more descriptive hash,
   allowing per-test specification of all kinds of values, such as np,
   pass, etc.  This allows the specification of groups of tests, some
   of which have different ""pass"" conditions than others (e.g., most
   tests are designed to return 0 exit statuses, but some return
   nonzero, per #4 and #11).
 * Modified Test/Run/Simple.pm to accept new syntax for the
   specification of groups of tests, and overriding the default values
   for each group (e.g., np, pass, ...per above)
 * Modified ompi-core-template.ini to use the new Simple module
   syntax.
 * Changed some internal nomenclature such that modules that used to
   be ""Test run"" are now ""Test specify"", to more accurately represent
   what they are doing (per #11)."
61,1157454524,jsquyres,"What do we need in the new database schema to support this?

Feel free to edit schemas-v2.sql."
61,1157466778,emallove,"I did not think of anything needed schema-wise for this, did you? I was thinking this would be a {{{curl}}} request on {{{reporter.php}}} (not an SQL query), followed by a regexp on the HTML string to see whether the registered alerts' criteria were met. Some easy to {{{grep}}} HTML comments in the report could simplyfy things. E.g., before printing the report table:

{{{
  <!-- got a failure! -->
}}}"
61,1157468515,jsquyres,"If there's a cron job that wakes up on the server to send out e-mails based on criteria, the list of criteria to look for and the e-mail address(es) of whom to send to need to be stored somewhere.  The database is a natural place to put it -- that was my rationale for asking what would need to be in the db schema."
61,1157471097,emallove,"Gotcha. I was thinking an {{{ini}}} for the alerts registry. E.g.,

{{{
[Alert: Email subject line]

url       = http://www.open-mpi.org/mtt/reporter.php?search=foo
email     = somebody@open-mpi.org
frequency = daily
}}}

Database works for me too, I don't have a strong opinion. I guess I thought I would go the slightly more easy-to-use {{{ini}}} route for the first cut."
61,1157473749,jsquyres,"I'd rather have it not in the INI file because:

 * you have to do a test to submit your preference
 * your preference will be submitted ''every'' time you run a test (we'll have to retrieve all old preferences and compare your new pref to all old prefs and see if it's an update/remove/etc.)

I'd rather have a simple web page interface were you can add, edit, delete alerts.  Doesn't need to be too elaborate."
61,1157475098,emallove,"I was unclear. I meant keep the registry in ''an'' ini file, not ''the'' client-side ini file. So something named, e.g., {{{alerts.ini}}} would sit in {{{ompi-www}}}'s {{{mtt}}} directory. The alerts sign-up web form, would take user input and write it to the ini file."
61,1157665656,emallove,"(In [316]) refs #61
 
 * Make {{{alerts.php}}} standalone executable with #!
 * Use getopt for {{{-f file.ini}}}. We may have a few
   alerts.php cron jobs, each with their own ini (e.g.,
   {{{hourly.ini}}}, {{{nightly.ini}}}, and {{{weekly.ini}}})."
61,1161202117,jsquyres,"With all the information that MTT now contains, it is becoming a necessary feature to be able to filter in an intelligent manner.

We added an ""alerts"" table to schema-v2 for this purpose.  The usage scenario to support is:

 * User logs into the MTT web pages (where ""user"" = cisco, lanl, sun, ...etc.)
 * User creates a report that they want to see via the reporter.
 * Somewhere on the reporter page is a text box with a prompt something along the lines of ""Do you want to save this report?  What title do you want to give it? !__________________ <submit>""
 * If the user puts in a title and submits, we associate their user ID in the database to the relative URL for that report in the alerts table.
 * There is another page somewhere in MTT that lets users edit their ""personal"" information.  So far, we only have a gecos and e-mail address.  Supplying an e-mail address for the user in the users table is required for alerts to work (i.e., if you try to create an alert before you have filled in your e-mail address, you should get a result saying ""Please fill in your e-mail address before trying to create alerts"").
 * There is also another page available that lets users see a list of all their current alerts and do the following with any of them:
    * Set a custom subject line
    * Change the description
    * See a sample of the report (probably open in a different window?)
    * Toggle between enabling and disabling the alert
    * Delete the alert
 * We will add another user (""system""? ""mtt""?  The name doesn't matter) and put the existing nightly alert reports on this user.
 * At 9am US IN time, a cron job files that selects all enabled alerts from the ""alerts"" table.  For each one of them:
    * Run the report
    * Send the report to the target address"
61,1161786196,jjhursey,"I just attached the files that IU uses to run MTT on a nightly and weekly basis. The descriptions should indicate how they are  used.

These are the scripts for Odin, and the ones for BigRed are similar. The BigRed scripts differ in how they break up the MTT Get and Run operations due to the firewalled nature of the cluster.

"
61,1165422498,jsquyres,"For 2.0, we'll have hard-coded e-mails (similar to what we have in 1.0).  Dynamic / customized e-mails will be in 3.0."
62,1157654858,emallove,"(In [314])  * Added a {{{$help}}} variable and {{{help()}}} function
 * Added explanations for ""By Test Case"" and ""Phase"" labels above
   pass/fail columns
 * Temporarily remove [i] links from {{{summary.php}}}.
   To be added back in after {{{dump_report()}}} (and/or reporter.php as
   a whole) is made more memory efficient (see #62). Basically, we
   either need to increase our php's memory_limit beyond 16MB, or not
   store the whole report's HTML string in one variable (it's a problem
   when a report is bigger than 4MB).  There must be a good reason for
   setting the memory limit at 16MB, right? We could make the [i] links
   dynamic somehow, rather than pulling all the auxillary [i] link data
   over at once, as the [i] links at times put the report over the top
   of the limit.
 * {{{$level_info}}} was stale HTML from {{{summary.php}}}
 * sql_to_en should return an array, not an HTML string
 * reporter.inc breaks down into ""string processing"" and ""developer/user
   helper"" functions"
62,1157749851,emallove,"(In [317])  * {{{reporter.php}}} was apparently being very wasteful with memory
   (see #62).  Reason being was, in the refactoring process the
   functions {{{dump_screen()}}} and {{{dump_report()}}} were created
   which return html strings. The problem was that those strings were
   created in a global scope. Now said html string vars have been put in
   a function so they must be going out of scope and saving memory. (We
   still max out on a 2500-5000 row Test Run report. A workaround would
   be to prune the results using the menus and/or filters.) The reason
   for variablizing these particular html strings is that the code is
   more manageable for dealing with switches for custom reporters (e.g.,
   summary.php) that use {{{reporter.php}}}. E.g.,

  {{{
  just_results   - hide query description
  no_help        - show inline help blurbs
  info_links     - add some helpful pointers at the end of the report
  }}}

 * Because the above was done, we can now put {{{[i]}}} link details
   back into {{{summary.php}}}.

 * Factored dump_report() down to:
   * {{{filters_description($filters)}}}
   * {{{get_selects()}}}
   * {{{create_phase_level_query($phase)}}}
   * {{{get_phase_selection($params)}}}
   * {{{info_pointers()}}}

 ({{{dump_report()}}} is still seems a bit long (300 lines).

 * Put copyrights in php comments (not html comments) so
   we do not send web/email clients repeatedly
 * Simplified implicit and explicit phase selection
 * {{{$config}}} was not needed for results filtering (why was it ever?)"
62,1158084388,jsquyres,"First take on this is to change database.inc:pg_query_() to simply return the pg_query() result handle, and have the caller slurp the data directly from the result handle (vs. manually pushing each row into a new array and therefore taking twice the memory).

This will save a good chunk of memory, but we still may be in trouble if some queries just return so much data that pg_query() itself fails.  Leaving this ticket open to see if that will continue to be a problem, or if we want to handle it better in milestone 2.0 (e.g., show X results at a time)."
62,1158155206,emallove,"(In [324])  * For memory savings, {{{pg_query_}}} returns a {{{pgsql resource}}}
   instead of a 2D array (see #62)
 * Validate {{{db}}} parameter
 * Place postgres username and password in {{{dbpassword.inc}}} (outside
   of svn tree)
 * Enlarge help font"
62,1158171425,jsquyres,"Let's put a max number of rows in the current code.  That is, display the first N rows (say, N  = 1000 or something) and at the bottom of the table, say, ""Max number of rows exceeded; not all the data shown.  Please limit the search more..."" (or something like that).  

This is better than the html output suddenly stopping because PHP killed the script after 30 seconds of execution time.  That way the user knows that the search was too big and they need to limit it."
62,1159375934,emallove,"The following report-size related message can not be addressed by {{{pg_num_rows}}} because {{{reporter.php}}} does not get the result back in time to count the rows/fields.

{{{
... PHP Fatal error:  Maximum execution time of 30 seconds exceeded in ... reporter.inc on line 138
}}}

These may address the above error (roughly in order of easiest to hardest):

 * Disallow detailed reports to go back farther than 1 week
 * If the server is not running PHP in ''safe mode'', increase the server's execution time_limit in the {{{php.ini}}} file. Otherwise, use {{{set_time_limit()}}}
 * Database optimizations in MTT2.0 (long queries may execute faster than 30 seconds)
 * A javascript keepalive (?) window of some kind to prevent the script from timing out"
62,1159385590,emallove,"(In [349]) closes #62

Crude oversized report throttling (this will be improved with #79)."
62,1189024691,emallove,"This old favorite has returned. Clicking the ""Detail"" button from http://www.open-mpi.org/mtt/index.php?do_redir=316, incurs this error:

{{{
$ tail -f /var/log/httpd/www.open-mpi.org/error_log

[client 192.18.128.5] PHP Fatal error:  Allowed memory size of 16777216 bytes exhausted (tried to allocate 41 bytes) in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/screen.inc on line 262, referer: http://www.open-mpi.org/mtt/index.php?limit=&wrap=&trial=&yaxis_scale=&xaxis_scale=&hide_subtitle=&remote_go=summary&do_cookies=1&phase=test_run&text_start_timestamp=2007-08-31+06%3A35%3A53+-+2007-08-31+18%3A35%3A53&text_platform_hardware=%5Ex86_64%24&show_platform_hardware=show&text_os_name=%5ELinux%24&show_os_name=show&text_mpi_name=%5Eompi-nightly-v1.2%24&show_mpi_name=show&text_mpi_version=%5E1.2.4b1r15976%24&show_mpi_version=show&text_suite_name=%5Eibm%24&show_suite_name=show&text_test_name=all&show_test_name=hide&text_np=%5E8%24&show_np=show&text_full_command=&show_full_command=show&text_http_username=%5Ecisco%24&show_http_username=show&text_local_username=all&show_local_username=hide&text_platform_name=%5Esvbu-mpi%24&show_platform_name=show&phase=test_run&test_result=_rp&text_os_version=&show_os_version=hide&text_platform_type=&show_platform_type=hide&text_hostname=&show_hostname=hide&text_compiler_name=&show_compiler_name=hide&text_compiler_version=&show_compiler_version=hide&text_vpath_mode=&show_vpath_mode=hide&text_endian=&show_endian=hide&text_bitness=&show_bitness=hide&text_configure_arguments=&text_exit_value=&show_exit_value=hide&text_exit_signal=&show_exit_signal=hide&text_duration=&show_duration=hide&text_client_serial=&show_client_serial=hide&text_result_message=&text_result_stdout=&text_result_stderr=&text_environment=&text_description=&text_launcher=&show_launcher=hide&text_resource_mgr=&show_resource_mgr=show&text_network=&show_network=show&text_parameters=&show_parameters=hide&text_trial=%5Ef%24&lastgo=summary
}}}"
62,1190044655,jsquyres,"Ethan: given that you moved this to ""critical"", do you also want to move it back to v3.0?"
62,1202226065,jjhursey,"In the v3 reporter change I seemed to have reverted the fix in r613. The problem is that since we do not use temporary tables any more, we bring over the whole query result to the client. So if PHP is not able to handle this it just blanks out :(

A work around is to increase the memory limit of the reporter to something like 32 MB."
62,1202226307,jjhursey,"Temporary work around in r1153.

In my opinion, this is not a blocker since most people will not try to view that many details at once. The typical use case is for drilling down to a small set of results and then viewing the details. This work around should allow for the majority of queries to the reporter to finish successfully. I wish we could print an error when we do exceed the limit so the user doesn't just see a blank screen."
62,1216737804,emallove,"The Reporter is now barfing on the `pg_fetch_all` call in the `get_form_universe` function. This is very bad, because the only point of that function is to load the insertion pop-up window links, which are seldom used. The Reporter needs to check whether the number of rows returned in the `pg_fetch_all` command is too large, and in that case, punt on the insertion popup windows.

  http://www.open-mpi.org/mtt/index.php?do_redir=747 (click the Test runs header link, then the `Detail` button)"
63,1158260232,jsquyres,Done in r336.
64,1157733791,jsquyres,"That's relatively easy to do.

As a sidenote -- are there plans to add real LL support to OMPI?  (e.g., to have a LL PLS)"
64,1157733965,jjhursey,"On BigRed we only need the POE RAS which is essentually LoadLeveler and the RSH PLS. At the moment I don't know if there is another process launch mech for LoadLeveler, but it seems that BigRed is setup to use the RSH PLS correctly.

We were able to run some simple hello world tests on it yesterday using just the POE RAS and RSH PLS. I'm running the IBM test suite now to make sure there isn't any other missing bits."
64,1158067075,jsquyres,"This may be impacted by an IU discovery yesterday that the the LOADL_PROCESSOR_LIST variable is only loaded for ""small"" allocations.  For larger allocations, you have to use a C API to get the node list.  Not sure what MTT will do in this situation (because the MTT client is 100% perl).  More details to come..."
64,1158067335,jsquyres,"(In [320]) Refs #64.

This will work for ""small"" loadleveler allocations.  Need to figure
out what to do for ""large"" loadleveler allocations (where the list of
nodes is not available in the $LOADL_PROCESSOR_LIST environment
variable)."
64,1158067877,jjhursey,There is a LoadLeveler C library that you all may be able to use. This is how we will likely get around this in Open MPI.
64,1158068047,jsquyres,"Right, but the MTT client also needs to know how many processes it can launch, and the MTT client is in perl.

Is there an environment variable in LoadLeveler that tells us how many processes we can launch (regardless of the allocation size)?  That would fix this problem."
64,1158068923,jjhursey,"It doesn't seem to export such a flag. Below is a list of all the flags that are exported into the environment:
{{{
[jjhursey@s10c2b2 misc] cat ~/env.txt | grep LOAD
LOADL_STEP_CLASS=FAST
LOADL_STEP_NICE=0
LOADL_PROCESSOR_LIST=s10c1b4.dim s10c1b4.dim s10c1b3.dim s10c1b3.dim s10c1b2.dim s10c1b2.dim 
LOADL_STEP_NAME=0
LOADL_ACTIVE=3.3.2.5
LOADL_STEP_ID=s10c2b5.dim.2134.0
LOADLBATCH=yes
LOADL_STEP_INITDIR=/N/u/jjhursey/BigRed/src/mpi/misc
LOADL_STEP_IN=/dev/null
LOADL_PID=20466
LOADL_STEP_TYPE=PARALLEL
LOADL_STEP_OUT=/N/u/jjhursey/BigRed/tmp/ll-run-output.stdout
LOADL_STEP_OWNER=jjhursey
LOADL_STEP_ARGS=
LOADL_STEP_GROUP=No_Group
LOADL_COMM_DIR=/tmp
LOADL_STEP_ERR=/N/u/jjhursey/BigRed/tmp/ll-run-output.stderr
LOADL_STARTD_PORT=9611
LOADL_STEP_ACCT=
LOADL_STEP_COMMAND=/N/u/jjhursey/BigRed/svn/cloud9/src/mpi/misc/test-script.sh
LOADL_JOB_NAME=Simple_mpi_test
}}}"
64,1158070060,jsquyres,"(In [321]) Refs #64

Make the loadleveler stuff a little bit more robust -- check for
LOADLBATCH to see if we're in a LL job, not LOADL_PROCESSOR_LIST,
beause PROCESSOR_LIST may be empty/not there.  If PROCESSOR_LIST is
empty/not there, default to 2."
64,1158079711,jsquyres,"So I think r321 brought in ""good enough"" support for small LL runs.  Josh is looking into a possible CPAN module for LL support (http://search.cpan.org/~hawkinsm/IBM-LoadLeveler-1.05/LoadLeveler.pod).

I'm going to close out this bug for the moment because it should be working for small allocations.  Let's open a different bug for integrating the CPAN module."
65,1166199950,jsquyres,This is unlikely for v2.0 unless someone contributes the code.  Shifting to 3.0.
66,1158187238,emallove,"(In [327]) refs #66

 * Show bookmark links for absolute and relative date range reports.
   (Note: web pages opened from bookmark links do not themselves contain
   bookmark links, because the date ranges are stored in the timestamp
   input parameter. We should eventually keep track of a relative
   ''and'' an absolute timestamp, and pass that from invocation to
   invocation via hidden params.)
 * We are not fusing {{{platform__id}}} and {{{hostname}}}
   to display {{{Cluster}}} anymore, so we can just call it
   {{{platform_id}}} again."
67,1158169518,emallove,It would also be nice to streamline {{{reporter.php}}} to look like the OMPI web pages stylistically by including {{{css.inc}}}.
67,1158358729,jsquyres,"More specifically, if config.inc has something like this:

{{{
$header_text = ""\$topdir = \""..\""; \$title = \""MTT reporter\""; include_once(\""\$topdir/includes/header.inc\"");"";
$footer_text = ""include_once(\""\$topdir/includes/footer.inc\"");"";
}}}

Then on every MTT web page, you do something like:

{{{
require(""config.inc"");
if (defined($header_text)) {
    eval($header_text);
}
...contents of page...
if (defined($footer_text)) {
    eval($footer_text);
}
}}}"
67,1167866740,emallove,"(In [507])  * Incorporate {{{deny_mirror()}}} (Fixes #67)
 * Gray out white {{{bgcolor}}} for ''trial'' results in
   Detail report
 * Button labels:
   * Clear -> Start over
   * Reset -> Reset form
   * Preferences -> [Preferences]
 * Clean up CSV dumper function
 * Simplify ttable global vars (only ''one'' is needed, not
   two)"
69,1166200021,jsquyres,"This is part of the whole ""user preferences"" initiative which won't be part of 2.0."
69,1166910099,emallove,"(In [503]) Cookie-ize preferences using JavaScript when they are saved via a
''Save'' button click. If cookies are disabled, the preferences only
last as long as the current ''session''. (''Session'', meaning a
sequence of reports delimited by either clicking the ''Clear'' link or
bringing up a fresh [http://www.open-mpi.org/mtt/reporter.php] page.)
Preferences expire after 9999 days.

Refs #69
Refs #72"
69,1167956924,jsquyres,Is this ticket now done?
69,1167967485,emallove,"Fixed in r493, r498, and r503."
70,1158238855,emallove,"(In [332]) refs #70

Brainstorm on how we might implement the ""new"" test failure feature. How
reliably could this be done without any manual intervention? The
stripping down of the text fields to their ""signature"" will take a lot
of fine tuning."
70,1158239808,jsquyres,"I'm not sure what you mean by this -- don't we have a field that indicates whether a given test succeeded or failed (or was skipped or timed out)?

We should be able to search for that same test and vary only on the timestamp to see when a given failure started.  For example, say an MPI install failed, and we need to determine whether it's ""new"" or not.  We can hold all the other fields constant (cluster id, mpi, ...etc.) and simply vary the timestamp and look for a difference in the result value.

Admittedly, this sounds horribly inefficient (because we'll need to do it for each test!).  We might need to duplicate/aggregate some information to make such searches easier (which I think it along the lines of what you're thinking...?)."
70,1158239845,jsquyres,"I think we need to define ""new"" when we're talking about more than one 1 test in the past...  Consider a given MPI install (same MPI get, same cluster, same compiler, ...etc.  Only difference is a new nightly tarball version from one night to the next).  What happens if we see a pattern like this (assume that test ran only once per day):

 * Monday: success
 * Tuesday: success
 * Wednesday: fail
 * Thursday: success
 * Friday: fail

So is the failure ""new"" in the given date ranges?

 * Mon-Wed: yes
 * Tue-Wed: yes
 * Mon-Thu: ?
 * Tue-Thu: ?
 * Wed-Thu: goes into the other category (new successes)
 * Wed-Fri: ?

More specifically, are we considering any intermediate tests when calculating ""new"" (and if so, what do the intermediate tests mean)?  Or are we only considering ""new"" by looking at the first and last test in the range?  If we only look at the first and last, the above answers become much more clear:

 * Mon-Wed: yes (new failure)
 * Tue-Wed: yes (new failure)
 * Mon-Thu: no
 * Tue-Thu: no
 * Wed-Thu: goes into the other category (new successes)
 * Wed-Fri: no

Is the information useful that way?"
70,1158259707,emallove,"^RE Comment 09/14/2006 09:16:48: Modified by jsquyres^

For starters I like ignoring {{{stdout}}} et al. 

What I was thinking was ...  say Sun submits a few days worth of MPI Install
results (starting on Sunday), each failing with {{{Interupted system call}}},
except on Thursday it fails with some other oddball {{{configure}}} error. I
would like to distinguish between these two failures. That is, see ""new""
failures in the email on Sunday ''and'' Thursday (not just on Sunday).

I guess for Test Runs, the above scenario is not likely. But wouldn't it
be nice to have a catalogue of these failures, each with it's own signature
error messages?
"
70,1158260086,jsquyres,"Ah -- I see what you're saying.  You're looking for something more comprehensive than what I initially thought (categorize the errors vs. just looking at whether individual tests passed/failed).

Yes, this is interesting -- but I think we'll need to figure out how to do the raw count stuff first; categorization can come after that (i.e., the raw count stuff is necessary before we can do categorization)."
70,1158439251,emallove,"(In [340]) Idea for ""new"" failure reporting (see #70)."
70,1158439500,emallove,"Per Jeff's and my phone conversation about this ticket, we determined
it would probably be too computationally intensive to do reporting of
""new"" failures ""on-the-fly"".  More of a nightly ""churn"" script needs to
be created, and here is an [changeset:340 idea] I have
(which for simplicity, deals only with Test Runs).

So the nightly churn will go through each failure, and update the
failure entry for the given failure.  Each failure has relatively easy
access to information about itself. E.g.,

In the (simplified) {{{test_runs}}} table there might be:

|| '''test_run_id'''  || '''failure_id'''  || '''build_id''' || '''name'''      || '''result''' ||
|| 1            || 1           || 344      || allgather || failed ||
|| 5            || 1           || 345      || allgather || failed ||
|| 8            || 1           || 346      || allgather || failed ||
|| 23           || null        || 347      || allgather || passed ||

The failure table contains timestamp, field, and value tuples that
correspond
to each failure.  In the (simplified) {{{failure}}} table (time is the first
known
occurrence of the failure) there might be:

|| '''failure_id'''  || '''time'''      || '''field'''    || '''value''' ||
|| 1           || 07/15/04  || os       || Linux ||
|| 1           || 07/18/04  || os       || SunOS ||
|| 1           || 11/15/04  || compiler || gnu   ||

Maybe there's a better way to get this array-of-tuples effect?

Could this or something along these lines work?"
70,1165422439,jsquyres,Moved to 3.0 -- this is gonna be tough to implement.
70,1179529095,emallove,"(In [705]) First pass at an interface to ''manually'' update the
`failure` table. (Refs #70)"
70,1179786730,emallove,"(In [706]) Refs #70

 * Integrate `track-failures` into `reporter.php`. (Have to
   be careful not to include columns in the `WHERE` clause
   that are not in the `VIEW`/`TABLE` being `SELECT`ed
   from.)
 * Add `failures.sql` to repository

The way it works:
 * User logs a failure at `track-failures/index.php`
 * User checkboxes ""Filter tracked failures"" in the Reporter
   Preferences
 * Results table will then not show any failures that have
   been logged (''""tracked""'') at `track-failures`"
70,1179938221,emallove,"RE r705 and r706.

The titles are misnomers here. This is not exactly ''failure tracking'', but more like a global ""Ignore"" `TABLE`.  Maybe resulting rows that are in the global ""Ignore"" should be displayed, but at the bottom of the page? And color-coded?  Also, it should not be mandatory for the column(s) in the `WHERE ... AND NOT` clause to be in the `SELECT` clause.  (Have to make sure the dynamic `VIEW` `SELECT`s the columns that are in the global Ignore (`AND NOT`) filter.)
"
70,1270654847,emallove,"(In [1359]) Refs #70

Add experimental ""new"" failure reporter script: new-result-reporter.pl.
The script creates a static HTML page containing links to MTT results
that have changed (see below link for a sample).

 http://www.open-mpi.org/~emallove/new-result-reporter-preview.html

It bombards the database with queries, so - for testing purposes - the
above output HTML page was creating after running mtt-result-reporter.pl
for only 15 seconds, but on only a six hour period of MTT results
- it can crank away for a looong time.  (Fixing #362 would greatly
shrink the new-result-reporter.pl's output HTML pages.)

The script looks through a batch of test results (always delimited by
date range, and optionally delimited by other fields such as MPI
version).  Out of these results, it looks for pairs of test cases that
are similar, but had differing outcomes.  There is a range of
""similarness"" that is illustrated in shades of red table cells.  The
""redder"" the cell, the more similar the pair of test cases.
Specifically, ""more similar"" means more database columns match between
the pairs of tests.  It is assumed that if two test cases are nearly
identical, but have different outcomes, this would be more relevant to
the MPI source - and hence - these results are redder and at the top of
the page.  Right now, the script is generalized such that no columns are
weighted as more important than others, but we will need to hone in on
which matching columns (and groupings of columns) are most critical.
All the links displayed are unique.  new-result-reporter.pl needs
improvement in the following areas:

 1. Report fewer, and more meaningful links to results
 2. Optimize the algorithm used for finding result pairs, which might
    lessen the number of queries it needs to run (it is basically brute
    force right now)
 3. Optimize the SELECTs (using SQL magic like indexes, caching,
    temporary tables, etc.)

"
72,1165093680,emallove,"(In [466])  * Fixes #79: ""Generate report in chunks"". Hardcoded to
   chunks of 100 rows for now, though this should be a user
   preference (see #72). E.g, some users' browsers may 
   buckle under more or fewer than 100 rows
 * Need to carry over phase-specific columns in result count
   drilldowns (Jeff caught this one)
 * Categorized/grouped functions in source code"
72,1166198742,jsquyres,"Here's some preferences that we want users to be able to control:

 * Timezone for display of results (#69)
 * Default size of graphs (see also #153)
 * Max rows shown per query
 * Text wrapping in the details (or not)
 * Legend placement in performance graphs (e.g., top-left corner, top-right corner, ...etc.)
 * Hide subtitles in performance graphs (see also #153)
 * Default graph type (bar, line, etc.) (see also #153)
 * Default graph axis (log vs. linear) (see also #153)"
72,1166910099,emallove,"(In [503]) Cookie-ize preferences using JavaScript when they are saved via a
''Save'' button click. If cookies are disabled, the preferences only
last as long as the current ''session''. (''Session'', meaning a
sequence of reports delimited by either clicking the ''Clear'' link or
bringing up a fresh [http://www.open-mpi.org/mtt/reporter.php] page.)
Preferences expire after 9999 days.

Refs #69
Refs #72"
72,1167956908,jsquyres,Is this ticket now done?
72,1168634103,emallove,"(See r493, r503, and r541)"
73,1159362535,jsquyres,"It seems that deleting the footer from the mailman web config fixes the problem.  I suspect that mailman is not respecting MIME parts at all and just appending the footer -- which ends up confusing at least some mail readers.

So this is not an MTT problem, but a mailman problem, and is now fixed."
74,1158649897,jsquyres,"I would suggest not making these be primary command line options, but rather the argument to a command line option, perhaps something like:

{{{
$ mtt --section trivial,foo,bar ...
$ mtt --no-section trivial,foo,bar ...
}}}

Because there's no way to make the command line options before reading the ini file, and you get the name(s) of the ini file(s) from the command line -- so that would be a causality problem, or you'd have to parse the command line twice.

And I also suggest making the argument be a comma-delimited list of sections.

Additionally, if you make the section names be command line arguments, there's a possibility of conflict (e.g., if someone names a section ""help"" or something silly like that)."
74,1160159461,emallove,"(In [376]) Added --[no]-section options

Fixes #74"
74,1160160830,emallove,"(In [377]) Added --[no]-section options

Fixes #74"
75,1158716944,jjhursey,"Suggested script should read:
{{{
setenv PATH $MPI_ROOT/bin:{$PATH}
}}}
Instead of:
{{{
setenv PATH = $MPI_ROOT/bin:{$PATH}
}}}

Typo :["
75,1158736062,jsquyres,"I'm not sure what you mean here -- csh-flavored shells use $path, not $PATH, and also use set, not setenv.

The script is meant to be sourceable -- ""source mpi_installed_vars.csh"", and it does modify your path:

{{{
% cat mpi_installed_vars.csh 
#!/bin/csh
# This file automatically generated by the mtt client
# on `date`.
# DO NOT EDIT; CHANGES WILL BE LOST!
setenv MPI_ROOT /users/jsquyres/svn/mtt/scratch/installs/ompi-nightly-v1.1/ompi_gnu/1.1.2rc1/install
set path = (/users/jsquyres/svn/mtt/scratch/installs/ompi-nightly-v1.1/ompi_gnu/1.1.2rc1/install/bin $path)
if ($?LD_LIBRARY_PATH == 0) then
    setenv LD_LIBRARY_PATH /users/jsquyres/svn/mtt/scratch/installs/ompi-nightly-v1.1/ompi_gnu/1.1.2rc1/install/lib
else
    setenv LD_LIBRARY_PATH /users/jsquyres/svn/mtt/scratch/installs/ompi-nightly-v1.1/ompi_gnu/1.1.2rc1/install/lib:$LD_LIBRARY_PATH
endif
% echo $path
/opt/intel/9.0/bin /opt/intel/9.0/bin /opt/autotools/ac259-am196-lt1522/bin /users/jsquyres/bogus/bin /users/jsquyres/local/bin /opt/intel/9.0/bin /opt/intel/9.0/bin /opt/autotools/ac259-am196-lt1522/bin /users/jsquyres/bogus/bin /users/jsquyres/local/bin /usr/kerberos/bin /usr/local/bin /bin /usr/bin /usr/local/ofed/bin /usr/local/ofed/sbin /usr/X11R6/bin
% source mpi_installed_vars.csh 
% echo $path
/users/jsquyres/svn/mtt/scratch/installs/ompi-nightly-v1.1/ompi_gnu/1.1.2rc1/install/bin /opt/intel/9.0/bin /opt/intel/9.0/bin /opt/autotools/ac259-am196-lt1522/bin /users/jsquyres/bogus/bin /users/jsquyres/local/bin /opt/intel/9.0/bin /opt/intel/9.0/bin /opt/autotools/ac259-am196-lt1522/bin /users/jsquyres/bogus/bin /users/jsquyres/local/bin /usr/kerberos/bin /usr/local/bin /bin /usr/bin /usr/local/ofed/bin /usr/local/ofed/sbin /usr/X11R6/bin
%                                                                         
}}}

Are you using the script in a different way?"
75,1159362563,jsquyres,Josh -- any thoughts on this? 
75,1159364245,jjhursey,"I tried it again and it seems to work fine. Something must have been odd about my setup.

As a general question, I don't know why we use both {{{setenv}}} and {{{set}}} in the script if {{{set}}} alone does what we need it to. Maybe this is me just not understanding csh, but it seems a bit inconsistent."
75,1159370046,jsquyres,"Hopefully, it was something odd with your setup.  I'm going to close this bug -- open a new one if it happens again.

csh is weird with regards to set and setenv.

csh's ""setenv"" is equivalent to ""foo=bar; export foo"" in sh/bash.  csh's ""set"" is [usually] equivalent to ""foo=bar"" -- the $foo variable is not exported to the environment, meaning that ''new'' processes forked off from this one will not inherit the $foo value.

The discrepancy here is that the ""path"" variable is special to csh.  Here's what I see in the csh man page on OSX:

  The shell synchronizes afsuser, group, home, '''path''', shlvl, term and user with the environment variables of the same names: whenever the environment  variable  changes the shell changes the corresponding shell variable to match (unless the shell variable is read-only) and vice  versa.  Note  that  although  cwd and PWD have identical meanings, they are not synchronized in this manner, and that the shell automatically interconverts the different formats of path and PATH.

So ya, it's weird.  But there you go.  :-)
"
76,1159206587,emallove,"Duh, better workaround. Edit the offending xml file:

{{{
:%s/^@//g
}}}"
76,1159366809,jsquyres,"We should do two things:

 * Make MTT be able to filter these before writing out the XML files
 * Fix the OMPI intel tests to not include 0x00 in the output"
76,1159379014,jsquyres,"(In [348]) Fixes #76

Ensure to scrub the data before writing it out to XML files (e.g.,
removing \000's)."
77,1159362717,jsquyres,"Terry -- are you running with ""--force""?  If so, this behavior is expected (--force means to re-run everything that MTT knows about)."
77,1159363318,tdd,"No I am not running with ""--force"" my crontab line is as follows:

 6 2 * * * cd /workspace/tdd/ct7/mtt-release && . /workspace/tdd/ct7/mtt-release/config/mtt-env && /workspace/tdd/ct7/mtt-release/client/mtt -s /workspace/tdd/ct7/mtt-release/scratch.0 -f /workspace/tdd/ct7/mtt-release/config/sun.ini hostfile=/workspace/tdd/ct7/mtt-release/config/v440-0.hf mttdatabase_platform=Sun_BUR03_v440_0 | tee scratch.0/cron-mtt.out.`config/datesuffix`
"
77,1164832888,jsquyres,"I am unable to replicate this problem.  Leaving the ticket open, though -- that doesn't mean that the problem doesn't exist..."
77,1168642357,jsquyres,"This has been open forever and hasn't been replicated.  If it's still a problem, please either re-open this ticket or open a new one."
78,1159297115,emallove,"It's the Hour-By-Hour timestamp aggregation that's confusing:

{{{
..-09-25 05:00  ...v1.2 1.2a1r11740 ... intel 147 0
..-09-25 06:00  ...v1.2 1.2a1r11658 ... intel 329 2
..-09-25 06:00  ...v1.2 1.2a1r11740 ... intel 316 5
..-09-25 07:00  ...v1.2 1.2a1r11658 ... intel 134 3
}}}

 * 1.2a1r11740: 147 + 316 + 5     = 468
 * 1.2a1r11658: 329 + 2 + 134 + 3 = 468

We could have summary.php not do timestamp aggregation.  Hour-By-Hour was used because it trimmed down that table which was pretty huge with anything more detailed than Hour-By-Hour."
78,1159362614,jsquyres,Ethan will update summary.php accordingly.
78,1159372038,emallove,"(In [346]) closes #78

 * Disable timestamp aggregation in Cluster Summary
 * Grab domain name from {{{HTTP_HOST}}}
 * Extra debug function that uses {{{var_export}}} (more
   compact output than {{{var_dump}}})"
79,1165093680,emallove,"(In [466])  * Fixes #79: ""Generate report in chunks"". Hardcoded to
   chunks of 100 rows for now, though this should be a user
   preference (see #72). E.g, some users' browsers may 
   buckle under more or fewer than 100 rows
 * Need to carry over phase-specific columns in result count
   drilldowns (Jeff caught this one)
 * Categorized/grouped functions in source code"
80,1159443836,jsquyres,"(In [353]) Fixes #80

Josh found some typos.  Thanks!"
80,1159458131,emallove,(In [358]) Fixes #80. Josh found some typos. Thanks!
81,1159481737,emallove,"(In [359]) Refs #81

First cut at adjusting 
[source:/trunk/server/php/submit/index.php submit.php] 
to use [source:/trunk/server/sql/schemas-v2.sql schemas-v2.sql].

 * If incoming fields in the POST are numbered (e.g., foo_1, foo_2,
   ... foo_n), {{{submit.php}}} will insert a row for all
   {{{num_of_results}}}.  
   * If fields in the database table are non-existant in the POST,
     {{{submit.php}}} will insert the {{{DEFAULT}}} value.
   * If fields in the POST are non-existant in the database table,
     {{{submit.php}}} will ignore (as before).
   * If only some field(s) are not numbered, {{{submit.php}}} will
     still insert for {{{num_of_results}}} rows, but the non-numbered
     row(s) will be repeated for each row.

 * Any number of test results can be submitted at once, so long as 
   they are all from the same MTT phase. E.g., even two different MPI
   Install results should work.

 * After a phase of results (MPI Install, Test Build, or Test Run) has
   been inserted, {{{submit.php}}} will return the index to the MTT
   client.  E.g., when the client submits results for an MPI Install,
   it will in return - receive an integer(s) value from
   {{{submit.php}}} to key subsequent Test Builds and Test Runs with.
   It then does not ''need'' to resubmit data that was part of the MPI
   Install submission (cluster, mpi get, configure arguments, etc.).

 * As a means of keeping track of which Installs/Builds/Runs belong to
   a single MTT client invocation, POSTing {{{SERIAL}}} to
   {{{submit.php}}} will return an integer to the client to be used in
   each submission from the MTT client per single invocation

 * {{{set_once_data()}}} and {{{set_multiple_data()}}} has been
   combined into {{{set_data()}}}.

 * {{{submit.php}}} contains functions to retrieve meta-data of
   columns from database tables. These would probably be better as
   stored procedures.

 * The {{{validate}}} function is a blunt tool that can show
   entire phase rows, from the {{{test_runs}}}, down to the
   {{{results}}} end of the tree. It verifies that all the INSERTed
   data can be tied together into a single row."
82,1159535161,jsquyres,"This functionality seems to be there (send a form to submit.php with SERIAL, but it's not entirely clear that it's working -- need more testing)."
82,1159548678,emallove,Fixed by [changeset:362].
83,1165422446,jsquyres,Move to 3.0.
84,1159725445,emallove,(In [367]) Link to a non-protected open-mpi logo (fixes #84).
85,1159832493,jsquyres,"I'm wondering if this bug is related to a parsing problem in MTT, that it somehow doesn't ""see"" the &shell(...) and therefore never expands it.

Could both Sun and HLRS attach their INI files that are causing this problem to this ticket?  That would help be track this problem down.

Thanks!"
85,1159905245,jsquyres,"There is a bug in the parsing code such that it will barf if there is a ""&"" in the string.

Still investigating..."
85,1166735467,jsquyres,This is not going to get fixed any time soon.  :-(
85,1188597940,jsquyres,This is now fixed on the jms-new-parser branch.
86,1159827791,emallove,"(In [368]) Fixes #86 #87

 * Add sample alerts.ini
 * Do not mail empty set reports
 * Inline details tables (alternative to [i] links)
 * No printing empty tables, should print e.g., ""No data for query.""
 * Added table_title param for extra description"
87,1159827791,emallove,"(In [368]) Fixes #86 #87

 * Add sample alerts.ini
 * Do not mail empty set reports
 * Inline details tables (alternative to [i] links)
 * No printing empty tables, should print e.g., ""No data for query.""
 * Added table_title param for extra description"
88,1160247229,jsquyres,"(In [378]) 
 * Fixes #90.  Fix Test/Build/Shell module to have a proper timeout
   for building things (infinite).  Also make the reporting better.
 * Fixes #88.  Fix DoCommand.pm to properly kill children -- use
   SIGTERM first, not SIGHUP (duh).  Also be a little mo' better about
   printing that we're killing processes -- only print once a second
   (beause we may still get some buffered output from the pipes after
   the process is dead) and save only the first status from the kill.
   Also make debugging reporting better, indicating that the process
   timed out."
89,1159891054,jsquyres,"(In [370]) Fixes #89.  Be a bit safer with the np for intel tests; some feel that
running up to 64 might still cause problems."
89,1159892647,jsquyres,"(In [371]) Refs #89.

Adjust the recommended max np for the intel tests down to 60."
90,1159920559,jsquyres,Er -- I don't think that the attachment contains what you want it to contain.  Could you try attaching again?
90,1160247229,jsquyres,"(In [378]) 
 * Fixes #90.  Fix Test/Build/Shell module to have a proper timeout
   for building things (infinite).  Also make the reporting better.
 * Fixes #88.  Fix DoCommand.pm to properly kill children -- use
   SIGTERM first, not SIGHUP (duh).  Also be a little mo' better about
   printing that we're killing processes -- only print once a second
   (beause we may still get some buffered output from the pipes after
   the process is dead) and save only the first status from the kill.
   Also make debugging reporting better, indicating that the process
   timed out."
91,1159992322,emallove,"Note: the hostlist is snarfed using the {{{&shell}}} funclet:

{{{
$ /ws/ompi-tools/bin/ompinfo -j ','
burl-ct-v20z-0,burl-ct-v20z-1
}}}"
91,1160481247,jsquyres,"This turned out to be a misunderstanding of how hostlist and max_np are supposed to work.  Changing sun's usage to have a delimiter of a space ("" "") instead of a comma ("","") made it all better."
92,1164513490,emallove,(In [453]) Display grand totals (Fixes #92)
93,1160065975,emallove,"(In [375]) Fixes #93

Put text/plain section on hold for now, so email forwarding will
(hopefully) never get confused."
96,1160407115,emallove,"(In [380]) Display cluster in nightly email.
Fixes #96"
97,1160587969,emallove,"(In [381]) Check that INI sections are not duplicated.

Fixes #97"
97,1161032082,emallove,"(In [389]) Check that INI sections are not duplicated.

Fixes #97"
97,1162760409,emallove,"(In [419])  * Check syntax of INI files (Refs #97)
 * Make &test_prefix funclet available in Build phase (Fixes #125)"
98,1165439555,emallove,"(In [469])  * Added Performance graphs (Refs #117)
 * Added on-demand permalinks (Fixes #98)
 * Added JpGraph [1] files to repository

[1] [http://www.aditus.nu/jpgraph JpGraph] "
99,1166657961,jsquyres,"(In [494]) Several changes spanning many areas:

 * Fixes #99: MPI install, Test Build, and Test Run sections will now
   emit a noisy warning if they refer to non-existent parent sections
   (MPI Get, Test Get, Test Build, respectively).
 * Refs #128: client side of ""--im-just-testing"" flag.  If the
   ""--trial"" option is given to the client, send a ""trial"" value of
   ""1"" via the MTTDatabase reporter.  Alternatively, ""trial = 1"" can
   be put in the [MTT] globals section of the ini file, but the
   command line will always trump whatever value is in the INI file.
   On the server side (once this is implemented), ""trial"" results will
   not be reported (by default) with other results and will expire out
   of the database after a short period of time (e.g., a week).
 * Add support for environment modules.  MPI install, Test build, and
   Test run phases can supply a comma-delimited list of values for the
   field ""env_module"" that will ""module load"" thost modules (in order)
   before invoking the phase.  These values are carried forward as
   relevant; for example, if you list an env_module for an MPI install
   phase, any Test build and Test run phase that uses that MPI install
   section will also load that module.
 * Refs #2: Add support for reference counting in the internal meta
   data for MPI get, MPI install, Test get, and Test build.  Each
   phase instance that uses another phase instance will increase the
   ref count as appropriate.  This is critical for a valid Trim phase.
 * Refs #2: More work was done on the Trim phase, but it's not yet
   complete.
 * Use mtt-wide constants for test FAIL, SKIPPED, TIMED_OUT, and PASS."
100,1160685998,emallove,"(In [383]) Utility to change some_table.some_column's datatype to new_type.

Fixes #100"
101,1161197298,emallove,"(In [392])  * mtt client needs to fetch serials from {{{submit.php}}},
   and store them as meta-data in the xml files.

Extras that were helpful for the above task:

 * {{{Trace}}} - Print some source info on where the Trace
   message was issued from.
 * {{{--[no]-execute}}} - Do not execute any commands
   (quick way to test out the client-server interactions
   without having to build/run anything)

Fixes #101
Fixes #103
Fixes #106"
102,1161001492,jsquyres,Thanks -- fixed in r384.
103,1161197298,emallove,"(In [392])  * mtt client needs to fetch serials from {{{submit.php}}},
   and store them as meta-data in the xml files.

Extras that were helpful for the above task:

 * {{{Trace}}} - Print some source info on where the Trace
   message was issued from.
 * {{{--[no]-execute}}} - Do not execute any commands
   (quick way to test out the client-server interactions
   without having to build/run anything)

Fixes #101
Fixes #103
Fixes #106"
104,1161783244,emallove,"(In [397]) In order of precedence:

{{{pgrep}}}:   linux + solaris
{{{ps auxw}}}: linux + solaris (but dangerous) + osx

(Note: {{{killall}}} is not an option.)

Fixes #104"
105,1166658210,jsquyres,Pushing this off to 3.0 because no one at LANL seems to care.  :-)
105,1168024470,jsquyres,"Removing Jim from this ticket because I understand he doesn't work on MTT anymore.  Adding Galen because he ''might'' care about getting BProc support in MTT...?  (should only be a few lines of perl, I'm guessing...)"
105,1168272165,jsquyres,"Here's what MTT needs...

MTT has a funclet called &env_max_procs() which snarfs out of the environment how many slots the resource manager has provided for this allocation.  We need this value for a variety of resons, such as accurate record keeping in the database and to tell the configuration the maximum number of slots that it can use (especially if it wants to use less than that).

So MTT needs to know the environment variable markers for:

 * telling whether a specific resource manager is being used or not (e.g., whether this is a BProc job or not)
 * telling how many slots are available for this job

What environment variables are used in BProc for this?  (or is this an LSF issue?  I never keep that straight...)  Can you provide some examples, especially if there is string parsing involved?  (e.g., the SLURM_NODELIST has to be parsed to count how many slots are available; there's no single integer available somewhere that we can just grab)"
105,1199807938,jsquyres,This will likely never happen; closing this ticket.
106,1161197298,emallove,"(In [392])  * mtt client needs to fetch serials from {{{submit.php}}},
   and store them as meta-data in the xml files.

Extras that were helpful for the above task:

 * {{{Trace}}} - Print some source info on where the Trace
   message was issued from.
 * {{{--[no]-execute}}} - Do not execute any commands
   (quick way to test out the client-server interactions
   without having to build/run anything)

Fixes #101
Fixes #103
Fixes #106"
107,1161877065,emallove,"(In [398]) Fixes #107
Fixes #108

In --debug mode, print out where mtt is chdir-ing to."
108,1161877065,emallove,"(In [398]) Fixes #107
Fixes #108

In --debug mode, print out where mtt is chdir-ing to."
108,1162248800,emallove,"(In [404])  * Fix mpi_get field name mismatches with client
 * Add test duration field

refs #108"
109,1161877233,emallove,"(In [399]) Trivial.pm needs cflags/fflags like Intel_OMPI_tests.pm

Fixes #109"
109,1161877660,emallove,"(In [400]) Trivial.pm needs cflags/fflags like Intel_OMPI_tests.pm

Fixes #109"
110,1166198975,jsquyres,"This is implemented, but needs to be validated / tested (it may not be working properly, says Ethan)."
110,1167835880,jsquyres,See also #157.
110,1168444687,jsquyres,"Per e-mail and phone conversations:

 * Have a field in the INI file that has a default value that runs a funclet to determine the bitness (e.g., mpicc's and runs something that shows the endian and bitness).  This outputs a string that can be the value from the INI file (e.g., ""32"" or ""64"").
 * For cross-compiling situations, users can override this field and manually put in whatever value is appropriate.
 * For multi-compile situations (Solaris packages, OSX), users can override this field and put in a list of whatever values are appropriate (e.g., ""32,64"" or ""32 64"" or ""32, 64"" -- whatever list convention we want to use -- comma-delimited has a precedent elsewhere in the INI file)."
110,1168444733,jsquyres,This is also related to #157.
110,1169245645,emallove,"(In [572]) Fixes #110 
Fixes #157 

 * Created `get_mpi_install_bitness()` funclet, which
   detects the bitness of the MPI library in this order:
   1. User INI override (CSV of 1 or more valid bitnesses)
   1. Small test C program (using void*)
   1. /usr/bin/file command output
   (`get_mpi_install_bitness()` is used by default to get
   the `bitness` of the MPI install.)
 * Made `_do_write` public, and renamed it to `SafeWrite`
 * Added `get_sun_cc_version()` funclet (see also r571)"
110,1169564642,jsquyres,"Reopening this ticket with additional information for the default for OSX -- see ticket #179 for the details (the ""file"" command can report both bitness and endinaness)."
110,1169653795,emallove,"(In [582]) Fixes #179
Fixes #110

Adjusted `get_mpi_install_bitness()` and
`get_mpi_install_endian()` to check for Mac OSX libraries.
(The `file` command now has the highest precedence for
bitness/endian detection, since it is currently the only way
we can automatically detect Mac OSX library bitness/endian
using `file`.)"
111,1176906285,jsquyres,Done.
112,1162125032,jsquyres,"(In [402]) Fixes #112

Split Test Run.pm into two main parts:

 * Test Specify: invoke the back-end module to ''specify'' what tests
   will be run.  
 * Test run engine: actually cycle through running all the tests."
113,1162413611,emallove,"(In [409]) refs #113

Moved analysis phase out of [source:/trunk/lib/MTT/Test/RunEngine.pm],
and into [source:/trunk/lib/MTT/Test/Analyze/Correctness.pm]. All tests
undergo correctness analysis, which means there is no need to provide
this line in the INI file:

{{{analyze_module = Correctness}}}

Added [source:/trunk/lib/MTT/Test/Analyze/Performance/NetPipe.pm]."
114,1162407793,emallove,"(In [407]) Added onesided tests to ompi-core-template.ini.

Fixes #114"
114,1162408479,emallove,"(In [408]) Added onesided tests to ompi-core-template.ini.

Fixes #114"
115,1161878631,jsquyres,See #61 for example outputs and details of this script.
115,1166199876,jsquyres,This is unlikely to happen for v2.0 unless someone contributes the code.  Shifting to 3.0.
115,1172676850,jsquyres,Shifting back to 2.1 because it's been identified as a high priority for developers being able to run MTT against their workspace (see #9).  Attaching 2 new outputs from IU's text reporter as examples.
115,1172679987,emallove,Milestone v2.1 deleted
115,1173393363,emallove,"(In [645])  * Added `AlreadyInstalled` MPI Install plug-in
 * Enhanced `TextFile` reporter to print a summary of entire
   MTT run in tabular format
 * Added these parameters for TextFile section:
  * textfile_summary_header
  * textfile_summary_footer
  * textfile_detail_header
  * textfile_detail_footer
  * textfile_textwrap
 * Added `Hash::Merge` and `Text::TabularDisplay` CPAN
   modules to the MTT repository (to support the above new
   features)
 * Use `__PACKAGE__` constant in a few places, instead of
   hard-coding in the package name

Refs #9
Refs #115"
116,1166139314,emallove,All but the ''[i] links can now display info for earlier phases'' item are now complete. If that is required we can open a new ticket or ressurect this one.
117,1165439555,emallove,"(In [469])  * Added Performance graphs (Refs #117)
 * Added on-demand permalinks (Fixes #98)
 * Added JpGraph [1] files to repository

[1] [http://www.aditus.nu/jpgraph JpGraph] "
118,1170286417,emallove,"(In [605])  * Patch a few things to get `--no-execute` back up.
   `--no-execute` is our chosen method of SQL scalability
   testing (populating the database with ""faux"" data for
   testing purposes).  This following excerpt from the
   [http://www.postgresql.org/docs/7.4/static/indexes-examine.html Postgres Documentation]
   underlines the importance of using ''realistic'' test
   data for testing the database performance:
   ''  Use real data for experimentation. Using test data for
   setting up indexes will tell you what indexes you need for
   the test data, but that is all. 
     It is especially fatal to use proportionally reduced data
   sets. While selecting 1000 out of 100000 rows could be a
   candidate for an index, selecting 1 out of 100 rows will
   hardly be, because the 100 rows will probably fit within a
   single disk page, and there is no plan that can beat
   sequentially fetching 1 disk page. 
     Also be careful when making up test data, which is often
   unavoidable when the application is not in production use
   yet. Values that are very similar, completely random, or
   inserted in sorted order will skew the statistics away from
   the distribution that real data would have.''

Refs #118

 * Renamed `_fill_cache` to `_get_cluster_info` and put it
   in MPI install (that's the only time we need to send
   cluster info to the database)
 * `submit_timestamp` doesn't need to be dealt with by the
   client, because it gets set on the server-side the actual
   second it is INSERTed (it could be getting
   *re-submitted*)
 "
119,1185222140,jsquyres,"(In [782]) Since we changed ""defined"" to ""exists"", it makes sense to change the
name of the function as well.  And then use it in the most horrid
place in RunEngine.pm where we had chained exists() tests together.
Fixes #119."
120,1167956854,jsquyres,This seems to be a much less detailed version of #167.  Closing this ticket as a dup.
121,1167957009,jsquyres,See also #167.
121,1172679987,emallove,Milestone v2.1 deleted
123,1163179144,emallove,(In [426]) Create a quick links page (refs #123).
123,1168445806,emallove,This is not really needed anymore.
123,1172679987,emallove,Milestone v2.1 deleted
123,1186682348,emallove,Milestone v3.0 deleted
125,1162760409,emallove,"(In [419])  * Check syntax of INI files (Refs #97)
 * Make &test_prefix funclet available in Build phase (Fixes #125)"
126,1168642323,jsquyres,Moving this to 2.1.
126,1172679987,emallove,Milestone v2.1 deleted
128,1162576177,emallove,"Do we want a relevance/importance ""score"" for all results?  All ini sections could be assigned an integer '''score''' (''Major importance'' by default), e.g.,

 1. Critical
 1. Major importance
 1. Minor importance
 1. Experimental (may very well fail)"
128,1165422111,jsquyres,"Let's do that level of interpretation (1-4, or 1-10, or whatever) in MTT 3.0 because that's likely to be a per-user kind of setting (i.e., Release Managers may have a different view of what tests are ""Critical"" or not than individual developers).

Experimental results vs. production results are a level of interpretation that are useful today, and can be applied to all users because they're classifying the data itself, not the user's interpretation of that data."
128,1166657961,jsquyres,"(In [494]) Several changes spanning many areas:

 * Fixes #99: MPI install, Test Build, and Test Run sections will now
   emit a noisy warning if they refer to non-existent parent sections
   (MPI Get, Test Get, Test Build, respectively).
 * Refs #128: client side of ""--im-just-testing"" flag.  If the
   ""--trial"" option is given to the client, send a ""trial"" value of
   ""1"" via the MTTDatabase reporter.  Alternatively, ""trial = 1"" can
   be put in the [MTT] globals section of the ini file, but the
   command line will always trump whatever value is in the INI file.
   On the server side (once this is implemented), ""trial"" results will
   not be reported (by default) with other results and will expire out
   of the database after a short period of time (e.g., a week).
 * Add support for environment modules.  MPI install, Test build, and
   Test run phases can supply a comma-delimited list of values for the
   field ""env_module"" that will ""module load"" thost modules (in order)
   before invoking the phase.  These values are carried forward as
   relevant; for example, if you list an env_module for an MPI install
   phase, any Test build and Test run phase that uses that MPI install
   section will also load that module.
 * Refs #2: Add support for reference counting in the internal meta
   data for MPI get, MPI install, Test get, and Test build.  Each
   phase instance that uses another phase instance will increase the
   ref count as appropriate.  This is critical for a valid Trim phase.
 * Refs #2: More work was done on the Trim phase, but it's not yet
   complete.
 * Use mtt-wide constants for test FAIL, SKIPPED, TIMED_OUT, and PASS."
128,1166658129,jsquyres,The ball is now in ethan's court for the server-side stuff.  :-)
128,1166734200,emallove,"(In [496]) * Added {{{trial}}} to schemas-v2.sql and views.sql
* Dropped stop_timestamp

Refs #128"
128,1167779371,emallove,"(In [504])  * Added ''Show trial results'' preference. ''Trial'' result
   rows are grayed and italicized in reports. (Fixes #128)
 * Show {{{configure_arguments}}} in Detail reports
 * Auto fill preferences menu if cookies have been set
 * Fixed {{{remove_match}}} function to work more than once
   on the same array"
129,1162574455,jsquyres,"Could be kinda sticky to implement this -- at the time of the reporter ping, we don't know what tests are going to be run.  The only way to know what tests we're going to run is to actually run through all the phases.  Specifically, this has many of the same problems as --no-execute.  :-)"
131,1163185162,emallove,"(In [429])  * More name mismatch cleanup (see #131 and #59)
 * {{{mtt_ompi_cleanup.pl}}} kills all processes in
   {{{@processes}}} list
 * {{{submit_test_timestamp}}} is set on the server via
   Postgres {{{now()}}} function
 * Since {{{stdout_save_lines}}} is applied in
   [source:/trunk/lib/MTT/DoCommand.pm DoCommand.pm],
   there's no need to trim stdout lines anywhere else
 * Convert {{{vpath_mode}}} string to its mapped
   smallint"
131,1172679987,emallove,Milestone v2.1 deleted
132,1163201634,emallove,"(In [432])  * Always print POSTGRES ERRORs
 * index.php?debug should print SQL queries

Refs #132"
132,1163259338,jsquyres,"Ethan's reply (just so that the entire conversation is ehre on the ticket):

-----

I'm used grepping on the --debug output from client/mtt, which means e.g., I
will now see double the number of POSTGRES ERRORs. Isn't that confusing? At the
*end* of the mtt run, I'd much prefer to just say, e.g., ""34 SQL errors
occured"". If they want to see the actual SQL error messages from submit.php,
users can do:

{{{
$ client/mtt --debug ... | tee debug && grep -i POSTGRES debug
}}}

If submit.php?debug is used, the exact submission entry that caused the error(s)
can be traced.
"
132,1163260042,jsquyres,"My philosophy is that running with --debug should not be a prerequsite for users.  They shouldn't even have to run with --verbose if they don't want to.

Regardless of how they run, they need to see a warning ''when the error occurs'' (i.e., when the client tries to submit and get a ""sorry, this failed"" message back from the server), and I think it would also be helpful to see some kind of warning at the end of the run (for those who do run with --verbose or --debug, because the originating error will long since have scrolled off the screen).

The warning shown at the end doesn't have to be verbatim of whatever the actual errors are -- some kind of summary is fine (e.g., what you suggested, ""*** There were problems submitting to the server -- see output above for details"" would be fine).  I do not think that users should have to know that a) it's a database or b) that it's postgres.  All they need to know/care about is that there was an error and their data did not get submitted properly.  It would probably be helpful if the MTT client dumps multiple files in such scenarios:

 * One containing the entire dataset that was attempted to be submitted (e.g., a Dumper() of the HTML form -- just like the debug files of today)
 * One containing extra debugging information for us (e.g., the actual response from the server and any other information that would be helpful for us to debug what actually happened)

These files should go into a special area (e.g., a new directory named $scratch/errors/, and if there are multiple errors in a single run, you get unique files for each of them).

Additionally, since a) we know that users don't always report errors, and b) the server is aware when errors happen, the server should take some recovery steps as well.  If the server detects that an error occurs, perhaps it can do something like this:

 * Save the entire HTTP input data in a file somewhere on milliways (perhaps something analogous to perl's Dumper?)
 * Send an e-mail to jsquyres,emallove (or whatever addresses are relevant) with any relevant information about what happend, such as the submitting user, timestamp, attempted action, and the filename with all the saved data.
"
132,1163518447,emallove,"(In [439])  * Print a warning if there was an SQL error on the server,
   and drop a timestamped file containing the data that
   caused the error
 * Print SQL error warnings at three points in time (in this
   order sequentially, and finest granularity first):
   1. As they occur on the server
   2. After each submission
   3. At the end of the MTT run
 * Assume the user wants to see server output if they have a
   ""debug"" in the URL query string

Fixes #132"
132,1163525726,emallove,"(In [440])  * Print a warning if there was an SQL error on the server,
   and drop a timestamped file containing the data that
   caused the error
 * Print SQL error warnings at three points in time (in this
   order sequentially, and finest granularity first):
   1. As they occur on the server
   2. After each submission
   3. At the end of the MTT run
 * Assume the user wants to see server output if they have a
   ""debug"" in the URL query string

Fixes #132"
133,1170440098,emallove,"(In [615]) Send only one email per phase to avoid a hurricane of SQL error emails
(generally in this case, when it rains it pours).  The hurricane for
the ""Test run"" phase is due in part because rows are inserted
individually using INSERT, not COPY. See #133."
133,1171382468,emallove,Another reason to use `COPY` and not `INSERT` is efficiency.  Doing a `pg_dump` using `INSERTs` took about 6 hours.  The same `pg_dump` took 20 minutes when using `COPY` (on a database containing roughly 3 million rows).
133,1172679987,emallove,Milestone v2.1 deleted
133,1184166424,jsquyres,This is not really a blocker -- but Josh raises the point that transactions may be the way to go here (someday).
134,1163256909,emallove,Enlarged {{{test_command}}} from 256 chars to unlimited using [source:/trunk/server/sql/change.sql change.sql].
135,1165422197,jsquyres,this seems to be done.
136,1163516883,emallove,"(In [438])  * Always print SQL errors
 * Eliminate run_index race condition

Fixes #51
Fixes #136"
137,1164057571,jsquyres,"Looks like a problem with assigning {exit_status} elsewhere.  I'll fix, because it's part of bringing over r446 over to the trunk."
137,1164062895,jsquyres,"(In [447])  * Port of r446 from the ompi-core-testers branch
 * Fixes #137 -- use the exit_status from the MPI/Install module.  The
   OMPI MPI Install module now sets {exit_status} thusly: set it to 0;
   if a command fails, set it to the {status} from the DoCommand return
 * Properly pass the Verbose message string into Correctness.pm"
138,1165448884,emallove,"(In [471]) Send test run's signal to the database on client side. See
r470 for #138's server side changes (closes #138)."
139,1164317813,emallove,"[changeset:451 Added] to schema: 
 * primary keys 
 * foreign keys 
 * compute_cluster.endian 
 * results.signal 
 * test_build.bitness"
141,1166658189,jsquyres,This seems to have resolved itself and will soon be moot with 2.0.  Closing this ticket.
142,1165811315,emallove,"Raw performance data popups also do not work in MSIE. (A workaround for [http://en.wikipedia.org/wiki/Criticisms_of_Internet_Explorer#JavaScript_and_DOM MSIE] would be to append the raw data to a performance report, or place it in a temporary html page which would expire after ''n'' days.)"
142,1167836648,jsquyres,"A workaround for the moment for this may be for the MTT PHP/javascript/whatever to detect IE (it seems that both v6 and v7 don't support this stuff) and print out ""Sorry, this action is not currently supported in your browser.  Please use another browser for this functionality."" (or something like that)."
142,1172679987,emallove,Milestone v2.1 deleted
143,1165265268,emallove,"{{{test_name}}} is snarfed by [source:/trunk/lib/MTT/Test/Analyze/Performance/IMB.pm]:

{{{
#!perl
        if ($line =~ /benchmarking\s+(\w+)/i) {
            $report->{test_name} = $1;
            last;
        }
}}}"
144,1164891314,jsquyres,"(In [461]) Fixes #144

This commit is a bunch of things to improve the meta data handling and
storage in the MTT client:

 * Remove the use of XML::Simple and use Data::Dumper instead.  This
   allows us to remove the costly/slow (and error-prone when coding up
   new data layers) data transformation for each of the datasets that
   were saved out to disk.  The output data is about the same size,
   but we avoid the [potentially] huge memory transformation before
   the write, and for large data sets (e.g., Test run data), can save
   quite a bit of time (e.g., ~3 seconds with Data::Dumper vs. ~10
   seconds with XML::Simple).
 * Split the Test run data up into multiple files instead of one huge
   file.  This allows us to write only the new data after tests have
   run rather than having to write ''all'' the data ''every'' time.
   It makes the reading and writing of the test run data a little more
   complex, but the performance win is worth it.
 * Write the Test Run data [slightly] less frequently -- i.e., write
   out a [small] batch of new Test Run data periodically rather than
   writing after ''every'' test."
145,1164835455,jsquyres,(In [459]) Fixes #145: submit the variant field back to the db.
146,1166197429,jsquyres,It seems safer to leave these sentinel values to help us find bugs in the code over time -- it costs nothing performance-wise to have these default values.
147,1166658153,jsquyres,This is long-since done.
148,1165429358,jsquyres,"The problem is likely that I'm an idiot.  I was running 16 processes (which overloaded the nodes) on the trunk test, which is probably why it ran so much slower.

I'll verify, but just wanted to say that this was probably pilot error, not an MTT error..."
148,1165464588,jsquyres,Confirmed -- pilot error.  Closing this ticket as invalid -- the MTT trunk is not slower than the MTT release branch.
149,1167839577,emallove,(In [506]) Fixes #149
150,1166138326,emallove,See r473
151,1166469492,jjhursey,"As a general comment. I'd like this functionality to support R numbers so I can test a tmp branch against the last trunk r# that I synched with. This way I can track if I introduced a regression.

As we move to requiring risk assessments for tmp branches, this will likely be a well used feature."
151,1166484333,jsquyres,Replaced by #156.
152,1165933921,jsquyres,What are the contents of these files?  Are they netpipe output files?
152,1166052510,emallove,"They're just mtt debug files, as in:

{{{$ client/mtt ... | tee mtt.out.foo}}}

(So all the ''Making dir'' tracing is coming from the {{{mkdir}}} subroutine in [source:/trunk/lib/MTT/Files.pm Files.pm].)"
152,1166199923,jsquyres,"Ethan is going to track this down more -- to see how many new dirs are being created for test run data, etc.  If there's a problem, I'll fix it."
152,1167835959,jsquyres,"Ethan found that even when he runs ""--section trivial"" just to run the trivial tests, it's also creating all the dirs for all the other test run sections.  That seems to be the problem."
152,1168023281,jsquyres,"I am unable to replicate this problem.  :-(

The new ""test run"" data repository does create a large number of directories, but I can never seem to get it to create ""more"" directories than it should.  For example, if I have test gets and builds for suites a, b, c, and d, and then I run:

{{{
shell$ mtt ... --test-run --section a
}}}

only test run data (and directory trees) are created for a -- none are created for b, c, or d.

Can you provide a specific recipie for exactly how you're causing more directories to be created than should be created?"
152,1168023387,jsquyres,"More specifically, please check which directories are ''actually'' being made (don't just look at ""making directory"" outputs in the debug output).  Something like this:

{{{
shell$ cd ...../scratch/installs/test_runs
shell$ find . -type d
}}}

and see what it shows. "
152,1168380795,jsquyres,(In [529]) Fixes #152.  Silly cut-n-paste error.
153,1172679987,emallove,Milestone v2.1 deleted
153,1188252751,jsquyres,"Clarification for the ""scale"" feature -- some users think it would be useful to be able to ""zoom"" in on a particular area of the graph, such as restricting X and Y axis values for display."
153,1188394954,jjhursey,"It would be nice to have a toggle for 'true linear' graph which does not separate the values by 1, but by the distance between the actual values on the x-axis."
153,1188397236,jsquyres,Note that this is related to #288.
153,1188940851,jjhursey,"As a random data point. Could we take advantage of Google's AJAX Web Toolkit API for building widgets to help with this?
http://code.google.com/webtoolkit/ "
153,1189005599,jjhursey,"Another link to go with the Google WTK. I found a couple nice graphing packages that could be used with it:

http://www.liquidx.net/plotkit/

http://www.walterzorn.com/jsgraphics/jsgraphics_e.htm"
154,1167833216,emallove,Fixed in r480.
155,1166456692,jjhursey,"Add this documentation change too:

{{{
Index: docs/overview.txt
===================================================================
--- docs/overview.txt   (revision 482)
+++ docs/overview.txt   (working copy)
@@ -48,8 +48,8 @@
 mpi_installer = Open MPI build
 
 module = SVN
-url = http://svn.open-mpi.org/svn/ompi/trunk
-post_export = <<EOT
+svn_url = http://svn.open-mpi.org/svn/ompi/trunk
+svn_post_export = <<EOT
 ./autogen.sh
 EOT
 
}}}"
155,1166458636,emallove,"I guess this bug went under the radar because we have all been using [source:/branches/ompi-core-testers/lib/MTT/MPI/Get/OMPI_Snapshot.pm OMPI_Snapshot] in our {{{MPI get}}} sections.

{{{
$ perl -I../../.. SVN.pm
Global symbol ""$simple_section"" requires explicit package name at SVN.pm line 43.
Missing right curly or square bracket at SVN.pm line 60, at end of line
syntax error at SVN.pm line 60, at EOF
Execution of SVN.pm aborted due to compilation errors.
}}}

Josh's patch worked for me."
155,1166485079,jsquyres,"(In [488]) 
 * Submitted by: Josh Hursey
 * Reviewed by: Jeff Squyres

Fixes #155.

Fix some old code that hasn't been used in ages."
155,1166485120,jsquyres,"(In [489]) Refs #155.

Fix some old code that hasn't been used in ages."
156,1166484320,jsquyres,"This is better than #151 -- arbitrary SVN arguments are problematic (e.g., where on the command line to put them).  The desired goal for #151 is arbitrary r numbers anyway, so this is cleaner."
156,1166484386,jsquyres,"(In [484]) Refs #156

Allow arbitrary r numbers to be specified in the ini file."
156,1166484452,jsquyres,"(In [485]) 
 * Submitted by: Josh Hursey
 * Reviewed by: Jeff Squyres

Fixes #156

Allow ini files to specify an arbitrary r number for SVN checkouts."
157,1167835861,jsquyres,"This also relates to #110 -- Ethan suspects that this is the ""bitness"" stuff going wrong somehow."
157,1168444746,jsquyres,This is related to #110.
157,1169245645,emallove,"(In [572]) Fixes #110 
Fixes #157 

 * Created `get_mpi_install_bitness()` funclet, which
   detects the bitness of the MPI library in this order:
   1. User INI override (CSV of 1 or more valid bitnesses)
   1. Small test C program (using void*)
   1. /usr/bin/file command output
   (`get_mpi_install_bitness()` is used by default to get
   the `bitness` of the MPI install.)
 * Made `_do_write` public, and renamed it to `SafeWrite`
 * Added `get_sun_cc_version()` funclet (see also r571)"
158,1172679987,emallove,Milestone v2.1 deleted
158,1177430638,jsquyres,"Random thoughts / notes:

 * The current MTT client does not cache results data; it caches meta data about what has run and some of the results data, but it's not exactly the same set of data that is sent to the reporter framework.
 * We will likely need a clean/dirty bit to indicate whether results have been submitted successfully or not.

This may be worth investigating in conjunction with #227."
159,1168489427,jsquyres," * Added onesided tests (was added a while ago, actually, but just now added to the OMPI template ini file)
 * Added mpi2cxx test suite"
159,1172679987,emallove,Milestone v2.1 deleted
160,1167887502,jsquyres,"Bumped this to critical because singletons continue to be a problem in OMPI (i.e., we need to get them tested on a regular basis)."
160,1172679987,emallove,Milestone v2.1 deleted
160,1179958428,emallove,"(In [707]) Fixes #160 (Singleton support)
Refs #224 (Add run-time tests, see ''specific process
placement'' bullet item)

''(Now's an okay time to checkpoint what I've done for ORTE
testing as [milestone:2.1] has been released.)''

 * Singletons can be run like this:
{{{
[MPI Details: Open MPI]
...
exec = mpirun ...
exec:singleton = &test_executable()
...
[Test run: Singletons]
...
mpi_details_exec = singleton
...
}}}
 ''By default, the plain `exec` param is used if 
 an `mpi_details_exec` param is not specified in the Test
 Run section.''
 * Have `DoCommand::Cmd` return pid
 * Set `MTT_LIB` env var correctly in
   [source:/trunk/client/mtt client]"
160,1186682348,emallove,Milestone v3.0 deleted
161,1167928025,emallove,"(In [511]) Re-worded ""Create permalink"" popup window (Fixes #161)
Hide 'Test' by default (Fixes #162)"
162,1167928025,emallove,"(In [511]) Re-worded ""Create permalink"" popup window (Fixes #161)
Hide 'Test' by default (Fixes #162)"
162,1167937790,emallove,"(In [512]) * Disallow {{{test_name}}} from being hidden in Detail view
  (Refs #162)
* {{{get_form_universe}}} need not iterate over ''every''
  phase table.
* {{{results}}} fields are not part of the selectable
  universe"
163,1167887429,jsquyres,Bumping this up to blocker because this results in a false positive which we really shouldn't do (MTT is guilty until proven innocent here :-) ).
163,1168020565,jsquyres,"I have not been able to track this one down yet.  :-(

I've put some extra debugging output in my ibm build scriptlet to hopefully help track this down..."
163,1168030517,jsquyres,"Ok, I got this one figured out.  I didn't have automake installed on ''some'' of the nodes in my cluster (@##$#$@%!!!!) -- so this whole thing only failed when the MTT job landed on particular nodes in my cluster.  

So the client should really be updated to report this error better -- it's not that the test build failed, it's that the post SVN export step failed (i.e., the autogen.sh failed).  But it's currently not reported that way -- it's reported as the test build itself failed, which is a total misnomer."
163,1168033040,jsquyres,"(In [518]) Fixes #163.

In cases where _prepare_source failed in Build.pm, we blithely ignored
it and proceeded on.  Inevitably, something else would fail later, and
that error would get reported.  But that error was a misnomer, because the
original problem was that _prepare_source failed.

So now we report this better."
164,1167921649,jsquyres,I'm a dork -- the stuff is already in ompi-core-template.ini.  Disregard this ticket...
165,1168399422,jsquyres,"(In [532]) Change how we check for non-existent INI file sections.  Load in 2
copies of the INI file and only filter one of them.  When checking for
non-existent sections in the phases (I chose not to duplicate all the
traversing / splitting logic in a separate subroutine just to warn for
non-existent sections), check in the un-filtered INI data.

Fixes #165, #166."
165,1172679987,emallove,Milestone v2.1 deleted
165,1186682348,emallove,Milestone v3.0 deleted
166,1168399422,jsquyres,"(In [532]) Change how we check for non-existent INI file sections.  Load in 2
copies of the INI file and only filter one of them.  When checking for
non-existent sections in the phases (I chose not to duplicate all the
traversing / splitting logic in a separate subroutine just to warn for
non-existent sections), check in the un-filtered INI data.

Fixes #165, #166."
166,1172679987,emallove,Milestone v2.1 deleted
166,1186682348,emallove,Milestone v3.0 deleted
167,1172679987,emallove,Milestone v2.1 deleted
168,1176923636,jsquyres,"This is a dup of #190 -- and #190 seems to have more up-to-date information.  So we'll close this one, even though it pre-dates #190."
169,1167967217,emallove,"What happens when you click the ""Got Cookies?"" button [http://developer.apple.com/internet/safari/faq.html#anchor6 here]? Does your version of Safari have a JavaScript console of any kind? I'm curious to know whether the ""Save"" button click incurs a Javascript error for you. If you don't have a JavaScript console, maybe the following link would give you one? http://www.celestialfrontiers.com/safari_enhancer.php"
169,1167970751,jsquyres,"I get a popup that says ""Got cookies!"" (presumably that means cookies are working).

I enabled the javascript console in safari, but it doesn't show any exceptions when I click on the ""Save"" button in the preferences popup.  :-(

FWIW, I did a tcpdump of the http that comes back to me from the web server and I don't see a cookie being set in the HTTP header.  I assume that this means that you're doing it in javascript directly on the client somehow..."
169,1168550364,emallove,"(In [541])  * Write ''Preferences'' cookies with server-side PHP from
   the main window, instead of client-side JavaScript in the
   popup. Some browsers (e.g., Safari) apparently prevent
   child windows from writing cookies for security (?)
   reasons. Keep cookies around for 1 year. (Fixes #169)
 * define() some paths"
170,1168014554,emallove,"I propose we have a link (labeled {{{show/hide columns}}}?) somewhere to a multiple select menu containing ''all'' available column names. It could be a similar mechanism to {{{[Preferences]}}} - window opens, user picks and chooses which columns they want shown/hidden, and applies their show/hide selection with a button click."
170,1168016298,jsquyres,"You're propsing ''all'' column names, meaning all the columns that are related to the test run -- meaning the test build and mpi install columns?

Could you mock something like this up easily to see what it would look like?"
170,1168020228,jsquyres,"Thinking about this a bit more, simply having the ability to show all columns may not be sufficient.  Remember that, at least in the case cited on this ticker, 3 of the differences are due to MPI Details variants, meaning that it's the [very very long] mpirun command line that is different.

Showing the mpirun command line will not be convenient in the summary table or as a label on the graph... :-\"
170,1168037870,emallove,"{{{variant}}} is a smallint in the database, but on the client-side it looks like variant is just a serial number to set a series mpiruns apart. So we need to handle {{{command}}} better to snarf out mca parameters and the like, right?
"
170,1168040546,jsquyres,"Well, that gets tricky (snarfing mca params out of the command line), because:

 * We don't want to tie ourselves to OMPI
 * There may be other factors besides MCA params that differentiate params

Per phone conversation, conclusion was that we should just show the variant column."
170,1168224487,emallove,"(In [522]) Refs #170

Added a {{{[Columns]}}} link to the query screen.  (Note:
transitions between phases needs to be ironed out. That is
the new {{{setup_showhide_cols()}}} needs to get worked into
{{{form_carryover()}}}). Required the following be done:

 * Generalized {{{prefs_popup}}} to {{{form_popup}}}.
 * Added applicable fields to
   [source:/trunk/server/sql/views.sql] and
   {{{order_columns()}}}

Maybe it would make more sense for ''all'' the ''Show/Hide''
menu selections in the {{{[Columns]}}} popup? Drawback to
this approach: IE Javascript compatibility (#142)."
170,1168448268,emallove,"This is mostly fixed. One can now add any column into a summary table (that is, ''sane'' column - e.g., you wouldn't want to see stdout in a summary table). We will come up with a better solution later for reporting on MCA parameters (e.g., creating a field in the mtt database for MCA params and snarfing the MCA's out of the `mpirun` command or the `MPI Details` section in the MTT client)."
170,1168902008,emallove,"(In [557]) Refs #170

 * Process ''large'' fields (`stdout`, `stderr`, `command`,
   `environment`, and `result_message`) differently in
   Summary view.  Search strings effect a ''Show'' selection
   of the large field, but the only thing ''shown'' is the
   matched patterns.  This is useful for reports that
   compare and contrast MCA parameters.  E.g., a Summary
   report with the command text field set to `openib;tcp`
   might output a report that looks like:
{{{
    # 	Org 	Command
    1 	acme    openib 	    1 	0 	0 	0 	1
    2 	acme    openib 	    0 	1 	0 	0 	1
    3 	acme    tcp 	    1 	0 	0 	0 	1
    4 	acme    tcp    	    0 	1 	0 	0 	1
}}}
 * Added yellow highlighting of matches in Detail view
 * Standardize naming of `setup_`* functions (functions that
   just return an array of DB fields)
 * Renamed `setup_defaults()` to `setup_mainwin_fields()`"
170,1172679987,emallove,Milestone v2.1 deleted
170,1186682348,emallove,Milestone v3.0 deleted
171,1168447103,jsquyres,Ethan proposed a good workaround for the near term (prerequsite sections) such that we don't need the CLI query soon.  So pushing this out to 3.0.
172,1168040089,jsquyres,"Ethan brought up the point that you can put a &shell() funclet in for platform name and do whatever you want there.  I think that suits my needs, so I'm closing this ticket."
172,1172679987,emallove,Milestone v2.1 deleted
172,1186682348,emallove,Milestone v3.0 deleted
173,1168053819,emallove,(In [520]) MTT client needs to not submit perf results from non-pass's (Fixes #173)
174,1168542922,emallove,"(In [540]) Have [source:/trunk/server/cron/prune_db.pl]
delete week-old ""trial"" results (Fixes #174)"
175,1168399587,jsquyres,"(In [533]) Fixes #175: add a funclet that returns the name of the environment
that you're running in."
175,1172679987,emallove,Milestone v2.1 deleted
175,1186682348,emallove,Milestone v3.0 deleted
176,1168390827,jsquyres,Have changes ready to commit; will coordinate with Ethan tomorrow morning because it also involves changing database field names on the server.
176,1168441031,jsquyres,"(In [534]) Several changes:

 * Add environment variable $MTT_TEST_RUN_RESULT which will be set
   during the after_each_exec step in MPI Details so that your
   scriptlet can examine it to know if the test that just ran passed,
   failed, skipped, or timed out.  The possible values are:
   * passed
   * failed
   * skipped
   * timed_out
 * Throughout the code, unify the handling of the exit status of
   DoCommand.  Tests now report up to the database the exit_value
   (i.e., the value that they called exit() with) and the
   exit_signal.  Only one of these values will be significant -- if
   exit_signal is nonzero, then the process exited with that signal.
   If exit_signal is zero, then the process exited with the
   exit_value.
 * Ensure that we consistently submit the exit_value and exit_status
   to the reporter (fixes #176).
 * Added a few names in MPI/Install.pm to help with upcoming changes
   to Trim.
 * Add convenience functions MTT::DoCommand::exit_value() and
   MTT::DoCommand::exit_signal() that will return 0 or the appropriate
   value (e.g., exit_signal() will return 0 if the process did not die
   due to a signal)."
176,1168442126,emallove,"(In [535]) Make server-side changes to column names (refs #176):

 * exit_status -> exit_value
 * signal      -> exit_signal"
177,1168382342,emallove,"(In [530]) Fixes #177

Display the entire SQL statement(s) that resulted in an SQL
error(s) (displaying the SQL error alone is barely a hint
about why the error occurred). SQL errors are displayed
without any &debug setting in the URL. (See also #133)"
178,1168447838,jsquyres,"This issue bit Scott W. at Cisco, so I'm adding him to the CC list."
178,1168470865,emallove,"(In [537])  * Added textfield searching to `[Columns]` (and renamed it
   `[Advanced]`) (Fixes #183)
 * The query string needs to take precedence over the URL,
   so when someone emails/IRCs a link, the receiver and
   sender are looking at the same data. (Fixes #178)
 * Outfitted `prefs_popup()` (now called `form_popup()`) to
   create multi-column form menus. 
 * Disable the database queries in `get_form_universe()` for
   now. The selection_popups will get initialized on the
   first click of the `Summary` button anyway."
179,1168444566,jsquyres,Details of this are very similar to #110 -- all conversation / decisions are on that ticket.
179,1169519630,emallove,"(In [580])  * Added endian detection for the MPI install. Implemented in
   a similar fashion as the bitness detection (see r572).
   As with bitness, this can be overridden in the INI.
   (Fixes #179)
 * Added 30 timeout and `np -1` to `mpirun get_bitness`"
179,1169564608,jsquyres,"Going to re-open this because the endian stuff isn't quite right for multi-package and cross-compiling situations.  More specifically, the default -- at least on OSX -- could be a little better for both bitness and endianness.

It turns out that running ""file"" on ""libmpi.0.dylib"" should be sufficient ("".dylib"" is the extension on OSX for shared libraries).  This *may* not be sufficient for MPI's other than OMPI -- I don't know if all of them have a ""libmpi"" (indeed, I think not all do).  So we might want to find a way to parameterize the library name (perhaps as an optional argument to the funclet?).

Here's some examples from ""file"" output on OSX:

 1. On an x86 intel mac, 32 bit:
{{{ 
shell$ file ~/bogus/lib/libopen-pal.0.dylib
/Users/jsquyres/bogus/lib/libopen-pal.0.dylib: Mach-O dynamically linked shared library i386
}}}
 1. On a PPC 64 bit:
{{{
shell$ file libmpi.0.0.0.dylib 
libmpi.0.0.0.dylib: Mach-O 64-bit dynamically linked shared library ppc64
}}}
 1. On a universal library:
{{{
shell$ file timer.dylib                                  
timer.dylib: Mach-O universal binary with 4 architectures
timer.dylib (for architecture i386):    Mach-O dynamically linked shared library i386
timer.dylib (for architecture x86_64):  Mach-O 64-bit dynamically linked shared library x86_64
timer.dylib (for architecture ppc):     Mach-O dynamically linked shared library ppc
timer.dylib (for architecture ppc64):   Mach-O 64-bit dynamically linked shared library ppc64
}}}

Note that it will always be ""i386"", not ""i686"" or anything like that.  PPC's are one endian, the various x86's are the other endian (I never remember which is which :) ).  The 64 bit ones are specifically labeled as such."
179,1169653795,emallove,"(In [582]) Fixes #179
Fixes #110

Adjusted `get_mpi_install_bitness()` and
`get_mpi_install_endian()` to check for Mac OSX libraries.
(The `file` command now has the highest precedence for
bitness/endian detection, since it is currently the only way
we can automatically detect Mac OSX library bitness/endian
using `file`.)"
179,1172679987,emallove,Milestone v2.1 deleted
179,1186682348,emallove,Milestone v3.0 deleted
180,1172679987,emallove,Milestone v2.1 deleted
180,1189537288,jsquyres,"I've subscribed to the ""testing"" list in digest mode.  We'll see what happens."
180,1189690870,jsquyres,"It looks like this is a function of GNU mailman, not MTT.  I.e., if we were using a different listserver, we might not have a problem.

Since this is not a problem with MTT itself, I'm closing this ticket."
181,1168634499,emallove,"(In [546])  * Patch in `SetAutoMin()` fix for
   [source:/trunk/server/php/jpgraph/jpgraph_log.php]
   [http://www.aditus.nu/jpgraph/snapshots/jpgraph1-r834.tar.bz2 patch is here]
 * Do `SetAutoMin(-2)` (which means the y-axis minimum will
   be `10^-2` (`0.01`) when datapoints appreach `0` in
   graphs (fixes #181)"
182,1172679987,emallove,Milestone v2.1 deleted
182,1174942441,emallove,"It might entail fewer lines in the INI file to be able to mark sections as being a prerequisite for sections that are listed ''after'' it in the INI file.  E.g., setting the following parameter in the `[Test build: trivial]` section would mean that MTT will not perform subsequent sections if a single failure occurs in the section specified as a prerequisite.

{{{
[Test build: trivial]

prerequisite_section = 1
}}}

So the above would be the logical equivalent of putting the following in ''every'' section listed after `Test Build: trivial`.

{{{
prereq_test_build = &passed(""trivial"")
}}}"
182,1174955078,jsquyres,"Replying to [comment:5 emallove]:
> It might entail fewer lines in the INI file to be able to mark sections as being a prerequisite for sections that are listed ''after'' it in the INI file.  E.g., setting the following parameter in the `[Test build: trivial]` section would mean that MTT will not perform subsequent sections if a single failure occurs in the section specified as a prerequisite.

Hmm.  Are we guaranteed that the ordering in the INI file is the same as that in the perl INI traversal?  It also seems a little ""iffy"" in that you might not always have a clear-cut / linear prerequsite ordering.  Plus, it's not in the same spirit as our ""backwards reference"" scheme that we use elsewhere in the INI file."
182,1175873940,emallove,"Replying to [comment:6 jsquyres]:
> Replying to [comment:5 emallove]:
> > It might entail fewer lines in the INI file to be able to mark sections as being a prerequisite for sections that are listed ''after'' it in the INI file.  E.g., setting the following parameter in the `[Test build: trivial]` section would mean that MTT will not perform subsequent sections if a single failure occurs in the section specified as a prerequisite.
> 
> Hmm.  Are we guaranteed that the ordering in the INI file is the same as that in the perl INI traversal?  

There is no official INI file specification, but the [source:/trunk/lib/Config/IniFiles.pm IniFiles.pm] module we are using in the MTT repository ''does'' preserve section ordering.

> It also seems a little ""iffy"" in that you might not always have a clear-cut / linear prerequsite ordering.  

We can allow for both, right? I still like how it covers a simple case in one line versus ''n'' lines.

If we have a `prerequisite_section` parameter then we also need an `ignore_prerequisite` parameter, in case there are section(s) that we want to ''always'' run.

{{{
ignore_prerequisite = 1
}}}"
182,1175946386,jsquyres,"Replying to [comment:7 emallove]:
> > It also seems a little ""iffy"" in that you might not always have a clear-cut / linear prerequsite ordering.  
> 
> We can allow for both, right? I still like how it covers a simple case in one line versus ''n'' lines.
> 
> If we have a `prerequisite_section` parameter then we also need an `ignore_prerequisite` parameter, in case there are section(s) that we want to ''always'' run.
> 
> {{{
> ignore_prerequisite = 1
> }}}

I suppose.  I guess I just don't like how it's different than our other usages (chaining through the sections).

If we support this feature, we should give it a clear, unambiguous name that clearly states that this field will make this section a prerequsite for ''all'' sections in this phase.  I don't have much of an opinion of the ""ignore_prerequisite"" concept, but it does seem kinda odd to me.  :-)"
182,1176299156,jsquyres,"It seems like this ticket would be a good companion for ticket #203 -- #203 can be used to determine whether an overall section passed or failed, and this section can be used to determine what happens when/if a section ""fails""."
183,1168470865,emallove,"(In [537])  * Added textfield searching to `[Columns]` (and renamed it
   `[Advanced]`) (Fixes #183)
 * The query string needs to take precedence over the URL,
   so when someone emails/IRCs a link, the receiver and
   sender are looking at the same data. (Fixes #178)
 * Outfitted `prefs_popup()` (now called `form_popup()`) to
   create multi-column form menus. 
 * Disable the database queries in `get_form_universe()` for
   now. The selection_popups will get initialized on the
   first click of the `Summary` button anyway."
183,1172679987,emallove,Milestone v2.1 deleted
183,1186682348,emallove,Milestone v3.0 deleted
184,1172679987,emallove,Milestone v2.1 deleted
184,1188598502,jsquyres,This ticket is now solved on the jms-new-parser branch.
185,1168975709,emallove,"[wiki:WebUIGuide#ShowHideMenus This wiki section] explains how to add the `Date Range` column in Summary view. Right now, it works the same in both `Summary` and `Detail` view. Excerpt:

{{{Date Range}}} is an oddball field in that there is no show/hide
menu next to it. The show/hide ''equivalent'' is available
as a second menu in the selection popup containing options
like ""by day"", ""by hour"", ""by minute"", etc. Selecting ""by
''interval''"" will add a {{{Date Range}}} column grouped
according to the ''interval'' selection.

Though actually, `Date range` should really ''always'' be displayed (`by second`) in `Detail` view. Will fix."
185,1168981804,emallove,(In [558]) Always display timestamps in Detail view (fixes #185)
186,1169765361,jsquyres,"This ''may'' be associated with #197.  We'll see.

Moving to milestone 2.1..."
186,1172328633,jsquyres,Progress is occurring on this ticket; Cisco made some changes in our local config to see if we can track this down a bit further.  Bill D'Amico will followup.
186,1172679987,emallove,Milestone v2.1 deleted
186,1174169408,jsquyres,"(In [657]) Fixes #186

At Cisco, our after_each_exec value for the MPI Details section
contains:

{{{
srun -N $SLURM_NNODES killall -9 orted
}}}

This uses SLURM to launch a job on our assigned nodes to ensure to go
cleanup stray orteds, etc.  However, we peridocially saw test run
results that seemed to be killed via -9 for no reason.  That is, the
test seemed to be running ok but then was suddenly killed via -9.
This happened quite randomly, and with low frequency (a dozen times in
40 or 50 thousand runs).

After much investigation, it turned out that the problem was a
combination of factors that effectively delayed the ""killall -9 ...""
until ''after'' MTT thought that the after_each_exec step was complete
and, therefore MTT launched the next test.  So the test that was
getting erroneously killed was the ''next'' test -- being killed by
the ''previous'' after_each_exec step.  This is partially MTT's fault
and partially SLURM's fault.

 * MTT dumps the ""srun ..."" command into a script in /tmp and executes
   it.  A timeout timer of 10 seconds is used to ensure that it
   doesn't hang forever.
 * If the srun is slow to execute for some reason (e.g., a random NFS
   or SLURM delay before the job runs or completes) and MTT's
   after_each_exec timeout expires, MTT will kill the script
   execution.
 * However, srun is stubborn (by design) -- it may sometimes require
   more than one SIGTERM (or whatever) before dying (e.g., because
   it's in a ""sensitive"" execution location).  So killing the script
   won't necessarily kill the srun -- the srun will stay blocked
   waiting for whatever it was waiting for and eventually execute.
   What we were seeing was that this execution is ''after'' MTT has
   given up on after_each_exec and moved on to the next test.  Hence,
   a false failure.

Note that a side effect of this problem that we saw was that MTT would
kill the script, but then wait several more seconds (complaining each
second) before abondoning the after_each_exec step.  This is because
although the controlling script died, srun itself held open the
stdout/stderr pipes and therefore MTT knew that some child process was
still running.

This is not necessarily a SLURM-specific problem; any after_each_exec
that gets delayed and does not immediately die when MTT kills it may
run into this same problem.  Yuk!

This commit fixes the problem in the following ways:

 * If any of the steps ([before|after]_[each|any]_exec) are a single
   line, MTT will directly launch them (i.e., not create an
   upper-level script and launch that).  Hence, Cisco's INI file now
   contains the following:
{{{
after_each_exec = srun -N &getenv(""SLURM_NNODES"") ...cleanup script...
}}}
 * Any of the steps can have a ""timeout"" value in the MPI details
   section.  The default is 10 seconds, but can be anything that
   evaluates to an integer.  Values <=0 result in an infinite
   timeout.  For example:
{{{
after_each_exec_timeout = 30
}}}
 * Any of the steps can have a ""pass"" value in the MPI details
   section.  The default is:
{{{
<foo>_pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
}}}
 * Warnings are issued for steps that do not pass.
 * Per the above bullet, several new funclets were added:
   1. &cmd_wifexited(): Returns 1 if the last command executed exited
      normally, 0 otherwise.
   1. &cmd_wexitstatus(): Returns the argument to exit() (or return
      value from main()) from the last command executed.  Only
      meaningful if &cmd_wifexited() returns 1.
   1. &cmd_wifsignaled(): Returns 1 if the last command executed
      exited via signal.
   1. &cmd_termsig(): Returns the signal number that terminated the
      last command.  Only meaningful if &cmd_wifsignaled() returns 1.

This commit also fixes a few random typos in comments."
186,1186682348,emallove,Milestone v3.0 deleted
187,1170102827,emallove,"(In [602]) Added human-reporting to
[source:/trunk/server/php/submit/index.php] when
an SQL error occurs (Refs #187)"
187,1170374832,emallove,"(In [614]) Fixes #187 (along with r602)

All emailing of errors is done by
[source:/trunk/server/php/submit/index.php submit.php] (see r602). If
they want, users can fill in the `mttdatabase_email_errors_to` param in
their `[Reporter: IU Database]` section to receive SQL errors."
187,1172679987,emallove,Milestone v2.1 deleted
187,1186682348,emallove,Milestone v3.0 deleted
188,1169650000,jsquyres,Done. 
189,1169167172,jsquyres,Adding Galen/LANL to this ticket because this idea came from the requirements of LANL's setup.
189,1172679987,emallove,Milestone v2.1 deleted
189,1188416879,jsquyres,"(In [953]) Add a new field to the MTT section: funclet_files.  This field takes a
comma-delimited list of .pm files that can be used to dynamically add
more funclets to MTT at run-time without touching MTT's code.  From
the description in the sample ini file:

# OMPI Core: If you have additional .pm files for your own funclets,
# you can have a comma-delimited list of them here.  Note that each
# .pm file *must* be a package within the MTT::Values::Functions
# namespace.  For example, having a Cisco.pm file must include the
# line:
#
#     package MTT::Values::Functions::Cisco;
#
# If this file contains a perl function named foo, you can invoke this
# functlet as &Cisco::foo().  Note that funclet files are loaded
# almost immediately, so you can use them even for other field values
# in the MTT section.
# funclet_files = /path/to/file1.pm, /path/to/file2.pm

Fixes #189."
190,1172679987,emallove,Milestone v2.1 deleted
190,1172752861,jsquyres,"Adding some CC's to this ticket for those who will care about it.

Note that #9 will not necessarily open the door to heterogeneous testing because we still have the problem of compiling the tests heterogeneously (i.e., the Test Build phase needs to become heterogeneous-aware).  I am further assuming that making Test Build heterogeneous-aware will be pretty much the same thing as making MPI Install be heterogeneous-aware.  So once we crack this nut, it should be solved for everything."
191,1169232353,jsquyres,"(In [568]) Fixes #191

Check explicitly if it's not defined -- not ""!$val"".  Otherwise, we'll
mistakenly trim out values that are either undef *or* equal to 0."
194,1169765437,jsquyres,"This has been fixed, no?  Moving to milestone 2.0.1..."
194,1170257823,jsquyres,Ethan confirms that this is fixed.
195,1170260493,jsquyres,"And also the ""variant"" field.  Ethan's going to do some performance testing."
195,1171295238,emallove,Shifting these two fields to `results` did not prove to be an effective optimization.  A more thorough decoupling of the tables is needed to reduce the row count in `test_run`.
195,1172679987,emallove,Milestone v2.1 deleted
195,1186682348,emallove,Milestone v3.0 deleted
196,1170265750,jsquyres,"I'm unable to replicate this -- I ''do'' have protection code in there that should sense when the pre-build step fails.  :-(

Pushing this off until I can get more data..."
196,1172327046,jsquyres,"Sven -- do you have any further information on this issue?  I was unable to replicate the problem -- do you know if you were running the most recent MTT when this error occurred?
"
196,1172674399,jsquyres,"Sven did an ""svn up"" on 2/28.  I'm going to close this as ""worksforme"" and if it happens again, please open a new ticket."
196,1179947502,,Milestone v2.0.2 deleted
197,1169765829,jsquyres,"Tim helped with this one - turns out you can't mix select() and perl reads via <foo> because of internal perl buffering (@#$!@#$!@#$).  See note that the bottom of http://perldoc.perl.org/functions/select.html.

Commit coming shortly to explain...
"
197,1169766162,jsquyres,"(In [592]) Fixes #197.

 * Per note at the bottom of
   http://perldoc.perl.org/functions/select.html, you can't mix
   select() and reads via <foo>.  Instead, you must use sysread() with
   select().  But sysread() requires a specific number of bytes to
   read, so you have to set the channel to be non-blocking (i.e.,
   O_NONBLOCK) and just try to sysread() a huge number of bytes.  But
   pipes can't be set to nonblocking, so had to re-implement the whole
   loop in terms of local TCP loopback sockets where we can use
   select() and sysread().  Blah!
 * Only open the listening socket once for performance reasons and
   cache the listening socket and resulting address (we use a random
   port assigned by the OS) so that successive calls to DoCommand will
   simply re-use the same listening socket.  Perl makes the socket
   close on exec, so we're ok there.  The listening socket will also
   be cleaned up when the client exits.
 * Note that the end result is that we get ''much'' better stdout /
   stderr capturing (even that which is not line buffered), and we
   also '''guarantee''' to kill things when the MTT timeout expires
   (which definitely was not true before this)."
198,1186405493,jjhursey,I think this ticket will be invalidated by the v3 fixes which do not use cached tables in the reporter. Ticket #253
198,1186682348,emallove,Milestone v3.0 deleted
199,1170694345,emallove,"(In [616]) Fixes #199

`highlight_match` run amuck again. Only wrap matches in
highlighted font tags if the match contains a word character
(`[a-zA-Z0-9_]`).  Consider how many pointless `<font>` tags
get printed on a NULL search pattern with 38,000 characters
of STDOUT/STDERR (for ~500 lines of output)...  With this
fix, a formerly 5.6MB report is now a 175KB report!  Yoinks."
199,1179947502,,Milestone v2.0.2 deleted
200,1171896930,jsquyres,"(In [622]) Fixes #200, #201

 * Added &weekday_name() (returns lowercase 3 character names, e.g.,
   ""sun"", ""mon"", ""tue"", ...etc.) and weekday_index() funclets (index 0
   = Sunday).  The intent was to run some tests only on certain days
   of the week.  But after thinking about this a bit, I'm not entirely
   sure they will do what we want them to do because we start testing
   at 10:30pm US Eastern time, so the weekday name may change over the
   course of a single test.  
 * So I also added a &getenv() funclet to get any value from the
   environment.  This allows MTT client invokers to set something in
   the environment to, for example, indicate that some tests should be
   run in this invocation (e.g., run some tests once a week,
   regardless of whether the actual test starts at 11pm or 1am [i.e.,
   spanning a weekday name]).
 * Added a &null() funclet that should allow values to be skipped
   because it won't return """", it will return undef.
 * Added funclets to get the MPI get name, MPI install name, Test get
   name, Test build name, Test run name, and MPI details name (from
   relevant sections).  For example, a test build section has access
   to the MPI get name, MPI install name, Test get name, and Test
   build name.  MPI install sections only have access to the MPI get
   name and MPI install name.  And so on.  The intent is to be able to
   parameterize in MPI details based on which MPI you're testing
   (e.g., OMPI v1.1 has different capabilities than OMPI v1.2, so the
   mpirun command lines may need to be different).  Thinking about
   this a bit more, you could simply specify a different mpi_details
   in the MPI get section, too.  So we've now got two ways to do this.
   :-) Also, this applies to all the sections -- not just the MPI
   details section.
 * Updated the ompi-core-template.ini sample to show an example
   parameterization in the MPI details section."
200,1172679987,emallove,Milestone v2.1 deleted
200,1186682348,emallove,Milestone v3.0 deleted
201,1171896930,jsquyres,"(In [622]) Fixes #200, #201

 * Added &weekday_name() (returns lowercase 3 character names, e.g.,
   ""sun"", ""mon"", ""tue"", ...etc.) and weekday_index() funclets (index 0
   = Sunday).  The intent was to run some tests only on certain days
   of the week.  But after thinking about this a bit, I'm not entirely
   sure they will do what we want them to do because we start testing
   at 10:30pm US Eastern time, so the weekday name may change over the
   course of a single test.  
 * So I also added a &getenv() funclet to get any value from the
   environment.  This allows MTT client invokers to set something in
   the environment to, for example, indicate that some tests should be
   run in this invocation (e.g., run some tests once a week,
   regardless of whether the actual test starts at 11pm or 1am [i.e.,
   spanning a weekday name]).
 * Added a &null() funclet that should allow values to be skipped
   because it won't return """", it will return undef.
 * Added funclets to get the MPI get name, MPI install name, Test get
   name, Test build name, Test run name, and MPI details name (from
   relevant sections).  For example, a test build section has access
   to the MPI get name, MPI install name, Test get name, and Test
   build name.  MPI install sections only have access to the MPI get
   name and MPI install name.  And so on.  The intent is to be able to
   parameterize in MPI details based on which MPI you're testing
   (e.g., OMPI v1.1 has different capabilities than OMPI v1.2, so the
   mpirun command lines may need to be different).  Thinking about
   this a bit more, you could simply specify a different mpi_details
   in the MPI get section, too.  So we've now got two ways to do this.
   :-) Also, this applies to all the sections -- not just the MPI
   details section.
 * Updated the ompi-core-template.ini sample to show an example
   parameterization in the MPI details section."
201,1179947502,,Milestone v2.0.2 deleted
202,1172185794,emallove,"(In [627]) `hostname` is currently a column in the `submit` table not
the `compute_cluster` table (Refs #202)"
202,1172324838,jsquyres,"(In [629]) Fixes #202

 * Add new INI field: mttdatabase_hostname
 * Add new funclet (&env_hosts()) which will return a list of hosts
   used by this run.  The list is not guaranteed to be usable as a
   hostlist (e.g., the SLURM hostlist will be a regexp), but will be
   suitable for reporting purposes."
202,1179947502,,Milestone v2.0.2 deleted
203,1172674169,jsquyres,Bumping this up in priority because external events have caused false failures at Cisco recently.  So this feature is kinda important.
203,1176299040,jsquyres,"Ethan/Jeff conversation 4/11/2007: it seems like a better idea to re-scope this ticket to only have it determine whether a given section (overall) passes or fails.  So this parameter would be used to judge whether an ''entire section'' ""passed"" or ""failed"".

What to do about whether the overall section passes or fails should be a different decision -- so we should not automatically abort if the determination is that the overall section ""failed"".  Ticket #182 should probably be used for deciding what to do.

Also:

 * Need to determine if it's easier to have ""percentage of failures"" or ""percentage of passes"" (or perhaps have both?)
 * Should we also have ""absolute number of failures|passes"" (as opposed to percentage)? 
 * Obviously, if we allow all these kinds of parameters, you would specify only '''one''' of these parameters, and error if more than one is specified."
203,1213904192,emallove,"(In [1209]) Fixes #203 ''Provide a ""percentage of failed"" threshold
parameter for entire sections''

Added the below ""threshold"" INI parameters for Test run
sections. Acceptable in the following formats where '''D'''
is an integer: `D%` (percentage), `D/D` fraction, `.D`
(decimal), and `D` (integer count of the number of test
variant results to break after). The first thershold to
break, ''breaks'' from the `RunEngine` loop of `mpirun`
commands.

  * {{{break_threshold_pass}}}
  * {{{break_threshold_fail}}}
  * {{{break_threshold_skipped}}}
  * {{{break_threshold_timeout}}}"
203,1213961157,jsquyres,"Can you explain how these are used?  I'm not quite sure I grok the specifics from your text.  For example, how would I set MTT to not run anything beyond Trivial tests if any of the Trivial tests fail?  Specifically:

 * Which of the four fields do I use, and what do I set it to
 * How do I get MTT to skip all the rest of the Test Run sections"
203,1213977800,emallove,"Replying to [comment:9 jsquyres]:
> Can you explain how these are used?  I'm not quite sure I grok the specifics from your text.  For example, how would I set MTT to not run anything beyond Trivial tests if any of the Trivial tests fail?  Specifically:
> 
>  * Which of the four fields do I use, and what do I set it to
>  * How do I get MTT to skip all the rest of the Test Run sections

The above use case is ticket #182 (''Prerequisite sections'').

Use cases for the `break_threshold` INI parameter would be, e.g., 

''Skip all remaining Intel tests if 25% of them fail.''

{{{
[Test run: intel]
break_threshold_fail = 25%
}}}

''Skip the remaining Intel tests if `2/3` of them pass.''

{{{
[Test run: intel]
break_threshold_pass = 2/3
}}}
"
204,1172679987,emallove,Milestone v2.1 deleted
204,1186600288,jjhursey,I'll take a look at this one and see what I can find.
204,1186668678,jjhursey,"(In [828]) Cleeanup Stats schema a bit.

First working cut of the collection script for stats.
This currently only gathers contribution data by day and month.

Refs #204"
204,1187620261,jjhursey,"In r860 an example php page was added to display the currently gathered stats.

It only displays tables at the moment. We need to add graphs to make it even more useful.

We should revisit this to make sure we are asking the queries that we want to of the gathered data. The data is granular enough to answer a considerable amount of queries quickly."
204,1190118318,jjhursey,"We are currently keeping historical stats on database size (Bytes and tuples) and contribution.

The open question at the moment is how to display the contribution data. I believe that is another ticket."
205,1172679987,emallove,Milestone v2.1 deleted
208,1172679987,emallove,Milestone v2.1 deleted
208,1175793447,emallove,"(In [665]) Added a `scratch` parameter to `MTT` section of INI file.
(Mostly required just moving code around.)

 * Moved `-f|--file` and `--scratch` parameter processing
 * Moved MTT library modules search into `BEGIN`
 * Renamed some vars for clarity in `_process_ini_param`

Fixes #208"
208,1175797753,emallove,"(In [666]) In r665, I forgot to add sample usage of `scratch` in
[source:/trunk/samples/ompi-core-template.ini] (Refs #208)."
209,1172679987,emallove,Milestone v2.1 deleted
210,1172767315,emallove,"(In [634]) Fixes #210

 * Created `choose_table_type()` function to determine if
   the date range is within the speedy `TABLEs`' scope
 * Left a block of (commented) code to rip out unnecessary
   `JOINs` from the `JOIN` clause (this block is unfinished
   and was not verified to be worth pursuing in terms of a
   performance gain, because the slow performance issue
   seems to be the ''enormous'' row count of the `test_run`
   table).
 * Fixed `Number of Rows` bug, by using an unLIMITed SELECT
   INTO and then a `COUNT(*)` (instead of `pg_num_rows()`)
 * Default to using the dynamic `VIEW` (instead of using the
   `VIEWs` in [source:/trunk/server/sql/views.sql])"
210,1179947502,,Milestone v2.0.2 deleted
211,1173130973,jsquyres,"(In [642]) Fixes #211, #212

 * Implement new fields in the INI file [MTT] section for specifying a
   comma-delimited list of proxies to use for HTTP/FTP downloads, the
   SVN module, and 
   * '''http_proxy''': URL for HTTP proxying (to include proper method
     prefix, such as ""!http://"")
   * '''https_proxy''': Ditto for HTTPS proxying
   * '''ftp_proxy''': Ditto for FTP proxying
 * This ended up ''requiring'' a proper locking solution (see below).
 * Implemented MTT::Lock framework to allow arbitrary
   locking/unlocking by string name (typically a filename).  A new
   optional ""[lock]"" section now exists in the INI file.  If
   unspecified, all locks/unlocks are no-ops.
   * Just like other sections, you must specify a ""module=<foo>"" line
     in the [lock] section to specify which module is used to implement
     the locks.
   * One module currently exists in this framework: MTTLockServer.
     It takes 2 parameters: mttlockserver_host and
     mttlockserver_port.  Example:
{{{
[Lock]
module = MTTLockServer
mttlockserver_host = my-lock-server.example.com
mttlockserver_port = 12345
}}}
 * Fixups from r640 to bring the mtt-lock-server online
 * The mtt-lock-server is currently in client/, but may move someday.
   It takes a few parameters when launched:
   * '''-f''': To run it in the foreground (default is to daemonize).
   * '''-p''': port number to listen on
   * '''-s''': log to syslog

Typically, you run a single mtt-lock-server for your cluster and then
go run as many MTT's as you want.  The lock server will enforce
serialization where necessary.

'''NOTE:''' The SVN module ''must'' have a locking module if multiple
MTT's are going to be running simultaneously with a proxy, due to the
fact that SVN will only use the file $HOME/.subversion/servers to find
where its proxy server is located.  Hence, MTT will lock that file,
set the proxy, do the SVN checkout/export, restore the file, and then
unlock it.  If locking is not used, mutliple MTT clients could stop on
the ""servers"" file simultaneously and Bad Things(tm) could happen."
211,1179947502,,Milestone v2.0.2 deleted
212,1173108687,emallove,"A simple `.mtt_lock` file could not do the trick here because there could be a race condition, right?  

Why can't we use `lockd`?"
212,1173109101,jsquyres,"Replying to [comment:2 emallove]:
> A simple `.mtt_lock` file could not do the trick here because there could be a race condition, right?  

Correct.

> Why can't we use `lockd`?

I didn't know that there was an external API available for the lockd outside of the NFS client code...?"
212,1173109207,jsquyres,"(In [640]) First cut of a simple network lock server.

Refs #212."
212,1173112395,emallove,"Replying to [comment:3 jsquyres]:
> Replying to [comment:2 emallove]:
> > A simple `.mtt_lock` file could not do the trick here because there could be a race condition, right?  
> 
> Correct.
> 
> > Why can't we use `lockd`?
> 
> I didn't know that there was an external API available for the lockd outside of the NFS client code...?

So we couldn't do something like this?

{{{
#!perl
#!/usr/bin/env perl

use Fcntl ':flock'; # import LOCK_* constants

sub lock {
    flock(FILE, LOCK_EX);
}
sub unlock {
    flock(FILE, LOCK_UN);
}

open(FILE, ""> some_mtt_file.txt"") or die ""Can't open file: $!"";
lock();
print FILE ""foo bar ..."", ""\n\n"";
unlock();
}}}"
212,1173112819,jsquyres,"Replying to [comment:5 emallove]:
> So we couldn't do something like this?

flock() does not work over NFS.

However, reading the Linux man pages, it looks like fcntl() ''does'' provide locking semantics over Linux as long as you have ""a recent enough kernel"" (I'm not sure what that means, exactly).

Is this true for Solaris as well?"
212,1173130973,jsquyres,"(In [642]) Fixes #211, #212

 * Implement new fields in the INI file [MTT] section for specifying a
   comma-delimited list of proxies to use for HTTP/FTP downloads, the
   SVN module, and 
   * '''http_proxy''': URL for HTTP proxying (to include proper method
     prefix, such as ""!http://"")
   * '''https_proxy''': Ditto for HTTPS proxying
   * '''ftp_proxy''': Ditto for FTP proxying
 * This ended up ''requiring'' a proper locking solution (see below).
 * Implemented MTT::Lock framework to allow arbitrary
   locking/unlocking by string name (typically a filename).  A new
   optional ""[lock]"" section now exists in the INI file.  If
   unspecified, all locks/unlocks are no-ops.
   * Just like other sections, you must specify a ""module=<foo>"" line
     in the [lock] section to specify which module is used to implement
     the locks.
   * One module currently exists in this framework: MTTLockServer.
     It takes 2 parameters: mttlockserver_host and
     mttlockserver_port.  Example:
{{{
[Lock]
module = MTTLockServer
mttlockserver_host = my-lock-server.example.com
mttlockserver_port = 12345
}}}
 * Fixups from r640 to bring the mtt-lock-server online
 * The mtt-lock-server is currently in client/, but may move someday.
   It takes a few parameters when launched:
   * '''-f''': To run it in the foreground (default is to daemonize).
   * '''-p''': port number to listen on
   * '''-s''': log to syslog

Typically, you run a single mtt-lock-server for your cluster and then
go run as many MTT's as you want.  The lock server will enforce
serialization where necessary.

'''NOTE:''' The SVN module ''must'' have a locking module if multiple
MTT's are going to be running simultaneously with a proxy, due to the
fact that SVN will only use the file $HOME/.subversion/servers to find
where its proxy server is located.  Hence, MTT will lock that file,
set the proxy, do the SVN checkout/export, restore the file, and then
unlock it.  If locking is not used, mutliple MTT clients could stop on
the ""servers"" file simultaneously and Bad Things(tm) could happen."
212,1179947502,,Milestone v2.0.2 deleted
213,1202224476,jjhursey,Related to Ticket #255
216,1173479080,emallove,"(In [650]) Fixes #216

 * No need for `Hash::Merge`.
 * `AlreadyInstalled` results in an MPI install failure if
   there is no MPI in `PATH` and no `installdir` is given
 * Make sure we are passing an actual file or directory to
   `dirname` and/or `basename` in a few spots
 * Do not print a blank `TextFile` results table"
218,1176314203,emallove,"(In [668]) Fixes #218

Zip the database submissions. The additional steps
MTTDatabase.pm/submit.php doing now are:

 * Create a PHP eval-able string containing the results (so
   there's no server-side parsing)
 * Dump it to a file, and zip it
 * Upload the zipped file
 * Server unzips the file and `eval`s it
 * From there, everything proceeds as it had been

Back-compatibility is in place, so nobody will lose results
between `open-mpi.org/mtt/submit` and user MTT checkouts
getting updated. ''Note: PHP's memory limit needs to be
increased to 32MB (for `submit.php` only) to handle large
uploads.''

 * Added a `-z` flag to mtt-submit (''zip'' the submission).
 * Change ""failed submission"" message from `Verbose` to
   `Warning`"
219,1175790085,jsquyres,"Bill saw exactly this error message yesterday, I think -- I don't know if he was using multiple INI files or not.

I see two solutions:

 * Remove the multi-file capability.  I don't know if anyone is using it (perhaps we should ask on mtt-users?)
 * Remove the current Trim functionality.  It's not used and it doesn't work anyway.  I have a long-standing patch ""almost"" ready that I have never finished to complete the Trim functionality, and it was pretty much a complete re-write."
219,1175791223,jsquyres,"(In [664]) Refs #219.

This fixes the Trim problem (the code currently in Trim is meaningless
anyway -- it's to-be-replaced someday anyway, so we might as well
whack it).  But this commit does not address the larger #219 issue of
potentially corrupting meta data due to multiple INI files."
223,1176949367,jsquyres,"(In [677]) Fixes #223

Convert SLURM_NODELIST environment variable to a comma-delimited list
of hosts."
224,1179958428,emallove,"(In [707]) Fixes #160 (Singleton support)
Refs #224 (Add run-time tests, see ''specific process
placement'' bullet item)

''(Now's an okay time to checkpoint what I've done for ORTE
testing as [milestone:2.1] has been released.)''

 * Singletons can be run like this:
{{{
[MPI Details: Open MPI]
...
exec = mpirun ...
exec:singleton = &test_executable()
...
[Test run: Singletons]
...
mpi_details_exec = singleton
...
}}}
 ''By default, the plain `exec` param is used if 
 an `mpi_details_exec` param is not specified in the Test
 Run section.''
 * Have `DoCommand::Cmd` return pid
 * Set `MTT_LIB` env var correctly in
   [source:/trunk/client/mtt client]"
226,1177109297,emallove,"(In [679]) Fixes #226

 * Carry over Advanced fields in the drill down reports
 * Make `""No data available""` message red"
226,1186682348,emallove,Milestone v3.0 deleted
226,1187969637,jsquyres,"Need to update for the new fields that we just added (network, description, ...etc.)."
226,1188324256,emallove,(In [942]) Fixes #226 (Advanced menu selections do not carry over in drilldown reports)
227,1187272458,jsquyres,Done in r848.
229,1188481618,jsquyres,"We don't.  I don't remember if we used to if this is an invalid ticket, but either way, it can be closed."
230,1177599871,emallove,"What is the definition of a Very Large String? Greater than 100KB? The [source:/trunk/server/php/report.inc reporter] uses PHP's `wordwrap` function, but I'm guessing this could never be a problem since STDOUT gets trimmed sufficiently before getting sent to the database."
230,1177638315,jsquyres,"The attached trivial t.pl script shows the problem.

I attached a 9MB (when uncompressed) text file that was the content->response from a Cisco jumbo run of the intel test suite, but with a hostname that was too long (so the content->response included ''every'' SQL error -- hence, 9MB).    Uncompress the file and put it in the same directoy as ""t.pl"" and run the script.

It reads in the file and trivially calls wrap() on the 9MB string.

On my Mac, it takes about 27 seconds.  On my RHEL4U3 system, it effectively hangs (CPU running at 100% for hours).  The fun thing is that the version of Text.pm is ''exactly the same'' on these two systems, even though the version of Perl is different (5.8.8 on Mac, 5.8.5 on RHEL4)."
230,1177681187,jsquyres,"(In [682]) Fixes #230

It seems that on some platforms (e.g., RHEL4U3/x86-64), wrap() does
not deal well with Very Large strings.  This workaround simply limits
how large the strings are that we give to wrap().  If the string is
too large, we simply use print without wrap()."
231,1178115283,emallove,"I propose this description be put in the `compute_cluster` table. Could we be more specific and say that this field is an ""interconnect description""? Users will be able to set this in the `[MTT]` section. I take it that this field will require a custom (or home-grown #189) funclet."
231,1178119524,jsquyres,"That sounds fine to me.  I would assume that at the moment, users will call &system() to get the information (although we might have a problem with calls to multiple funclets -- we don't want the normal expansion/replication rules to apply)."
231,1184179501,jsquyres,"This one touches everything:

 * Client
 * PHP server side
 * Database schema

Josh is working on the db schema part right now.  I'll do the client; Ethan will work on the submit/reporter side."
231,1186405751,jjhursey,"The database now has a 'description' table off of the following tables {{{mpi_install}}}, {{{test_build}}}, {{{test_run}}} which are distinct from one another.

The submit script can easily be extended to support this field, but it should not be too hard.

Waiting on the client side changes for further testing/implementation."
231,1186599549,jjhursey,"We talked about this today and the client should allow the user to set the 'description' values for {{{mpi_install, test_build, test_run}}} phases individually.

This may be extended to have a 'default' description value set globally that can be overridden or appended to."
231,1187263908,jsquyres,"(In [849]) Add a ""description"" field into the MTT, MPI Install, Test Build, and
Test Run sections.  The value in the MTT section is used if it is not
set in the MPI Install/Test Build/Test Run sections (or is empty if it
is not specified at all).

Refs #231"
231,1187264219,jsquyres,"Now throwing this ticket to Josh for submit/reporter server-side handling...

(per off-ticket e-mail: Josh, if you want me to rename the ""description"" fields submitted from the client, let me know; it should be pretty trivial to do)"
231,1187264937,jjhursey,"(In [850]) Catch and process the ""description"" flag if it is sent by the client.

We still need to add the field to the Reporter.

Refs #231"
231,1187273962,jjhursey,"(In [852]) Add the 'description' field to the Reporter.

We could probably clean this up a bit, but let's wait until after the users start to 
play with it and are able to tell us exactly what is the most useful interface.

Closes #231"
232,1178228221,emallove,"(In [685]) Fixes #232

Make it so inserting a ""!"" at the beginning of the search
field translates to using an SQL NOT operator (""!~*""). For a
summary report, when doing a NOT search on a large text
field, an arbitrary digest of the field is shown in the
table (a few leading/trailing characters from the field)."
232,1179947502,,Milestone v2.0.2 deleted
234,1178633304,emallove,(In [690]) `--force` should be settable in the INI file (Fixes #234)
234,1179947502,,Milestone v2.0.2 deleted
235,1178560130,emallove,"(In [687]) Fixes #235

 * Rename `littleWindow` to `OpenPermalinkConfirmation`.
   Have OpenPermalinkConfirmation now only take the value for
   `text_start_timestamp`. This avoids the need for passing
   the entire URL to the `javascript:` href, which helps
   because said URL may itself contain quotes.
 * Put this pointer in the `[Advanced]` popup:
{{{
   Search strings that contain whitespace need not be
   wrapped in quotes. Delimit multiple search strings with
   a ';'.)
}}}
 * Use `pg_escape_string()` anywhere a string will be part
   of a `WHERE` or string function `SELECT` (e.g.,
   `substring`)."
235,1179947502,,Milestone v2.0.2 deleted
236,1190468688,jsquyres,"A few more thoughts on this...

 * It might be useful to consider some web 2.0 technologies when creating the timeline (i.e., a dynamically updating timeline that can be scrolled, etc.)
 * It would be nice to be able to ""drill down"" on the timeline -- only show specific events in the timeline, such as test runs from organization X with a specific description, etc."
237,1190469705,jsquyres,"This concept can be extended into a fascinating (and useful) direction by applying data visualization techniques and/or web 2.0 technologies.  Imagine being able to define a set of arbitrary criteria that we want to ensure are covered in test results (e.g., platforms, environments, particular OMPI run-time configuration options/command line parameters, etc.).  Then be able to see a visual representation of how much / how little we're testing the combinations of the desired coverage platforms.

For example, this web site shows some nifty usage of data set size in visualizing how much particular news stories are being covered: http://www.marumushi.com/apps/newsmap/"
238,1179764712,emallove,"When the `Perf` column is clicked, the query matches on rows that contain performance results regardless of those rows' result (pass/fail/time-out/skip).  So the question is, how are those FAIL cases reporting performance results? The MTT client should be bailing before even looking at the performance output.

"
238,1179947366,jsquyres,Add Bill to the bug.
238,1179947502,,Milestone v2.0.2 deleted
238,1187272273,jsquyres,Josh - is this moot with the new DB schema?
238,1187272967,jjhursey,"I believe it will be since I think this bug is associated with the temp tables in the old reporter. Since we have eliminated the temp tables, the data should always be accurate.

I think we can close this, and reopen it if it becomes a problem again with the new reporter."
240,1186405987,jjhursey,This will be invalidated with the v3 changes (see Ticket #253) as the speedy tables will be eliminated and replaced with a transparent PostgreSQL solution (partition tables).
240,1186682348,emallove,Milestone v3.0 deleted
241,1181861594,emallove,"(In [709]) Fixes #241 (`$var` style substitution in the INI)
(Note: this implementation is pretty ineffecient. E.g.,
INI params get re-evaluated from scratch over and over when
used as $vars.)

 * Added `&perl()` funclet
 * Added `&regexp()` funclet
 * Changed `EvaluateString` to allow embedded parenthesis in
   funclet args (really needed for `&perl()` to be of any
   use). So `EvaluateString()` has two cases:
   1. &funclet(...)
   1. &funclet(""..."")
   The second case allows for something like this;
   `&perl(""if (-x '/bin/foo') { return 'bar'; }"")`
 * Provide examples of above features in
   `ompi-core-template.ini`
 * Search and replace new-line characters with whitespace in
   `configure_arguments`
 * Allow for a more compact --section option. E.g.,
   `--section foo --section bar` compacts to `--section ""foo
   bar""`"
243,1189983823,emallove,(In [1024]) Fixes #243 (Drilldowns do not work on `trial` column)
244,1188598805,jsquyres,Fixed in r973.
245,1182288196,jsquyres,"This is a good idea, but we will need to audit everywhere that uses this stuff: some parameters do not make sense to take array values (e.g., module).  But some values may actually be able to handle an array.  For example, setenv could take an array because it's a natural multi-variable value anyway (e.g., you can have multiple ""setenv"" instances in a single section in an INI file).

But the point is that this is a lot of work: auditing the entire code base to check for scalar vs. array of every parameter.

'''Sidenote:''' We're going to defer the whole &enumerate()-paired-with-configure_arguments issue here; that seems fraught with many issues.  If we want to silently create multiple MPI install sections based on &enumeration, that should be a whole different ticket...  It was just meant to be an example on this ticket, but it actually has lots of difficult issues associated with it.  :-)"
245,1188598709,jsquyres,This is now done on the jms-new-parser branch.
245,1207154502,emallove,"A workaround for this issue is to use the `include_section` parameter. In the below example, I've rigged up my INI file to run the trivial tests twice (for 32-bit and 64-bit). MTT effectively iterates over the two `test_bitness` values (`32` and `64`):

{{{
[test-build-trivial]
test_get = trivial
trivial_tests_cflags = &Sun::get_compiler_flags(@test_bitness@)
trivial_tests_fflags = &Sun::get_compiler_flags(@test_bitness@)
module = Trivial

[Test build: trivial-32]
test_bitness = 32
include_section = test-build-trivial

[Test build: trivial-64]
test_bitness = 64
include_section = test-build-trivial
}}}
"
246,1195225173,emallove,"(In [1098]) Fixes #246 (Add support for ""global phase sections"")

 * Added `include_section` INI parameter
 * Added `IRC` reporter module
 * &current_phase() - returns name of currently executing phase (e.g., ""MPI
   install"")
 * &current_section() - returns the name of currently executing INI section
   (e.g., ""Test build: intel"")"
248,1182351103,emallove,"(In [713]) Refs #248 (Funclet for checking IB connectivity on Solaris)

 * Solaris half is done for #248
 * Prettied up `&perl()` examples in
   [source:/trunk/samples/ompi-core-template.ini] using
   heredoc syntax (`<<EOT ... EOT`)
 * Made INI visible from
   [source:/trunk/lib/MTT/Test/RunEngine.pm], which enables
   $var substitution in all MPI Details and
   Test Run INI parameters"
248,1182364467,emallove,"(In [714]) Refs #248 (Funclet for checking IB connectivity on Solaris)

 * Actually ping the discovered interface name, not the
   hard-coded name ""ibd1""
 * Check DAT registry for IB interface(s) (see `man datadm`)"
248,1182461620,emallove,"(In [721]) Refs #248 (Funclet for checking IB connectivity on Solaris)

 * Fix the `$is_ib_connection` boolean's scope so we do not
   keep doing a bunch of pings in between each test
 * Loosen `strict`ness in `EvaluateString()` so that
   `&perl()` can have its own variables
 * Added some ""\n"" in the debugging messages"
248,1189537481,jsquyres,Ethan -- is this ticket done?
248,1190649855,emallove,"Replying to [comment:4 jsquyres]:
> Ethan -- is this ticket done?

Yes. All done.
"
250,1182442715,emallove,"(In [717]) Turn off the `E_ALL` `error_reporting()` spigot unless there
`&debug` is in the URL's query string. (Fixes #250)"
252,1182786786,emallove,See r727 (this should make the actual `cp` error message print out)
253,1186405204,jjhursey,The first cut of this is finished. It just needs to be tested.
253,1186600139,jjhursey,"Basic testing was successful.

The new database layout is:
 - {{{mtt}}}: Live database with converted data
 - {{{mtt_testing}}}: Testing database.

The plan for upgrading to this new schema is as follows:
 1. {{{mtt}}} keep up-to-date on the conversion of old data
 1. Open to beta testers.
  - Beta testers will doubly submit results first to the old database submit script {{{mtt3}}} and then to the testing database submit script {{{mtt_testing}}}.
  - Continue conversion between {{{mtt3}}} and {{{mtt}}}
  - The {{{mtt_testing}}} data will be destroyed at the end of the testing period, thus the need for a dual submit process.
 1. Quiet time conversion.
  - Notify users N days beforehand that MTT will be down for a couple hours.
  - Take down old submit script attached to {{{mtt3}}}
  - Convert the rest of the old data ({{{mtt3}}} to {{{mtt}}}).
  - Shutdown conversion script for good.
  - Open up MTT site with new submit and reporter linked to the new {{{mtt}}} database.
 1. Start working on client alterations...
"
253,1187206895,jsquyres,"I thought we decided not to have the client submit as postgres bit fields to allow future flexibility in the client?  E.g., to other reporters (that may not have postgres on the back-end, such as text files, stdout reports, etc.).

What changes do we need in the client?  I have a little time to implement them now..."
253,1190468315,jsquyres,"Josh -- this ticket is done, right?"
253,1190473199,jjhursey,Yeah I think this is done for now. Any missing pieces that we find should be filed as separate bugs.
255,1202224457,jjhursey,Related to Ticket #213
257,1187782375,jsquyres,"These four fields are now being submitted by the client as of r884.  submit.php and the database seem to be accepting them properly.

Josh -- do we need to update reporter.php to show these values?"
257,1187788149,jjhursey,The reporter has already been adjusted. I believe this ticket is closed now
258,1188578938,emallove,See also #299.
258,1226596270,emallove,"(In [1250]) Fixes #258 (''Compare non-contiguous date ranges'')
"
259,1187633231,emallove,"As a workaround, the regular expression `.*` can be used to show a large text field in its entirety."
259,1187960826,jjhursey,"To add to this work around if you wanted to search for ""MPI"" in the description the either of the following could be used:
{{{
.*MPI
or
.*MPI.*
}}}

I think we can close this for now. Maybe revisit later."
260,1187819008,emallove,"`description` is currently set on the client-side. It could be useful to also have the ability to somehow edit the description field via `reporter.php`, though we would need to iron out all the permissions issues. We might also consider making some other fields such as `suite_name`, `platform_name`, `mpi_name`, etc update-able via `reporter.php`."
262,1187295708,jjhursey,"Database has been updated in r856

Submit and Reporter PHP need updating to handle the new values.

Client needs to be updated to submit the new values.
"
262,1187533505,jsquyres,"(In [863]) Lots of work in this branch towards several tickets:

 * #257: INI file now accepts 4 more fields in the MPI Details section
   that are recorded for each test run result:
   * '''launcher:''' defaults to argv[0] of the exec line
   * '''resource_manager:''' allowed values in
     lib/MTT/Defaults.pm:System_config->{known_resource_manager_names}
   * '''parameters:''' all the ""interesting"" parameters from the exec
     command line
   * '''network:''' allowed values in
     lib/MTT/Defaults.pm:System_config->{known_network_names}.
     Currently submitted as a comma-delimited list of networks; to be
     treated more intelligently in the database someday (see #262).
 * #184: Completely re-wrote the funclet parser to work towards #184.
    The parser is now ''much'' more faithful to perl syntax and
    requires a ''lot'' less quoting in the INI file (indeed, having
    excessing quoting will now actually prevent calling &funclets --
    so INI files will likely need to be edited to work with this new
    parser; anything inside quotes is no longer evaluated as a
    funclet).  The ""unexpected explosion"" cited in #184 will still
    occur, but we're potentially in a better position to be able to
    fix it with the new parser.  The key will be making delayed
    evaluation of parameters... which may or may not be possible
    without reworking all funclets.  :-\
 * #85: INI parameters can now accept &'s in them.  The following
   characters can now be escaped (the escape will be removed by MTT
   before using the resulting value):
   * ampersand: \&
   * single quote: \'
   * double quote: \""

Also added some other fun things:

 * funclet names can now contain ::, so we can intelligently split up
   funclets into multiple .pm files.  
 * Added Values/Functions/MPI/OMPI.pm, which contains two new Open
   MPI-specific funclets:
   * &find_mpirun_params: strips out -np, -hostfile, -machinefile, and
     some -mca parameters (if they're covered by &find_network()).
     Intended to be used by the new MPI details ""parameters"" field.
   * &find_network: analyzes MCA parameters to attempt to determine
     what networks will be used for MPI point-to-point messaging.
     Intended to be used by the new MPI details ""network"" field.
 * Updated a few comments here and there
 * Ensure MPI::Install modules uniformly treated compiler_name and
   compiler_version, especially since these are currently being
   allowed to be specified without the module name in the field name
   (i.e., in the MPI::Install ""base"").
 * Updated &split() funclet to be able to return a specific token if
   requested (or the whole array if not specified, which is consistent
   / backwards-compatible with the original &split()).
 * Added &preg_replace() funclet based on
   http://www.php.net/manual/en/function.preg-replace.php and
   &strstr() funclet based on strstr(3).  It's not clear that we need
   these funclets; I added them while testing some other ideas...
 * Added &test_command_line() funclet to return the entire current
   test command line.
 * Ensure that MTT::Reporter::MTTDatabase is only used ''once'' in a
   INI file. "
262,1187646794,jjhursey,"(In [877]) Adjust the submit script to accept the client supplied values for:
 launcher
 resource_manager
 network
 parameters

Additionally properly parse the networks parameters and place them in the 
association table set so we can reliably search on them. We keep around the
full string just in case we want to use it later.

Refs #262

We still need to make some adjustments to the reporter to fully support
searching on network parameters."
262,1187648233,jjhursey,"(In [879]) Refs #262

Add a comment to the reporter about the dangers of joining with the 
test_run_networks normalization table. It will duplicate test results
duplicating each tuple once per indiv. interconnect :(

So searches should always do regular expression searching on the client 
reported 'network' string. We will want to revisit this at a later date
to see if there are benefits to searching on the individual values instead
of a regular expression search."
262,1187648342,jjhursey,i think this bug is closed for now. We may want to revisit the utilization of the network normalization tables in the future.
264,1216761402,emallove,"Though probably not something we'd want to do so often (for the sake of 
not DOS-ing the main `open-mpi.org` web server), the below is a template
for a script to dump a ''bunch'' of MTT Detail reports to file. 

Requires:

 * A command line web browser such as [http://elinks.or.cz elinks]
 * [http://www.vim.org VIM text editor]
 * [http://mysite.verizon.net/astronaut/vim/#VISINCR the Visual Incrementing VIM plugin]

{{{
#!sh
$ cat download-big-mtt-report.sh
#!/bin/sh -x
#
# Elinks dump ""x"" number of MTT reporter slices
# to stdout:
#
# Created using the VIM commands:
#
# * Do a visual block on the far right column (cursor over the ""0"" in
#   ""offset=0"" piece of the query string)
# * :'<,'>I 100 (this increments the offsets by 100 for each elinks
#               -dump command)
# 
# See the http://mysite.verizon.net/astronaut/vim/#VISINCR VIM script
#

#
# Usage:
#  download-big-mtt-report.sh |& tee mtt-report.txt
#
 
# Copy this line ""n"" times (depending on the number of report ""slices""
# you want to dump to file). Substitute in the URL with the filtering
# you need.
elinks -dump 'http://www.open-mpi.org/mtt/index.php?&limit=&wrap=&trial=&yaxis_scale=&xaxis_scale=&hide_subtitle=&split_graphs=&phase=test_run&text_start_timestamp=2008-06-27+13%3A58%3A38+-+2008-07-02+13%3A58%3A38%3B+by+second&text_platform_hardware=all&show_platform_hardware=show&text_os_name=all&show_os_name=show&text_mpi_name=%5Eclustertools-8.0%24&show_mpi_name=show&text_mpi_version=1.4r18761-ct8.0-b24.%2A-r134&show_mpi_version=show&text_suite_name=all&show_suite_name=show&text_test_name=all&show_test_name=show&text_np=all&show_np=show&text_full_command=&show_full_command=show&text_http_username=sun&show_http_username=show&text_local_username=all&show_local_username=hide&text_platform_name=all&show_platform_name=show&text_os_version=%5Elinux-rhel5-x86_64+%24&show_os_version=show&text_platform_type=&show_platform_type=hide&text_hostname=&show_hostname=hide&text_compiler_name=%5Egnu%24&show_compiler_name=show&text_compiler_version=&show_compiler_version=hide&text_vpath_mode=&show_vpath_mode=hide&text_endian=&show_endian=hide&text_bitness=&show_bitness=hide&text_configure_arguments=&text_exit_value=&show_exit_value=hide&text_exit_signal=&show_exit_signal=hide&text_duration=&show_duration=hide&text_client_serial=&show_client_serial=hide&text_result_message=&text_result_stdout=&text_result_stderr=&text_environment=&text_description=&text_launcher=&show_launcher=&text_resource_mgr=&show_resource_mgr=&text_network=&show_network=&text_parameters=&show_parameters=&text_trial=&lastgo=detail&go=detail&rows=7560&slice=1&offset=0'
}}}
"
265,1188397359,jsquyres,"(In [949]) This commit:

 * Creates a config.inc file for centralization of various user-settable parameters:
   * HTTP username/password for curl (passwords still protected; see code)
   * MTT database name/username/password
   * HTML header / footer
   * Google Analytics account number
   * Location of jpgraph render directory
 * Use the config.inc values in reporter, stats, and submit
 * Preliminary GA integration; if GA account number set in config.inc:
   * Report actual reporter URL
   * Report stats URL
   * Note that submits are not tracked by GA because the MTT client does not understand javascript
 * Moved ""deny_mirror"" functionality out of report.inc to config.inc because it's very www.open-mpi.org-specific

Fixes #265."
267,1187732726,jsquyres,Where would you copytree from if SVN failed?
268,1187792204,jsquyres,"This seems to be a timezone issue -- there appears to be some timezone stuff left in the reporter that should be removed.

Removing ""timezone=EST"" from the URL makes everything work properly.

See also #255."
268,1187804754,emallove,"(In [892]) * Fixes #268 - remove timezone kruft still left in new reporter. (Josh
  has pointed out the reason for reworking the timezone preference
  below.)

{{{
# NOTE:
#   Casting an index column kills performance.
#   For example:
#     'start_timestamp' is much faster than
#     CAST(start_timestamp as TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'GMT'
#   As the later forces the optimizer to visit *all* tables and tuples,
#   do the conversion, then the comparison.
#   Whereas the former just does the comparison, and the optimizer can then
#   eliminate tables depending on check contraints.
#   performance difference of 
#Sort  (cost=11581.18..11581.68 rows=200 width=510) [with ce]
#Sort  (cost=131232.57..131233.58 rows=403 width=510) [without ce]
# versus
#Sort  (cost=595516.49..595517.49 rows=403 width=510)
# about 51% improvement :D
}}}

* For the date range field, make ''last'' synonymous with ''past''"
269,1187789837,jsquyres,"Similarly, if I go into the ""advanced"" window and select ""show"" for the ""command"" field, I don't see a new column appear in the report (I get new columns for launcher, resource_manager, ...etc. -- just not command).

The reason I ask about this is because the report linked above is for a variety of different IMB tests -- they are only different by their argv (not mpirun variants).  From the test run section in the INI file used to generate these results:

{{{
argv = -npmin &test_np() &enumerate(""PingPong"", ""PingPing"", ""Sendrecv"", ""Exchange"", ""Allreduce"", ""Reduce"", ""Reduce_scatter"", ""Allgather"", ""Allgatherv"", ""Alltoall"", ""Bcast"", ""Barrier"")
}}}

(note that only one variant was used in the MPI Details section for these results)

The reporter currently gives no way to tell these tests apart in the performance graphs.
"
269,1187790690,jjhursey,"(In [891]) Fixed some missed name chances.

Closes #269"
270,1187813026,emallove,"(In [897]) Fixes #270 
  
 * Add a sanity check for ""past foo bars"" date ranges
   (See postgres's documented
   [http://www.postgresql.org/docs/8.0/static/functions-datetime.html interval specifiers])
 * Remove `use_ttable()`. The v3 optimizations eliminate the
   need for ttables."
271,1187837757,jsquyres,"(In [905]) Update a recent update where I thought I had made parsing of lists
""better"" -- apparently I broke the case where section names contained
whitespace.  :-) This commit fixes that problem; lists are now
comma-delimited and can now (again) contain white space within the
items.

Fixes #271"
272,1187969566,jsquyres,This is a dup of #273.  :-)
273,1188236168,jsquyres,"I'm confused on how you could be using this ini file with the jms new branch -- the value for ""hosts"" should cause the parser to choke."
273,1188329945,jsquyres,Did this get addressed by r941?
273,1188330605,emallove,"Replying to [comment:3 jsquyres]:
> Did this get addressed by r941?

No, but the problem seems to have gone away anyway. "
275,1188079563,jjhursey,Ethan can you take a look at this? It will take me a while to dig into the cheery picking code.
275,1188330273,emallove,(In [943]) Fixes #275 (Cherry-picking is broken in new reporter)
278,1187992493,jsquyres,"(In [927]) Allow a ""log"" parameter in the [MTT] section to which all MTT output
will ''also'' be sent (in addition to stdout/stderr).

Fixes #278"
281,1188337599,jjhursey,I believe this was fixed by r891
283,1188241581,jsquyres,"You can implement it similar to how I did #227 -- just look for a file during the run.  It's ain't sexy, but it works.

Having a daemon is possible, but would be sorta complex.  All MTT instances would need to register with the daemon (and stay connected and have asynchronous handlers for incoming messages from daemons, etc.).  You'd also need a way to talk to the daemon to say ""do X to all running MTT's"" and ""do X to MTT Y"".  Etc.  The corner cases become numerous -- I don't think we want a daemon here.  :-)"
283,1236783838,emallove,"One way to do this would be to just track the modification time of the INI file. At startup, MTT will record the INI file's modification time, and if this property changes at any point, MTT will reload the newly modified INI file. E.g., if the user is partially through a ten hour test run, and they notice that they need to increase a timeout value, they can simply tweak the timeout parameter in the INI file. Since it would not always be desirable for MTT to reload the INI file partway through a run, a prompt may be appropriate, e.g., ''""The MTT INI configuration changed. Do you want MTT to effect the changes now? (yes/no)""'' "
285,1188338756,emallove,Fixed in r944.
285,1188385078,jsquyres,"This isn't quite right yet; the latency graphs look ok, but the Bandwidth graphs have a Y axis label that says ""Time - Mbps"".

Also, as a nit, I'd not use ""-"" to dileneate the units, but rather ().  So the Y and X labels should be:

 * Time (usec)
 * Bandwidth (Mbps)
 * Message size (bytes)

And the titles should not use ():

 * Average/Maximum/Minimum Latency
 * Average/Maximum/Minimum Bandwidth

Finally, if we want the images to be able to be used outside of MTT, the title should not say ""MTT Performance Results""."
285,1188397310,emallove,"(In [948]) Second try. Fixes #285 (Renamed ""latency"" axis to be ""time"")"
286,1188318327,jsquyres,"I wonder if this was a side-effect of the problem that Josh fixed this morning.  I'm no longer able to replicate the problem when submitting new results (after Josh's fixes were applied).  Josh -- could this be an explanation?

Tim -- can you see if you can still replicate the problem?"
286,1188330140,tprins,"I just did a run and it looked ok.

I'll close this and reopen if I see it again."
287,1188317751,jjhursey,"I cleaned up a few of these. I'm waiting on access to the log file so I can track some more.

The undefined values on line 1435, will need some more looking at."
287,1188317787,jjhursey,(In [938]) cleanup some var warnings. Refs #287
287,1188417417,jsquyres,Bumping this up a bit because we are ''really'' spewing a lot of error messages...
287,1188480786,jjhursey,"(In [956]) - Cleanup some undefined variables.
- Remove the '$idxs_hash' var which was not being used any more
- Turn off PHP Notices as I don't see (at the moment) a way to avoid the
  following types of errors:
{{{
 PHP Notice:  Undefined index:  mpi_install_section_name in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1443
 PHP Notice:  Undefined index:  email in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1443
 PHP Notice:  Undefined index:  command in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1443
 PHP Notice:  Undefined index:  test_build_section_name in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1443
 PHP Notice:  Undefined index:  number_of_results in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1443
 PHP Notice:  Undefined index:  phase in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1443
 PHP Notice:  Undefined index:  fields in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1443
 PHP Notice:  Undefined index:  variant in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1443
 PHP Notice:  Undefined index:  resource_manager in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 1443
 PHP Notice:  Undefined index:  test_type in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 238
 PHP Notice:  Undefined index:  test_type_1 in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php on line 239
}}}
These are array indexes that we are checking if they exist. The function works 
properly, but PHP will raise a notice anyway. Someone with more PHP skills than
I may be able to find a way to keep this notice from displaying without turning
off notices all together.

Fixes #287"
287,1188481346,jsquyres,"Ya, I think we need to keep this open until we remove all output because (as !DongInn has mentioned to us before), this amount of output can cause problems for milliways (operational speed as well as filling up the disk).

Perhaps the array_key_exists() function can be used here?  Note that it can be used to check for multiple keys simultaneously, if that helps (from [http://www.php.net/manual/en/function.array-key-exists.php the php docs]):

{{{
<?php
$search_array = array('first' => 1, 'second' => 4);
if (array_key_exists('first', $search_array)) {
    echo ""The 'first' element is in the array"";
}
?>
}}}"
287,1188481415,jsquyres,"Pshaw.  I read the php docs all wrong; you can't check for more than one key at a time.  Never mind... 

But the function is still likely to be useful.  :-)"
287,1188484118,jjhursey,"(In [958]) This really fixes #287 thanks to Jeff's find.

I ran some basic tests, and we are no longer generating PHP Notice messages.

I also 'fixed' a synchronization problem that arose last night. There is a
race condition between when we check for an existant row and decide to insert
a new entry. The insert will fail in another thread beats us to it, we now
use that as an indicator that we need to search again.
A better way to solve this is to involve transactions, but for now this should
fix the problem."
288,1188340120,jsquyres,Fix formatting.
288,1188340321,jsquyres,"Actually, both log *and* linear plot X values are not set properly."
288,1188344342,jsquyres,"I figured out part of it, but I'm getting lost in the graph-creation logic.

Down in report.inc:collect_graph_data(), we're calling:

{{{
$lineplots[$i] = new LinePlot($ydata);
}}}

Note the fact that we're not supplying any X data, so jpgraph assumes that each Y point corresopnds to a monatonically-increasing integer X value.  We really need to do something like this:

{{{
$lineplots[$i] = new LinePlot($ydata, array_pad($plots[$i][""message_size""], $pad, null));
}}}

That makes the log graphs be right (I think -- didn't look too closely), but the linear graphs are now out of whack.  I think because we're putting tick labels at 0, 1, 2, 3, 4, 5.... despite the fact that the X values go up to 8MB.  That is, the X tick mark labels do not correspond to the actual X,Y data points.

I throw the rest of this over to Ethan to figure out/remember his graph-creation logic...  :-)"
288,1188401806,emallove,(In [952]) Fixes #288 (Performance plots are not displaying X values properly)
290,1190468188,jsquyres,I believe that Ethan finished this.
291,1192115416,jjhursey,This has been completed.
292,1189536993,jsquyres,"This is now done, subject to the new MTT web site being rolled out."
295,1189735211,jsquyres,"(In [1015]) Refs #295.

Add &test_alloc() funclet which returns the default value of ""slot"" or
the value of the alloc field in the test run section.  The intended
values are ""slot"" or ""node"", indicating that the MCW rank processes
should be allocated either by node or by slot.

Still testing the coresponding perf bakeoff template INI file for
using this funclet properly."
295,1189784909,jsquyres,This all seems to work now.
296,1199991837,emallove,"Adding on to this, make it so we can show the `make` command for a test build (for checking `CFLAGS` settings and the like). To be consistent over all three phases:

{{{
  mpi_install.command (almost always ""make install"")
  test_build.command (e.g., make all CFLAGS=""-xarch=v9"")
  test_run.command (e.g., ""mpirun blah blah"")
}}}"
297,1188496711,jsquyres,"(In [967]) Ensure to carry the QUERY_STRING over to the new URL.

Fix #297."
299,1188578917,emallove,There are more use cases in #258 (support for non-contiguous date ranges).
300,1190151862,emallove,"(In [1031]) (Fixes #300) Added `INI_NAME` as a predefined INI parameter.
Sample usage: {{{ funclet_files = &dirname(""@INI_NAME@"")/Acme.pm }}}"
302,1190469121,jsquyres,"In addition, it could also be useful to be able to visualize entire trees of lineage depicting an MPI install, all the Test Builds that are children of that, and all the Test Runs that are children of that.  Pairing this with ""drill down"" methodology -- perhaps even with some web 2.0 technologies for visualization and dynamic updates -- could result in easily showing the lineage of a specific test run failure, further helping root cause efforts."
302,1202331196,jjhursey,"Similar to this the main query used for summary is completely time base without regard to the dependency between the three stages. For example this [http://www.open-mpi.org/mtt/index.php?do_redir=527 permalink] shows a Cisco result in which the first entry has Test Run results, but no MPI Install or Test Build results.

This is because the MPI Install and Test Build occurred outside of the specified time window. The proper query should provide the time window *and* the upward dependencies of those results.

The problem is that this query becomes much more complex, but not impossible. For example we must consider the following cases:
 * An MPI Install result occurred in the time range without any Test Build or Test Runs resulting from it.
 * MPI Install and subsequent Test Build results occurred in the time range without any Test Runs resulting from them.
 * All three phases are avilable
 * Only the Test Build and Test Run phases are available. (Already Installed scenario).
"
303,1188996005,jsquyres,"Blah -- right, I noticed this recently but forgot to open a ticket on it.  I'll look into it; this is likely a client issue."
303,1189039573,jsquyres,"I have to admit that I'm somewhat at a loss for how this can happen.  There is logic in Analyze.pm that prevents calling the performance analysis component if the test didn't pass:

{{{
    if ($correctness->{test_result} == MTT::Values::PASS) {
        if ($m and ($m !~ /\bcorrectness\b/i)) {
            $performance = MTT::Module::Run(""MTT::Test::Analyze::Performance::$m"",
                                    ""Analyze"", $correctness->{result_stdout});
        }
    }
}}}

For the cases where performance results ''did'' make it into the DB (like the URL cited in the original ticket), it seems like an empty set of results was submitted.  I'm really quite unsure how that can happen.  :-("
303,1190058741,jsquyres,"I finally figured this one out -- if there is a submit with some successful test performance runs and some failed test performance runs, submit.php assumes that ''all'' the runs were successful and inserts them into the db (even if some are empty because the client didn't submit any performance results for failed tests).

Fix coming soon."
303,1190077426,jsquyres,"(In [1028]) Fixes #303: fix the logic for determining if there is performance data
available for a particular result or not.

Also put in a workaround for a warning that has been appearing a lot
lately: 

{{{
[client 65.14.168.110] PHP Notice:  Use of undefined constant undef - assumed 'undef' in /nfs/rontok/xraid/data/osl/www/www.open-mpi.org/mtt/submit/index.php(75): eval()'d code on line 49
}}}

Made a dummy variable named ""undef"" and set it equal to the empty
string.

Also removed a little extra logic for a case that cannot occur."
304,1190141074,emallove,"(In [1030]) Added helper script to synchronize `svn/ompi-www/mtt` and `svn/mtt`,
`commit-to-ompi-www.pl` (Fixes #304). The tool is invoked like this:
{{{
$ commit-to-ompi-www.pl \
    --ompi-www-dir <path to an ompi-www working copy> \
    --mtt-dir <path to an mtt working copy>
}}}

The tool does the following:

 1. Gathers a list of versioned files (''not'' directories) from the mtt working copy
 1. Copies the files over to an ompi-www/mtt working copy
 1. Displays `svn diff` on the revised ompi-www, and prompts user with `Commit? (y/n)`
 1. Prompts user to commit changes to live ompi-www website"
305,1189518765,jsquyres,mtt-relay is technically Ethan.  :-)
305,1189536974,jsquyres,Try the attached patch and see if it works.
305,1189538620,jjhursey,"yep that patch works. I have removed the hack from the website {{{config.ini}}} file.

I did not commit this patch since I can't commit from BigRed. I'll leave that to Jeff."
305,1189539992,jsquyres,"(In [1007]) Fixes #305: ensure to remove the ""Host"" field from the original
request so that we only pass through the ''real'' name of the desired
host through the relay (e.g., www.open-mpi.org, not the name of the
relay host)."
306,1189521856,jsquyres,"I would think that this is more of a feature for upper-level scripting rather than being built into the MTT client itself.  For example, see #167.  For another example, Cisco does all MPI Get/MPI Install/Test Get/Test Build phases in one client invocation, and then all Test Run phases in another invocation.

I'm not saying that I'm against adding such a feature to the client :-), but it seems like you could already do this with some upper-level scripting.  Just my $0.02..."
307,1189716076,jsquyres,"(In [1014]) Fixes #307.

There was a corner case where if displaying multiple results with
differing x axis values, the x xaxis was not displayed properly.  This
patch reduces the number of loops and copies surrounding xaxis
processing and makes a true ""union"" xaxis that represents a union of
all xaxis values used for all lines on a single graph."
308,1189716440,jsquyres,This failure does not appear to be happening consistently.  :-(
308,1190044332,emallove,"This is a manifestation of #62 (''throttle oversized reports from [source:/trunk/server/php/index.php reporter.php]''). It can be reproduced by adjusting the date range to include an amount of Detail results needed to incur the PHP memory overload (e.g., use ''past 100 hours'', instead of ''past 24 hours'')."
308,1190045049,jsquyres,"Can we make the nightly script a little more intelligent so that it can at least detect this situation and output something like ""PHP script failed to produce output, possibly because the report was too large."" instead of just ""1""?"
308,1190047342,emallove,"(In [1026]) (Refs #308) In `alerts.php`, print a message indicating
something has gone wrong if the HTML content returned from
curl is ""1""."
309,1189774426,jsquyres,(In [1017]) Significantly update the README file.  Fixes #309.
311,1190468213,jsquyres,"There's a workaround in place to prevent a million warnings from coming up on the server, but it's still not the Right solution."
313,1190224788,jsquyres,"(In [1038]) Fixes #313 (still need to commit to coll bakeoff branch).  Add a new
funclet &rm_name() that will return the name of the ''resource
manager'' -- it will never return ""hostfile"" or ""hostlist"" (because
these are not resource managers).  In the case of hostfile/hostlist,
&rm_name() will return ""none"".  Otherwise, it will return exactly the
same thing as &env_name().

I then changed the default value of the resource_manager field in the
MPI Defaults section to be &rm_name() (instead of &env_name(), which
is was before)."
315,1190298224,emallove,(In [1041]) Fixes #315. Convert bit-mapped columns to strings if used in the WHERE clause.
316,1201115692,emallove,"I'm attaching a [https://svn.open-mpi.org/trac/mtt/attachment/ticket/316/perf-raw-data-with-circles.png screen shot] of an idea for enhancing raw performance data. The idea is to bring out key data points (e.g., ''special'' message sizes) that tend to get lost in a black and white table of numbers."
316,1202227064,jjhursey,Related ticket #312
317,1190681420,jsquyres,"(In [1055]) Fixes #317: gracefully handle if Env::Modulecmd is not available,
meaning that we won't abort/error if Env::Modulecmd is not available
unless the env_module field is used in the INI file."
318,1190729823,jsquyres,"(In [1057]) Fixes #318: If Text::TabularDisplay is not present and the TextFile
reporter is used, print an error and abort during init (i.e., so we
don't run for a while and then abort with no results)."
322,1190845584,emallove,"(In [1061]) Added `ClusterTools::setup_shell_scripts_for_wrappers()`.
This funclet is in need of a home (see #322). E.g.,
`before_all_mpi_install`."
323,1216075417,emallove,"This also doesn't work:

{{{
foo = &enumerate(""foo"", ""bar"")
argv = @foo@
}}}

It doesn't work because `foo` will end up evaluating to the string `ARRAY(0x1234567)`.
"
323,1216132186,emallove,"Replying to [comment:1 emallove]:
> This also doesn't work:
> 
> {{{
> foo = &enumerate(""foo"", ""bar"")
> argv = @foo@
> }}}
> 
> It doesn't work because `foo` will end up evaluating to the string `ARRAY(0x1234567)`.
"
323,1216132416,emallove,"Replying to [comment:1 emallove]:
> This also doesn't work:
> 
> {{{
> foo = &enumerate(""foo"", ""bar"")
> argv = @foo@
> }}}
> 
> It doesn't work because `foo` will end up evaluating to the string `ARRAY(0x1234567)`.

The problem seems to be that `_replace_vars()` always returns a scalar (string). `_replace_vars()` should also be permitted to return an array reference, which would force the overarching INI parameter to also be an array reference. This way all INI parameters could return either an array ref or scalar. Maybe the `map` function could be useful here? Where in the case that `_replace_vars()` returns an array ref, we subsequently ''map'' substitutions/expansions/etc to each element of the array.
"
324,1199807987,jsquyres,Ethan -- was this fixed with r1122?
324,1199969332,jsquyres,Ethan confirms that r1122 fixed this.
326,1192032804,emallove,"So the `test_name` will get overriden in !RunEngine.pm? How will our new perf Test run INI sections look? Something like this?

{{{
[Test run: netpipe]
...
test_name = &test_argv()
argv = &enumerate(""PingPong"", ""PingPing"", ""Sendrecv"", ""Exchange"", ""Allreduce"", ""Reduce"", ""Reduce_scatter"", ""Allgather"", ""Allgatherv"", ""Alltoall"", ""Bcast"", ""Barrier"")
}}}"
326,1193487351,jsquyres,"Yes, I think that's right (but I think you meant IMB, not Netpipe).  Perhaps something like:

{{{
[Test run: IMB]
...
test_name = IMB &test_argv(0)
argv = &enumerate(""PingPong"", ""PingPing"", ""Sendrecv"", ""Exchange"", ""Allreduce"", ""Reduce"", ""Reduce_scatter"", ""Allgather"", ""Allgatherv"", ""Alltoall"", ""Bcast"", ""Barrier"")
}}}

Note the prefix string ""IMB"" and the ""(0)"" argument to &test_argv() (so that we only get the 1st argv token -- probably unnecessary in this example, but would be necessary if there was multiple argv supplied)."
328,1193487398,jsquyres,Is this a bug or a feature?  (not entirely a rhethorical question...)
328,1193518456,emallove,"Replying to [comment:2 jsquyres]:
> Is this a bug or a feature?  (not entirely a rhethorical question...)

Least astonishment bug."
332,1202224632,jjhursey,"Can you post a SQL query or a permalink that illustrates this problem? 
"
332,1205431937,emallove,"Replying to [comment:1 jjhursey]:
> Can you post a SQL query or a permalink that illustrates this problem? 

This link shows just 1 row: 

[http://tinyurl.com/2wou6p]

This link should also display just 1 row, but instead it displays 9 rows: 

[http://tinyurl.com/36u2gu]

How come the 9 identical `2008-03 - 2008-04` strings do not `GROUP` into a single row?"
332,1212119256,emallove,"(In [1206])  * Fixes #332 (''The reporter does not rollup on a large
   field capture group'') This commit puts the string
   manipulation functions (for large text fields and
   timestamp columns) into the subquery so the `GROUP BY`
   has a more useful effect on these columns. Getting this
   to work has also meant putting the `WHERE` clause in the
   inner SELECTs, which does not seem to have ill effects on
   performance.

 * Added a `common.inc` file for functions used by Submitter
   *and* Reporter."
333,1199723349,emallove,"A workaround would be to ""Show"" the desired columns, and bookmark that link. E.g., http://tinyurl.com/2w2ee3. A menu in the `[Preferences]` pop-up that allows users to select the columns they would like to have set to ""Show"" by default would be nice. 5 steps is a lot of ''mousing'' to do this simple task. "
335,1200000205,jsquyres,"What exactly do you mean by this?  Can you give a sample use case?

(i.e., I don't quite understand the connection between MTT reports and SVN changesets or trac tickets)"
335,1200003987,emallove,"Replying to [comment:1 jsquyres]:
> What exactly do you mean by this?  Can you give a sample use case?
> 
> (i.e., I don't quite understand the connection between MTT reports and SVN changesets or trac tickets)

From a Summary report, link to Trac changesets in some way like this:

|| MPI name            || MPI version    || Trac links || Results ||
|| ompi-nightly-trunk  || 1.3a1r17104    || [https://svn.open-mpi.org/trac/ompi/changeset/17104 r17104] || 0 ||
|| ompi-nightly-v1.2   || 1.2.5rc2r16941 || [https://svn.open-mpi.org/trac/ompi/changeset/17941 r16941 ]|| 0 ||
"
335,1200004510,jsquyres,"Couldn't this be in the description field, or something like that?  It seems like a funclet could be smart enough to generate the correct link."
335,1202225067,jjhursey,"If we are just linking to the revision number then this could be done by the Reporter with a bit of string parsing.

Extract the revision number from the MPI version {{{1.3a1r17104}}} extract {{{17104}}} and preference it with the link to the Open MPI trac {{{https://svn.open-mpi.org/trac/ompi/changeset/}}}. Turning it into the link [https://svn.open-mpi.org/trac/ompi/changeset/17104 r17104]

This would not work when testing other MPI implementations though.

Further integration with Trac would be more complex (attaching bugs to testing). In this case we could have the client specify the bug number in the description field as a work around."
341,1208289030,emallove,"Don't the bitness and endian filters work nonetheless because the `WHERE` clause occurs in the outer `SELECT`, as opposed to the inner `SELECT` (in the subquery)? E.g., this reports is filtered on 32-bit: http://www.open-mpi.org/mtt/index.php?do_redir=599."
341,1208289443,jjhursey,"Hum. Seems to be working :)

Your comment is exactly right. I'm not sure why I thought it was broken back then, but I htink this is a definite 'invalid' now.

Thanks for tracking this one down."
343,1204913335,jsquyres,"Interesting -- I am not seeing these.  :-(

Do any Sun-specific funclets create tempfiles, perchance?"
346,1208215486,emallove,"(In [1186]) Fixes #346 (Add graphing preferences option to split up performance
graphs)"
348,1207592427,jsquyres,"Add Ralph to the ticket, just for the heckuvit."
351,1208196992,jjhursey,Refs #263
351,1208211370,emallove,"Do we also want to make the below functions from [source:server/php/submit/index.php submit.php] PL/SQL functions?


{{{
#!php
convert_vpath_mode($vm)
convert_bitness($bit)
convert_endian($bit)
convert_launcher($cmd)
convert_parameters($cmd)
}}}"
354,1208454903,jsquyres,Isn't this really the same thing as #32?
354,1208468570,emallove,"Replying to [comment:1 jsquyres]:
> Isn't this really the same thing as #32?

Jeepers, it almost is. Though this adds the ""signal handler"" and ""file modification time"" ideas. Should I merge this stuff with #32 or keep them seperate?"
354,1208477713,jsquyres,"I think part of these are already covered in MTT's architecture: if you interrupt MTT and then restart it, it'll just resume where it left off.  #32 highlights the issue that the results won't be submitted to the database again.  However, this could likely be worked around with using an mtt-stop file...?  (doesn't help fault tolerance issues, though -- only planned stoppages)

The file modification time issue (or, more generally, the dependency issue) would be a new addition -- forcing later phases to re-run if prior phases have been re-run.  I think the client may already record timestamps in the meta data -- it probably wouldn't be too hard to add timestamp comparison of parent phases to see if results are now stale and therefore need to be re-run."
354,1208555222,emallove,"> The file modification time issue (or, more generally, the dependency issue) would be a new addition -- forcing later phases to re-run if prior phases have been re-run.  I think the client may already record timestamps in the meta data -- it probably wouldn't be too hard to add timestamp comparison of parent phases to see if results are now stale and therefore need to be re-run.

A few other ideas for how to do the dependency checking:

 * '''SCM status commands''': E.g., `svn status`
 * '''make -q''': `make` in question mode, which presumably uses `mtime` to determine whether the target is up-to-date
 * '''File modification times''': Check `mtimes` for ""Get"" sources, the INI file, files/programs used by the INI file
 * '''CLI''': MTT is invoked on an ''old'' scratch, but with a ''new'' set of command-line-options
 * '''Environment''': MTT is invoked on an ''old'' scratch, but with ''new'' environment parameters, e.g.,
  * `PATH`
  * `LD_LIBRARY_PATH`
  * `HOST`
  * `USER`"
354,1208556138,jsquyres,"Replying to [comment:4 emallove]:
> A few other ideas for how to do the dependency checking:
> 
>  * '''SCM status commands''': E.g., `svn status`
>  * '''make -q''': `make` in question mode, which presumably uses `mtime` to determine whether the target is up-to-date
>  * '''File modification times''': Check `mtimes` for ""Get"" sources, the INI file, files/programs used by the INI file
>  * '''CLI''': MTT is invoked on an ''old'' scratch, but with a ''new'' set of command-line-options
>  * '''Environment''': MTT is invoked on an ''old'' scratch, but with ''new'' environment parameters, e.g.,
>   * `PATH`
>   * `LD_LIBRARY_PATH`
>   * `HOST`
>   * `USER`

FWIW, I think that some of these are already checked (e.g., if the command line changes in a test run, it's treated as a different test), but others will need to be implemented."
354,1208788834,emallove,"Replying to [comment:5 jsquyres]:
> Replying to [comment:4 emallove]:
> > A few other ideas for how to do the dependency checking:
> > 
> >  * '''SCM status commands''': E.g., `svn status`
> >  * '''make -q''': `make` in question mode, which presumably uses `mtime` to determine whether the target is up-to-date
> >  * '''File modification times''': Check `mtimes` for ""Get"" sources, the INI file, files/programs used by the INI file
> >  * '''CLI''': MTT is invoked on an ''old'' scratch, but with a ''new'' set of command-line-options
> >  * '''Environment''': MTT is invoked on an ''old'' scratch, but with ''new'' environment parameters, e.g.,
> >   * `PATH`
> >   * `LD_LIBRARY_PATH`
> >   * `HOST`
> >   * `USER`
> 
> FWIW, I think that some of these are already checked (e.g., if the command line changes in a test run, it's treated as a different test), but others will need to be implemented.

I was referring to the ''MTT'' command line, not the `exec` param in the `MPI details` section. The only ones that would have any impact on subsequent MTT runs out of the same scratch would be these:
 * INI overrides (e.g., `foo=bar`)
 * `--file`
 * `--[no]-section`"
355,1208803777,jsquyres,"This might not be workable -- the screenshot that I posted was from the OS X Mail.app mail client, not a browser.  It appears that most (all?) mail clients have javascript disabled, so we can't do anything fun there (e.g., mouseover events or somesuch).

So let's leave this as open/future for now, but it may well be hard-wired into mail clients to just show the url in a tooltip (as a security measure)."
357,1211291937,jjhursey,"The new patch looks good to me. I did not test, but just did a code review of the patch."
357,1216755250,jsquyres,Fixed in r1204.
359,1222097739,emallove,"(In [1224])  * `&get_compiler_vendor()`
   Fixes #359 (''Determine compiler_name using Pre-defined Compiler Macros'')
 * Added `intel_ompi_tests_make_arguments`
{{{ClusterTools.pm}}}:
 * Fix libC* installation
 * Add SVN branch to greek version string
 * Only run `config/patch-libtool-for-sun-studio.pl` script
   if it's available
"
360,1212607894,jsquyres,"FWIW, this is because DoCommand::Cmd calls exec(), not system().

Do you have a need for pipe characters?  They might be actually somewhat difficult to support (because of all the extra logic we have to capture stdout/stderr, timeouts, etc.)  :-("
360,1212619172,emallove,"Replying to [comment:1 jsquyres]:
> FWIW, this is because DoCommand::Cmd calls exec(), not system().
> 
> Do you have a need for pipe characters?  They might be actually somewhat difficult to support (because of all the extra logic we have to capture stdout/stderr, timeouts, etc.)  :-(

I can live without pipe characters."
360,1213119669,emallove,"Doh! Redirection doesn't work either (see below).

{{{
MTT::DoCommand::Cmd(1, ""echo hello > /tmp/hello.out"");
}}}

I'm reopening this as a documentation bug. We should document the INI parameters that are impacted by this. E.g., the below would not do what the user expects:

{{{
shell_build_command = <<EOT
./configure
make > make.log
EOT
}}}"
360,1213629124,emallove,"Jeff, would you object to having `DoCommand::Cmd()` write out a `/bin/sh` script and then `exec()` that? This would enable the use of pipes/redirects."
360,1213631828,jsquyres,"Hmm...  I have a distant memory that I didn't do that for a specific reason.  Perhaps it was just performance...?

Regardless, I think there's two modes: one where it does write out a file and run it, and another where it doesn't.  I think the current distinction is if it's multi-line or not.  

How about just extending the distinction logic -- it'll write out a script and run it if it's multi-line ''or'' if it contains some shell meta chars (e.g., <, >, or |)?"
360,1213904280,emallove,"(In [1210])  * Fixes #360 Pipe characters do not work in DoCommand::Cmd (document associated INI limitations)
 * Add `skip_section` for Get phases."
361,1213799830,emallove,"(In [1208]) Fixes #361. (More flexible queries)
Fixes #364. (Fix bitness searching)

Search syntax is borrowed from Google's. See
http://www.google.com/advanced_search?hl=en.

 * `""foo bar""` and `'foo bar'` imply exact phrase
 * Whitespace delimiting implies '''AND'''
 * `|` is '''OR'''
 * `-foo` means '''NOT''' foo"
364,1213799830,emallove,"(In [1208]) Fixes #361. (More flexible queries)
Fixes #364. (Fix bitness searching)

Search syntax is borrowed from Google's. See
http://www.google.com/advanced_search?hl=en.

 * `""foo bar""` and `'foo bar'` imply exact phrase
 * Whitespace delimiting implies '''AND'''
 * `|` is '''OR'''
 * `-foo` means '''NOT''' foo"
366,1215610189,jsquyres,"I agree -- the np value should be controlled by MTT, not Skampi files.  I'd just remove the loop altogether from the .ski files."
366,1216848338,emallove,Fixed in !r1368 (in the [http://svn.open-mpi.org/svn/ompi-tests/trunk/skampi-5.0.1 ompi-tests repository]).
368,1216401602,jsquyres,"That's all fine and good if you're outputting to a terminal, but if you're outputting to a file (e.g., via cron), it looks icky.

So if you can figure out how to tell the difference and only do the \r thing only when outputting to a terminal (you might be able to use some variant of isatty()?), then cool.  :-)"
370,1216776426,jsquyres,"(In [1216]) Fixes #370: have MTT exit if there isn't enough disk space left.
"
372,1221748970,timattox,I have a patch worked up to do this for the mpi-install phase.
373,1217454793,jsquyres,"For whatever reason, this is happening to me on some of my systems (i.e., when I ran MTT manually earlier today).  Pasha was online and sent me Ethan's patch, which seems to fix the problem for me.  I'll commit."
373,1217454885,jsquyres,"(In [1218]) Fixes #373: ensure that timestamps are set properly in the client.
"
375,1217627030,emallove,"Trac limits attachment sizes to 256KB, so the `*split-a*` files need to be `cat`'d together to be unzipped. Here's a [http://www.open-mpi.org/~emallove/mttdatabase-server-errors.tar.gz link] to the full unsplit tarball."
375,1313420003,jjhursey,"Some fixes were placed in r1391 and r1392.

It seems that this occurs when the client does not send the value. So we still send an email, but the client will error instead of sending more.

So not quite closed, but some progress has been made."
380,1220981985,emallove,"Hear hear! 

I created a ''regression hunter'' using something like the below scripty (though it uses a dreaded '''linear''' search algorithm).

{{{
#!sh
for r in ""1 2 3 ...""
do
    client/mtt svn_r=$r --scratch /foo/$r ... | \
        grep ""some error message""
    if test ""$?"" = 1; then
        exit
    fi
done
}}}

Where there's the following `MPI get` section in the INI file:

{{{
[MPI get: ompi-svn-trunk]
mpi_details = Open MPI
svn_url = https://svn.open-mpi.org/svn/ompi/trunk
svn_r = Override this at the command line
scm_module = SVN
module = SCM
}}}

I would like to create a script that uses a resource manager (e.g., SGE) to test multiple revisions in parallel, and uses (as this ticket describes) more advanced search algorithms."
380,1221750817,emallove,Mercurial has a [http://hgbook.red-bean.com/hgbookch9.html#x13-1880009.5 bisect] subcommand which might be relevant to this ticket.
381,1228343330,emallove,"(In [1261]) Fixes #381: (Javascript permalink creator link is broken)
Use {{{|}}} as the delimiter in date ranges so that we do not 
fire a JavaScript syntax error (e.g., {{{OpenPermalinkConfirmation(""""foo"""")}}})
"
382,1227736119,emallove,"A workaround is to put the following in your `Test get` sections:

{{{
setenv = LANG en_US
}}}

But I do not think we would want to hardcode the above `setenv` as we can not be sure which locales are installed on the user's system. I think further investigation of the [http://perldoc.perl.org/perllocale.html perldoc locale documentation] is needed."
382,1227749465,timattox,"I think this would be assured to always work:
{{{
setenv = LANG C
}}}

I'm an old-school UNIX user, and {{{LANG=C}}} makes things like {{{ls}}} sort the old way, in ASCII order, not some natural language order.

Replying to [comment:1 emallove]:
> A workaround is to put the following in your `Test get` sections:
> 
> {{{ setenv = LANG en_US }}}
> 
> But I do not think we would want to hardcode the above `setenv` as we can not be sure which locales are installed on the user's system. I think further investigation of the [http://perldoc.perl.org/perllocale.html perldoc locale documentation] is needed.
"
382,1227799424,jsquyres,"Before making blanket fixes, it would be good to determine exactly what is failing.  There isn't too much in MTT that analyzes stdout to determine success/failure.  SVN checkouts/exports might be looking at the last line to get the SVN r number (I don't remember offhand), for example.  To fix that, we might just need a bit more robust regular expression, or somesuch."
382,1228145234,emallove,"Replying to [comment:3 jsquyres]:
> Before making blanket fixes, it would be good to determine exactly what is failing.  There isn't too much in MTT that analyzes stdout to determine success/failure.  SVN checkouts/exports might be looking at the last line to get the SVN r number (I don't remember offhand), for example.  To fix that, we might just need a bit more robust regular expression, or somesuch.

We could just wrap the `svn [checkout|export]` command with the `LANG=C` env var setting. Right now, MTT looks for this pattern:

{{{
(?:Checked out|Exported) revision (\d+)\.\n$
}}}

On my system, depending on the environment variable, `svn checkout` could output one of the following:

{{{
Ausgecheckt, Revision (\d+).
Checkade ut revision (\d+).
Checked out revision (\d+).
Gerado cópia de trabalho para revisão (\d+).
Pobrano wersjê (\d+).
Revisión obtenida: (\d+)
Sjekket ut revisjon (\d+).
¨ú¥X­×­qª© (\d+).
È¡³öÐÞ¶©°æ (\d+)¡£
}}}

We could use a wide-open `\d+` regexp on the last line. We then assume there is not a case where `svn [checkout|export]` exits with `0`, and outputs a `\d+` on the last line."
382,1228150020,jsquyres,"Do we know that SVN always has LANG=C support compiled in?  Or is that a reasonable assumption?

I don't want to assume that the SVN checkout/export always succeeds -- we've seen cases where it has failed.  More specifically, I'd like to think that a failed SVN checkout/export should raise an error that should be propagated properly."
388,1257366121,emallove,See also this mtt-users discussion: http://www.open-mpi.org/community/lists/mtt-users/2009/11/0693.php
389,1314628432,jjhursey,"This is holding up server upgrades, so we really should fix this sooner rather than later - or get off this server."
389,1338167925,cyeoh,"I've attached a patch which allows the MTT reporter code to run on PHP5. Note that the changes result in it NOT running on PHP4 so maybe we should have a branch for these changes?
"
389,1338299277,jsquyres,"FWIW: I'm ok forcing the issue -- i.e., committing the PHP5 code to the SVN trunk.

I added cyeoh to the mtt repo; feel free to commit this patch there (and send something to the mtt-devel list, just so that everyone is aware of the change).

Thanks!"
389,1338351108,cyeoh,Patch applied in r1474
389,1338376324,jsquyres,"Thanks!

Note that it'll still take a few weeks for us to migrate the MTT server to the newer (virtual) machine (we're migrating some easier services first, just to get some experience, etc.)."
390,1264456380,emallove,"More of the same issue here, this time with `(` and `)` chars: http://www.open-mpi.org/mtt/index.php?do_redir=1200"
393,1271859763,emallove,"Oops!  The result was correctly marked ""fail"", because the pass condition was actually set to the following:
{{{
pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
}}}"
397,1313420310,jjhursey,"We currently stop at the first error in a submission set. This helps manage the problem, but something better or more customizable might be good."
404,1339377765,eugene,"Here is another occurrence:
[[BR]]- phase: Test run
[[BR]]- date: 2012-06-09 00:00:01 - 2012-06-09 23:59:59
[[BR]]- Platform: burl-ct-v20z-14

There are 965 passes and 92 skips for ""intel-32"" but 870 passes and 86 skips for ""intel-64"".  Indeed, during the ""intel-32"" test, a set of results comprising 95 passes and 6 skips (the difference between those two sets) was submitted, but three retries were needed before the submit was considered successful.  Apparently, one of those ""unsuccessful"" attempts actually managed to place results in the database."
404,1339420482,jjhursey,"Duplicates for the retry case would not surprise me for the current submit mechanism. The submit script does '''not''' start a transaction for each submission (as best as I can tell), but streams the data directly into the database. So if the submit is interrupted then it is likely that part of the data being resubmitted is submitted again.

I do not know of an easy fix for this. The way the submit.php works just adding a transaction probably will not work out of the back, but require some reworking of the script."
